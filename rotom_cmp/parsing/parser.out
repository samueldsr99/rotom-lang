Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BANG
    CLASS
    COLON
    EOF
    FALSE
    SUPER
    THIS
    TRUE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> use_list type_def fn_def_list
Rule 2     use_list -> use use_list
Rule 3     use_list -> use
Rule 4     use_list -> empty
Rule 5     use -> USE STRING ARROW IDENTIFIER SEMICOLON
Rule 6     use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
Rule 7     fn_def_list -> fn_def fn_def_list
Rule 8     fn_def_list -> fn_def
Rule 9     fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
Rule 10    fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr
Rule 11    param_list -> IDENTIFIER COMMA param_list
Rule 12    param_list -> IDENTIFIER
Rule 13    param_list -> empty
Rule 14    stmt_list -> stmt stmt_list
Rule 15    stmt_list -> stmt
Rule 16    stmt -> expr SEMICOLON
Rule 17    stmt -> declaration
Rule 18    stmt -> assign
Rule 19    stmt -> print
Rule 20    stmt -> condition
Rule 21    stmt -> while
Rule 22    stmt -> for
Rule 23    stmt -> return
Rule 24    type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE
Rule 25    prop_list -> IDENTIFIER COMMA prop_list
Rule 26    prop_list -> IDENTIFIER COMMA
Rule 27    prop_list -> IDENTIFIER
Rule 28    return -> RETURN expr SEMICOLON
Rule 29    for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 30    for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 31    while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 32    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 33    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
Rule 34    print -> PRINT expr SEMICOLON
Rule 35    print -> PRINTLN expr SEMICOLON
Rule 36    expr -> NOT expr
Rule 37    expr -> expr PLUS expr
Rule 38    expr -> expr MINUS expr
Rule 39    expr -> expr STAR expr
Rule 40    expr -> expr SLASH expr
Rule 41    expr -> expr LESS expr
Rule 42    expr -> expr LESS_EQUAL expr
Rule 43    expr -> expr GREATER expr
Rule 44    expr -> expr GREATER_EQUAL expr
Rule 45    expr -> expr EQUAL_EQUAL expr
Rule 46    expr -> expr BANG_EQUAL expr
Rule 47    expr -> expr OR expr
Rule 48    expr -> expr AND expr
Rule 49    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 50    expr -> NUMBER
Rule 51    expr -> NIL
Rule 52    expr -> STRING
Rule 53    expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET
Rule 54    expr -> expr DOT IDENTIFIER
Rule 55    expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
Rule 56    expr -> expr LEFT_BRACKET expr RIGHT_BRACKET
Rule 57    expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN
Rule 58    expr_list_comma -> expr COMMA expr_list_comma
Rule 59    expr_list_comma -> expr
Rule 60    expr_list_comma -> empty
Rule 61    expr -> IDENTIFIER
Rule 62    expr -> expr IF expr ELSE expr
Rule 63    expr -> LEFT_BRACE stmt_list RIGHT_BRACE
Rule 64    indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET
Rule 65    indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list
Rule 66    declaration -> LET IDENTIFIER EQUAL expr SEMICOLON
Rule 67    declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON
Rule 68    declaration -> LET IDENTIFIER SEMICOLON
Rule 69    declaration -> LET MUT IDENTIFIER SEMICOLON
Rule 70    assign -> expr EQUAL expr SEMICOLON
Rule 71    assign -> expr indexof_list EQUAL expr SEMICOLON
Rule 72    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48
ARROW                : 5 6 10
BANG                 : 
BANG_EQUAL           : 46
CLASS                : 
COLON                : 
COMMA                : 11 25 26 30 58
DOT                  : 54 55
ELSE                 : 33 62
EOF                  : 
EQUAL                : 66 67 70 71
EQUAL_EQUAL          : 45
FALSE                : 
FN                   : 9 10
FOR                  : 29 30
GREATER              : 43
GREATER_EQUAL        : 44
IDENTIFIER           : 5 9 10 11 12 24 25 26 27 29 30 30 54 55 61 66 67 68 69
IF                   : 32 33 62
IN                   : 29 30
LEFT_BRACE           : 9 24 29 30 31 32 33 33 63
LEFT_BRACKET         : 53 56 64 65
LEFT_PAREN           : 6 9 10 49 55 57
LESS                 : 41
LESS_EQUAL           : 42
LET                  : 66 67 68 69
MINUS                : 38
MUT                  : 67 69
NIL                  : 51
NOT                  : 36
NUMBER               : 50
OR                   : 47
PLUS                 : 37
PRINT                : 34
PRINTLN              : 35
RETURN               : 28
RIGHT_BRACE          : 9 24 29 30 31 32 33 33 63
RIGHT_BRACKET        : 53 56 64 65
RIGHT_PAREN          : 6 9 10 49 55 57
SEMICOLON            : 5 6 16 28 34 35 66 67 68 69 70 71
SLASH                : 40
STAR                 : 39
STRING               : 5 6 52
SUPER                : 
THIS                 : 
TRUE                 : 
TYPE                 : 24
USE                  : 5 6
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

assign               : 18
condition            : 20
declaration          : 17
empty                : 4 13 60
expr                 : 10 16 28 29 30 31 32 33 34 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 54 55 56 56 57 58 59 62 62 62 64 65 66 67 70 70 71 71
expr_list_comma      : 53 55 57 58
fn_def               : 7 8
fn_def_list          : 1 7
for                  : 22
indexof_list         : 65 71
param_list           : 6 9 10 11
print                : 19
prog                 : 0
prop_list            : 24 25
return               : 23
stmt                 : 14 15
stmt_list            : 9 14 29 30 31 32 33 33 63
type_def             : 1
use                  : 2 3
use_list             : 1 2
while                : 21

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . use_list type_def fn_def_list
    (2) use_list -> . use use_list
    (3) use_list -> . use
    (4) use_list -> . empty
    (5) use -> . USE STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> . USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
    (72) empty -> .

    USE             shift and go to state 5
    TYPE            reduce using rule 72 (empty -> .)

    prog                           shift and go to state 1
    use_list                       shift and go to state 2
    use                            shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> prog .



state 2

    (1) prog -> use_list . type_def fn_def_list
    (24) type_def -> . TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE

    TYPE            shift and go to state 7

    type_def                       shift and go to state 6

state 3

    (2) use_list -> use . use_list
    (3) use_list -> use .
    (2) use_list -> . use use_list
    (3) use_list -> . use
    (4) use_list -> . empty
    (5) use -> . USE STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> . USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
    (72) empty -> .

  ! reduce/reduce conflict for TYPE resolved using rule 3 (use_list -> use .)
    TYPE            reduce using rule 3 (use_list -> use .)
    USE             shift and go to state 5

  ! TYPE            [ reduce using rule 72 (empty -> .) ]

    use                            shift and go to state 3
    use_list                       shift and go to state 8
    empty                          shift and go to state 4

state 4

    (4) use_list -> empty .

    TYPE            reduce using rule 4 (use_list -> empty .)


state 5

    (5) use -> USE . STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> USE . STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    STRING          shift and go to state 9


state 6

    (1) prog -> use_list type_def . fn_def_list
    (7) fn_def_list -> . fn_def fn_def_list
    (8) fn_def_list -> . fn_def
    (9) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    FN              shift and go to state 12

    fn_def_list                    shift and go to state 10
    fn_def                         shift and go to state 11

state 7

    (24) type_def -> TYPE . IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 13


state 8

    (2) use_list -> use use_list .

    TYPE            reduce using rule 2 (use_list -> use use_list .)


state 9

    (5) use -> USE STRING . ARROW IDENTIFIER SEMICOLON
    (6) use -> USE STRING . ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    ARROW           shift and go to state 14


state 10

    (1) prog -> use_list type_def fn_def_list .

    $end            reduce using rule 1 (prog -> use_list type_def fn_def_list .)


state 11

    (7) fn_def_list -> fn_def . fn_def_list
    (8) fn_def_list -> fn_def .
    (7) fn_def_list -> . fn_def fn_def_list
    (8) fn_def_list -> . fn_def
    (9) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    $end            reduce using rule 8 (fn_def_list -> fn_def .)
    FN              shift and go to state 12

    fn_def                         shift and go to state 11
    fn_def_list                    shift and go to state 15

state 12

    (9) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    IDENTIFIER      shift and go to state 16


state 13

    (24) type_def -> TYPE IDENTIFIER . LEFT_BRACE prop_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 17


state 14

    (5) use -> USE STRING ARROW . IDENTIFIER SEMICOLON
    (6) use -> USE STRING ARROW . LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 18
    LEFT_PAREN      shift and go to state 19


state 15

    (7) fn_def_list -> fn_def fn_def_list .

    $end            reduce using rule 7 (fn_def_list -> fn_def fn_def_list .)


state 16

    (9) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    LEFT_PAREN      shift and go to state 20


state 17

    (24) type_def -> TYPE IDENTIFIER LEFT_BRACE . prop_list RIGHT_BRACE
    (25) prop_list -> . IDENTIFIER COMMA prop_list
    (26) prop_list -> . IDENTIFIER COMMA
    (27) prop_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 21

    prop_list                      shift and go to state 22

state 18

    (5) use -> USE STRING ARROW IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 23


state 19

    (6) use -> USE STRING ARROW LEFT_PAREN . param_list RIGHT_PAREN SEMICOLON
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (72) empty -> .

    IDENTIFIER      shift and go to state 25
    RIGHT_PAREN     reduce using rule 72 (empty -> .)

    param_list                     shift and go to state 24
    empty                          shift and go to state 26

state 20

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN ARROW expr
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (72) empty -> .

    IDENTIFIER      shift and go to state 25
    RIGHT_PAREN     reduce using rule 72 (empty -> .)

    param_list                     shift and go to state 27
    empty                          shift and go to state 26

state 21

    (25) prop_list -> IDENTIFIER . COMMA prop_list
    (26) prop_list -> IDENTIFIER . COMMA
    (27) prop_list -> IDENTIFIER .

    COMMA           shift and go to state 28
    RIGHT_BRACE     reduce using rule 27 (prop_list -> IDENTIFIER .)


state 22

    (24) type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 29


state 23

    (5) use -> USE STRING ARROW IDENTIFIER SEMICOLON .

    USE             reduce using rule 5 (use -> USE STRING ARROW IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 5 (use -> USE STRING ARROW IDENTIFIER SEMICOLON .)


state 24

    (6) use -> USE STRING ARROW LEFT_PAREN param_list . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 30


state 25

    (11) param_list -> IDENTIFIER . COMMA param_list
    (12) param_list -> IDENTIFIER .

    COMMA           shift and go to state 31
    RIGHT_PAREN     reduce using rule 12 (param_list -> IDENTIFIER .)


state 26

    (13) param_list -> empty .

    RIGHT_PAREN     reduce using rule 13 (param_list -> empty .)


state 27

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN ARROW expr

    RIGHT_PAREN     shift and go to state 32


state 28

    (25) prop_list -> IDENTIFIER COMMA . prop_list
    (26) prop_list -> IDENTIFIER COMMA .
    (25) prop_list -> . IDENTIFIER COMMA prop_list
    (26) prop_list -> . IDENTIFIER COMMA
    (27) prop_list -> . IDENTIFIER

    RIGHT_BRACE     reduce using rule 26 (prop_list -> IDENTIFIER COMMA .)
    IDENTIFIER      shift and go to state 21

    prop_list                      shift and go to state 33

state 29

    (24) type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE .

    FN              reduce using rule 24 (type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE .)


state 30

    (6) use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 34


state 31

    (11) param_list -> IDENTIFIER COMMA . param_list
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (72) empty -> .

    IDENTIFIER      shift and go to state 25
    RIGHT_PAREN     reduce using rule 72 (empty -> .)

    param_list                     shift and go to state 35
    empty                          shift and go to state 26

state 32

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . ARROW expr

    LEFT_BRACE      shift and go to state 36
    ARROW           shift and go to state 37


state 33

    (25) prop_list -> IDENTIFIER COMMA prop_list .

    RIGHT_BRACE     reduce using rule 25 (prop_list -> IDENTIFIER COMMA prop_list .)


state 34

    (6) use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .

    USE             reduce using rule 6 (use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .)
    TYPE            reduce using rule 6 (use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .)


state 35

    (11) param_list -> IDENTIFIER COMMA param_list .

    RIGHT_PAREN     reduce using rule 11 (param_list -> IDENTIFIER COMMA param_list .)


state 36

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    stmt_list                      shift and go to state 41
    stmt                           shift and go to state 42
    expr                           shift and go to state 43
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 37

    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 63

state 38

    (61) expr -> IDENTIFIER .

    SEMICOLON       reduce using rule 61 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 61 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 61 (expr -> IDENTIFIER .)
    STAR            reduce using rule 61 (expr -> IDENTIFIER .)
    SLASH           reduce using rule 61 (expr -> IDENTIFIER .)
    LESS            reduce using rule 61 (expr -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 61 (expr -> IDENTIFIER .)
    GREATER         reduce using rule 61 (expr -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 61 (expr -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 61 (expr -> IDENTIFIER .)
    BANG_EQUAL      reduce using rule 61 (expr -> IDENTIFIER .)
    OR              reduce using rule 61 (expr -> IDENTIFIER .)
    AND             reduce using rule 61 (expr -> IDENTIFIER .)
    DOT             reduce using rule 61 (expr -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 61 (expr -> IDENTIFIER .)
    LEFT_PAREN      reduce using rule 61 (expr -> IDENTIFIER .)
    IF              reduce using rule 61 (expr -> IDENTIFIER .)
    EQUAL           reduce using rule 61 (expr -> IDENTIFIER .)
    FN              reduce using rule 61 (expr -> IDENTIFIER .)
    $end            reduce using rule 61 (expr -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 61 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 61 (expr -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 61 (expr -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 61 (expr -> IDENTIFIER .)
    ELSE            reduce using rule 61 (expr -> IDENTIFIER .)


state 39

    (49) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 64

state 40

    (63) expr -> LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    stmt_list                      shift and go to state 65
    stmt                           shift and go to state 42
    expr                           shift and go to state 43
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 41

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 66


state 42

    (14) stmt_list -> stmt . stmt_list
    (15) stmt_list -> stmt .
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    RIGHT_BRACE     reduce using rule 15 (stmt_list -> stmt .)
    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    stmt                           shift and go to state 42
    stmt_list                      shift and go to state 67
    expr                           shift and go to state 43
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 43

    (16) stmt -> expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr
    (70) assign -> expr . EQUAL expr SEMICOLON
    (71) assign -> expr . indexof_list EQUAL expr SEMICOLON
    (64) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (65) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

    SEMICOLON       shift and go to state 68
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 83
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84
    EQUAL           shift and go to state 85

    indexof_list                   shift and go to state 86

state 44

    (17) stmt -> declaration .

    NOT             reduce using rule 17 (stmt -> declaration .)
    LEFT_PAREN      reduce using rule 17 (stmt -> declaration .)
    NUMBER          reduce using rule 17 (stmt -> declaration .)
    NIL             reduce using rule 17 (stmt -> declaration .)
    STRING          reduce using rule 17 (stmt -> declaration .)
    LEFT_BRACKET    reduce using rule 17 (stmt -> declaration .)
    IDENTIFIER      reduce using rule 17 (stmt -> declaration .)
    LEFT_BRACE      reduce using rule 17 (stmt -> declaration .)
    LET             reduce using rule 17 (stmt -> declaration .)
    PRINT           reduce using rule 17 (stmt -> declaration .)
    PRINTLN         reduce using rule 17 (stmt -> declaration .)
    IF              reduce using rule 17 (stmt -> declaration .)
    WHILE           reduce using rule 17 (stmt -> declaration .)
    FOR             reduce using rule 17 (stmt -> declaration .)
    RETURN          reduce using rule 17 (stmt -> declaration .)
    RIGHT_BRACE     reduce using rule 17 (stmt -> declaration .)


state 45

    (18) stmt -> assign .

    NOT             reduce using rule 18 (stmt -> assign .)
    LEFT_PAREN      reduce using rule 18 (stmt -> assign .)
    NUMBER          reduce using rule 18 (stmt -> assign .)
    NIL             reduce using rule 18 (stmt -> assign .)
    STRING          reduce using rule 18 (stmt -> assign .)
    LEFT_BRACKET    reduce using rule 18 (stmt -> assign .)
    IDENTIFIER      reduce using rule 18 (stmt -> assign .)
    LEFT_BRACE      reduce using rule 18 (stmt -> assign .)
    LET             reduce using rule 18 (stmt -> assign .)
    PRINT           reduce using rule 18 (stmt -> assign .)
    PRINTLN         reduce using rule 18 (stmt -> assign .)
    IF              reduce using rule 18 (stmt -> assign .)
    WHILE           reduce using rule 18 (stmt -> assign .)
    FOR             reduce using rule 18 (stmt -> assign .)
    RETURN          reduce using rule 18 (stmt -> assign .)
    RIGHT_BRACE     reduce using rule 18 (stmt -> assign .)


state 46

    (19) stmt -> print .

    NOT             reduce using rule 19 (stmt -> print .)
    LEFT_PAREN      reduce using rule 19 (stmt -> print .)
    NUMBER          reduce using rule 19 (stmt -> print .)
    NIL             reduce using rule 19 (stmt -> print .)
    STRING          reduce using rule 19 (stmt -> print .)
    LEFT_BRACKET    reduce using rule 19 (stmt -> print .)
    IDENTIFIER      reduce using rule 19 (stmt -> print .)
    LEFT_BRACE      reduce using rule 19 (stmt -> print .)
    LET             reduce using rule 19 (stmt -> print .)
    PRINT           reduce using rule 19 (stmt -> print .)
    PRINTLN         reduce using rule 19 (stmt -> print .)
    IF              reduce using rule 19 (stmt -> print .)
    WHILE           reduce using rule 19 (stmt -> print .)
    FOR             reduce using rule 19 (stmt -> print .)
    RETURN          reduce using rule 19 (stmt -> print .)
    RIGHT_BRACE     reduce using rule 19 (stmt -> print .)


state 47

    (20) stmt -> condition .

    NOT             reduce using rule 20 (stmt -> condition .)
    LEFT_PAREN      reduce using rule 20 (stmt -> condition .)
    NUMBER          reduce using rule 20 (stmt -> condition .)
    NIL             reduce using rule 20 (stmt -> condition .)
    STRING          reduce using rule 20 (stmt -> condition .)
    LEFT_BRACKET    reduce using rule 20 (stmt -> condition .)
    IDENTIFIER      reduce using rule 20 (stmt -> condition .)
    LEFT_BRACE      reduce using rule 20 (stmt -> condition .)
    LET             reduce using rule 20 (stmt -> condition .)
    PRINT           reduce using rule 20 (stmt -> condition .)
    PRINTLN         reduce using rule 20 (stmt -> condition .)
    IF              reduce using rule 20 (stmt -> condition .)
    WHILE           reduce using rule 20 (stmt -> condition .)
    FOR             reduce using rule 20 (stmt -> condition .)
    RETURN          reduce using rule 20 (stmt -> condition .)
    RIGHT_BRACE     reduce using rule 20 (stmt -> condition .)


state 48

    (21) stmt -> while .

    NOT             reduce using rule 21 (stmt -> while .)
    LEFT_PAREN      reduce using rule 21 (stmt -> while .)
    NUMBER          reduce using rule 21 (stmt -> while .)
    NIL             reduce using rule 21 (stmt -> while .)
    STRING          reduce using rule 21 (stmt -> while .)
    LEFT_BRACKET    reduce using rule 21 (stmt -> while .)
    IDENTIFIER      reduce using rule 21 (stmt -> while .)
    LEFT_BRACE      reduce using rule 21 (stmt -> while .)
    LET             reduce using rule 21 (stmt -> while .)
    PRINT           reduce using rule 21 (stmt -> while .)
    PRINTLN         reduce using rule 21 (stmt -> while .)
    IF              reduce using rule 21 (stmt -> while .)
    WHILE           reduce using rule 21 (stmt -> while .)
    FOR             reduce using rule 21 (stmt -> while .)
    RETURN          reduce using rule 21 (stmt -> while .)
    RIGHT_BRACE     reduce using rule 21 (stmt -> while .)


state 49

    (22) stmt -> for .

    NOT             reduce using rule 22 (stmt -> for .)
    LEFT_PAREN      reduce using rule 22 (stmt -> for .)
    NUMBER          reduce using rule 22 (stmt -> for .)
    NIL             reduce using rule 22 (stmt -> for .)
    STRING          reduce using rule 22 (stmt -> for .)
    LEFT_BRACKET    reduce using rule 22 (stmt -> for .)
    IDENTIFIER      reduce using rule 22 (stmt -> for .)
    LEFT_BRACE      reduce using rule 22 (stmt -> for .)
    LET             reduce using rule 22 (stmt -> for .)
    PRINT           reduce using rule 22 (stmt -> for .)
    PRINTLN         reduce using rule 22 (stmt -> for .)
    IF              reduce using rule 22 (stmt -> for .)
    WHILE           reduce using rule 22 (stmt -> for .)
    FOR             reduce using rule 22 (stmt -> for .)
    RETURN          reduce using rule 22 (stmt -> for .)
    RIGHT_BRACE     reduce using rule 22 (stmt -> for .)


state 50

    (23) stmt -> return .

    NOT             reduce using rule 23 (stmt -> return .)
    LEFT_PAREN      reduce using rule 23 (stmt -> return .)
    NUMBER          reduce using rule 23 (stmt -> return .)
    NIL             reduce using rule 23 (stmt -> return .)
    STRING          reduce using rule 23 (stmt -> return .)
    LEFT_BRACKET    reduce using rule 23 (stmt -> return .)
    IDENTIFIER      reduce using rule 23 (stmt -> return .)
    LEFT_BRACE      reduce using rule 23 (stmt -> return .)
    LET             reduce using rule 23 (stmt -> return .)
    PRINT           reduce using rule 23 (stmt -> return .)
    PRINTLN         reduce using rule 23 (stmt -> return .)
    IF              reduce using rule 23 (stmt -> return .)
    WHILE           reduce using rule 23 (stmt -> return .)
    FOR             reduce using rule 23 (stmt -> return .)
    RETURN          reduce using rule 23 (stmt -> return .)
    RIGHT_BRACE     reduce using rule 23 (stmt -> return .)


state 51

    (36) expr -> NOT . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 87

state 52

    (50) expr -> NUMBER .

    SEMICOLON       reduce using rule 50 (expr -> NUMBER .)
    PLUS            reduce using rule 50 (expr -> NUMBER .)
    MINUS           reduce using rule 50 (expr -> NUMBER .)
    STAR            reduce using rule 50 (expr -> NUMBER .)
    SLASH           reduce using rule 50 (expr -> NUMBER .)
    LESS            reduce using rule 50 (expr -> NUMBER .)
    LESS_EQUAL      reduce using rule 50 (expr -> NUMBER .)
    GREATER         reduce using rule 50 (expr -> NUMBER .)
    GREATER_EQUAL   reduce using rule 50 (expr -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 50 (expr -> NUMBER .)
    BANG_EQUAL      reduce using rule 50 (expr -> NUMBER .)
    OR              reduce using rule 50 (expr -> NUMBER .)
    AND             reduce using rule 50 (expr -> NUMBER .)
    DOT             reduce using rule 50 (expr -> NUMBER .)
    LEFT_BRACKET    reduce using rule 50 (expr -> NUMBER .)
    LEFT_PAREN      reduce using rule 50 (expr -> NUMBER .)
    IF              reduce using rule 50 (expr -> NUMBER .)
    EQUAL           reduce using rule 50 (expr -> NUMBER .)
    FN              reduce using rule 50 (expr -> NUMBER .)
    $end            reduce using rule 50 (expr -> NUMBER .)
    RIGHT_PAREN     reduce using rule 50 (expr -> NUMBER .)
    COMMA           reduce using rule 50 (expr -> NUMBER .)
    RIGHT_BRACKET   reduce using rule 50 (expr -> NUMBER .)
    LEFT_BRACE      reduce using rule 50 (expr -> NUMBER .)
    ELSE            reduce using rule 50 (expr -> NUMBER .)


state 53

    (51) expr -> NIL .

    SEMICOLON       reduce using rule 51 (expr -> NIL .)
    PLUS            reduce using rule 51 (expr -> NIL .)
    MINUS           reduce using rule 51 (expr -> NIL .)
    STAR            reduce using rule 51 (expr -> NIL .)
    SLASH           reduce using rule 51 (expr -> NIL .)
    LESS            reduce using rule 51 (expr -> NIL .)
    LESS_EQUAL      reduce using rule 51 (expr -> NIL .)
    GREATER         reduce using rule 51 (expr -> NIL .)
    GREATER_EQUAL   reduce using rule 51 (expr -> NIL .)
    EQUAL_EQUAL     reduce using rule 51 (expr -> NIL .)
    BANG_EQUAL      reduce using rule 51 (expr -> NIL .)
    OR              reduce using rule 51 (expr -> NIL .)
    AND             reduce using rule 51 (expr -> NIL .)
    DOT             reduce using rule 51 (expr -> NIL .)
    LEFT_BRACKET    reduce using rule 51 (expr -> NIL .)
    LEFT_PAREN      reduce using rule 51 (expr -> NIL .)
    IF              reduce using rule 51 (expr -> NIL .)
    EQUAL           reduce using rule 51 (expr -> NIL .)
    FN              reduce using rule 51 (expr -> NIL .)
    $end            reduce using rule 51 (expr -> NIL .)
    RIGHT_PAREN     reduce using rule 51 (expr -> NIL .)
    COMMA           reduce using rule 51 (expr -> NIL .)
    RIGHT_BRACKET   reduce using rule 51 (expr -> NIL .)
    LEFT_BRACE      reduce using rule 51 (expr -> NIL .)
    ELSE            reduce using rule 51 (expr -> NIL .)


state 54

    (52) expr -> STRING .

    SEMICOLON       reduce using rule 52 (expr -> STRING .)
    PLUS            reduce using rule 52 (expr -> STRING .)
    MINUS           reduce using rule 52 (expr -> STRING .)
    STAR            reduce using rule 52 (expr -> STRING .)
    SLASH           reduce using rule 52 (expr -> STRING .)
    LESS            reduce using rule 52 (expr -> STRING .)
    LESS_EQUAL      reduce using rule 52 (expr -> STRING .)
    GREATER         reduce using rule 52 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 52 (expr -> STRING .)
    EQUAL_EQUAL     reduce using rule 52 (expr -> STRING .)
    BANG_EQUAL      reduce using rule 52 (expr -> STRING .)
    OR              reduce using rule 52 (expr -> STRING .)
    AND             reduce using rule 52 (expr -> STRING .)
    DOT             reduce using rule 52 (expr -> STRING .)
    LEFT_BRACKET    reduce using rule 52 (expr -> STRING .)
    LEFT_PAREN      reduce using rule 52 (expr -> STRING .)
    IF              reduce using rule 52 (expr -> STRING .)
    EQUAL           reduce using rule 52 (expr -> STRING .)
    FN              reduce using rule 52 (expr -> STRING .)
    $end            reduce using rule 52 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 52 (expr -> STRING .)
    COMMA           reduce using rule 52 (expr -> STRING .)
    RIGHT_BRACKET   reduce using rule 52 (expr -> STRING .)
    LEFT_BRACE      reduce using rule 52 (expr -> STRING .)
    ELSE            reduce using rule 52 (expr -> STRING .)


state 55

    (53) expr -> LEFT_BRACKET . expr_list_comma RIGHT_BRACKET
    (58) expr_list_comma -> . expr COMMA expr_list_comma
    (59) expr_list_comma -> . expr
    (60) expr_list_comma -> . empty
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (72) empty -> .

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    RIGHT_BRACKET   reduce using rule 72 (empty -> .)

    expr_list_comma                shift and go to state 88
    expr                           shift and go to state 89
    empty                          shift and go to state 90

state 56

    (32) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 91

state 57

    (66) declaration -> LET . IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> LET . MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> LET . IDENTIFIER SEMICOLON
    (69) declaration -> LET . MUT IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 92
    MUT             shift and go to state 93


state 58

    (34) print -> PRINT . expr SEMICOLON
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 94

state 59

    (35) print -> PRINTLN . expr SEMICOLON
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 95

state 60

    (31) while -> WHILE . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 96

state 61

    (29) for -> FOR . IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> FOR . IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 97


state 62

    (28) return -> RETURN . expr SEMICOLON
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 98

state 63

    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    FN              reduce using rule 10 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    $end            reduce using rule 10 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 64

    (49) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    RIGHT_PAREN     shift and go to state 100
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 65

    (63) expr -> LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 101


state 66

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .

    FN              reduce using rule 9 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 9 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)


state 67

    (14) stmt_list -> stmt stmt_list .

    RIGHT_BRACE     reduce using rule 14 (stmt_list -> stmt stmt_list .)


state 68

    (16) stmt -> expr SEMICOLON .

    NOT             reduce using rule 16 (stmt -> expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 16 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 16 (stmt -> expr SEMICOLON .)
    NIL             reduce using rule 16 (stmt -> expr SEMICOLON .)
    STRING          reduce using rule 16 (stmt -> expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 16 (stmt -> expr SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (stmt -> expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 16 (stmt -> expr SEMICOLON .)
    LET             reduce using rule 16 (stmt -> expr SEMICOLON .)
    PRINT           reduce using rule 16 (stmt -> expr SEMICOLON .)
    PRINTLN         reduce using rule 16 (stmt -> expr SEMICOLON .)
    IF              reduce using rule 16 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 16 (stmt -> expr SEMICOLON .)
    FOR             reduce using rule 16 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 16 (stmt -> expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 16 (stmt -> expr SEMICOLON .)


state 69

    (37) expr -> expr PLUS . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 102

state 70

    (38) expr -> expr MINUS . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 103

state 71

    (39) expr -> expr STAR . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 104

state 72

    (40) expr -> expr SLASH . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 105

state 73

    (41) expr -> expr LESS . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 106

state 74

    (42) expr -> expr LESS_EQUAL . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 107

state 75

    (43) expr -> expr GREATER . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 108

state 76

    (44) expr -> expr GREATER_EQUAL . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 109

state 77

    (45) expr -> expr EQUAL_EQUAL . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 110

state 78

    (46) expr -> expr BANG_EQUAL . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 111

state 79

    (47) expr -> expr OR . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 112

state 80

    (48) expr -> expr AND . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 113

state 81

    (54) expr -> expr DOT . IDENTIFIER
    (55) expr -> expr DOT . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN

    IDENTIFIER      shift and go to state 114


state 82

    (57) expr -> expr LEFT_PAREN . expr_list_comma RIGHT_PAREN
    (58) expr_list_comma -> . expr COMMA expr_list_comma
    (59) expr_list_comma -> . expr
    (60) expr_list_comma -> . empty
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (72) empty -> .

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    RIGHT_PAREN     reduce using rule 72 (empty -> .)

    expr                           shift and go to state 89
    expr_list_comma                shift and go to state 115
    empty                          shift and go to state 90

state 83

    (56) expr -> expr LEFT_BRACKET . expr RIGHT_BRACKET
    (64) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET
    (65) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET indexof_list
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 116

state 84

    (62) expr -> expr IF . expr ELSE expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 117

state 85

    (70) assign -> expr EQUAL . expr SEMICOLON
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 118

state 86

    (71) assign -> expr indexof_list . EQUAL expr SEMICOLON

    EQUAL           shift and go to state 119


state 87

    (36) expr -> NOT expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 36 (expr -> NOT expr .)
    DOT             reduce using rule 36 (expr -> NOT expr .)
    LEFT_BRACKET    reduce using rule 36 (expr -> NOT expr .)
    LEFT_PAREN      reduce using rule 36 (expr -> NOT expr .)
    IF              reduce using rule 36 (expr -> NOT expr .)
    EQUAL           reduce using rule 36 (expr -> NOT expr .)
    FN              reduce using rule 36 (expr -> NOT expr .)
    $end            reduce using rule 36 (expr -> NOT expr .)
    RIGHT_PAREN     reduce using rule 36 (expr -> NOT expr .)
    COMMA           reduce using rule 36 (expr -> NOT expr .)
    RIGHT_BRACKET   reduce using rule 36 (expr -> NOT expr .)
    LEFT_BRACE      reduce using rule 36 (expr -> NOT expr .)
    ELSE            reduce using rule 36 (expr -> NOT expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80

  ! PLUS            [ reduce using rule 36 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> NOT expr .) ]
  ! STAR            [ reduce using rule 36 (expr -> NOT expr .) ]
  ! SLASH           [ reduce using rule 36 (expr -> NOT expr .) ]
  ! LESS            [ reduce using rule 36 (expr -> NOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expr -> NOT expr .) ]
  ! GREATER         [ reduce using rule 36 (expr -> NOT expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 36 (expr -> NOT expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 36 (expr -> NOT expr .) ]
  ! BANG_EQUAL      [ reduce using rule 36 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 36 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 36 (expr -> NOT expr .) ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 88

    (53) expr -> LEFT_BRACKET expr_list_comma . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 120


state 89

    (58) expr_list_comma -> expr . COMMA expr_list_comma
    (59) expr_list_comma -> expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    COMMA           shift and go to state 121
    RIGHT_BRACKET   reduce using rule 59 (expr_list_comma -> expr .)
    RIGHT_PAREN     reduce using rule 59 (expr_list_comma -> expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 90

    (60) expr_list_comma -> empty .

    RIGHT_BRACKET   reduce using rule 60 (expr_list_comma -> empty .)
    RIGHT_PAREN     reduce using rule 60 (expr_list_comma -> empty .)


state 91

    (32) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 122
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 92

    (66) declaration -> LET IDENTIFIER . EQUAL expr SEMICOLON
    (68) declaration -> LET IDENTIFIER . SEMICOLON

    EQUAL           shift and go to state 123
    SEMICOLON       shift and go to state 124


state 93

    (67) declaration -> LET MUT . IDENTIFIER EQUAL expr SEMICOLON
    (69) declaration -> LET MUT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 125


state 94

    (34) print -> PRINT expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 126
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 95

    (35) print -> PRINTLN expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 127
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 96

    (31) while -> WHILE expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 128
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 97

    (29) for -> FOR IDENTIFIER . IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> FOR IDENTIFIER . COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IN              shift and go to state 129
    COMMA           shift and go to state 130


state 98

    (28) return -> RETURN expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 131
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 99

    (56) expr -> expr LEFT_BRACKET . expr RIGHT_BRACKET
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 132

state 100

    (49) expr -> LEFT_PAREN expr RIGHT_PAREN .

    SEMICOLON       reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    PLUS            reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    STAR            reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SLASH           reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS            reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER         reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    DOT             reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUAL           reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    FN              reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    ELSE            reduce using rule 49 (expr -> LEFT_PAREN expr RIGHT_PAREN .)


state 101

    (63) expr -> LEFT_BRACE stmt_list RIGHT_BRACE .

    SEMICOLON       reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    PLUS            reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    MINUS           reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    STAR            reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    SLASH           reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS            reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS_EQUAL      reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER         reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER_EQUAL   reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    EQUAL_EQUAL     reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    BANG_EQUAL      reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    OR              reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    AND             reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    DOT             reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    EQUAL           reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    FN              reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    COMMA           reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            reduce using rule 63 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)


state 102

    (37) expr -> expr PLUS expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 37 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 37 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 37 (expr -> expr PLUS expr .)
    STAR            reduce using rule 37 (expr -> expr PLUS expr .)
    SLASH           reduce using rule 37 (expr -> expr PLUS expr .)
    LESS            reduce using rule 37 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 37 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 37 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 37 (expr -> expr PLUS expr .)
    EQUAL_EQUAL     reduce using rule 37 (expr -> expr PLUS expr .)
    BANG_EQUAL      reduce using rule 37 (expr -> expr PLUS expr .)
    OR              reduce using rule 37 (expr -> expr PLUS expr .)
    AND             reduce using rule 37 (expr -> expr PLUS expr .)
    DOT             reduce using rule 37 (expr -> expr PLUS expr .)
    LEFT_BRACKET    reduce using rule 37 (expr -> expr PLUS expr .)
    LEFT_PAREN      reduce using rule 37 (expr -> expr PLUS expr .)
    IF              reduce using rule 37 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 37 (expr -> expr PLUS expr .)
    FN              reduce using rule 37 (expr -> expr PLUS expr .)
    $end            reduce using rule 37 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 37 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 37 (expr -> expr PLUS expr .)
    RIGHT_BRACKET   reduce using rule 37 (expr -> expr PLUS expr .)
    LEFT_BRACE      reduce using rule 37 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 37 (expr -> expr PLUS expr .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! STAR            [ shift and go to state 71 ]
  ! SLASH           [ shift and go to state 72 ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 103

    (38) expr -> expr MINUS expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 38 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 38 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 38 (expr -> expr MINUS expr .)
    STAR            reduce using rule 38 (expr -> expr MINUS expr .)
    SLASH           reduce using rule 38 (expr -> expr MINUS expr .)
    LESS            reduce using rule 38 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 38 (expr -> expr MINUS expr .)
    GREATER         reduce using rule 38 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 38 (expr -> expr MINUS expr .)
    EQUAL_EQUAL     reduce using rule 38 (expr -> expr MINUS expr .)
    BANG_EQUAL      reduce using rule 38 (expr -> expr MINUS expr .)
    OR              reduce using rule 38 (expr -> expr MINUS expr .)
    AND             reduce using rule 38 (expr -> expr MINUS expr .)
    DOT             reduce using rule 38 (expr -> expr MINUS expr .)
    LEFT_BRACKET    reduce using rule 38 (expr -> expr MINUS expr .)
    LEFT_PAREN      reduce using rule 38 (expr -> expr MINUS expr .)
    IF              reduce using rule 38 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 38 (expr -> expr MINUS expr .)
    FN              reduce using rule 38 (expr -> expr MINUS expr .)
    $end            reduce using rule 38 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 38 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 38 (expr -> expr MINUS expr .)
    RIGHT_BRACKET   reduce using rule 38 (expr -> expr MINUS expr .)
    LEFT_BRACE      reduce using rule 38 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 38 (expr -> expr MINUS expr .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! STAR            [ shift and go to state 71 ]
  ! SLASH           [ shift and go to state 72 ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 104

    (39) expr -> expr STAR expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 39 (expr -> expr STAR expr .)
    PLUS            reduce using rule 39 (expr -> expr STAR expr .)
    MINUS           reduce using rule 39 (expr -> expr STAR expr .)
    STAR            reduce using rule 39 (expr -> expr STAR expr .)
    SLASH           reduce using rule 39 (expr -> expr STAR expr .)
    LESS            reduce using rule 39 (expr -> expr STAR expr .)
    LESS_EQUAL      reduce using rule 39 (expr -> expr STAR expr .)
    GREATER         reduce using rule 39 (expr -> expr STAR expr .)
    GREATER_EQUAL   reduce using rule 39 (expr -> expr STAR expr .)
    EQUAL_EQUAL     reduce using rule 39 (expr -> expr STAR expr .)
    BANG_EQUAL      reduce using rule 39 (expr -> expr STAR expr .)
    OR              reduce using rule 39 (expr -> expr STAR expr .)
    AND             reduce using rule 39 (expr -> expr STAR expr .)
    DOT             reduce using rule 39 (expr -> expr STAR expr .)
    LEFT_BRACKET    reduce using rule 39 (expr -> expr STAR expr .)
    LEFT_PAREN      reduce using rule 39 (expr -> expr STAR expr .)
    IF              reduce using rule 39 (expr -> expr STAR expr .)
    EQUAL           reduce using rule 39 (expr -> expr STAR expr .)
    FN              reduce using rule 39 (expr -> expr STAR expr .)
    $end            reduce using rule 39 (expr -> expr STAR expr .)
    RIGHT_PAREN     reduce using rule 39 (expr -> expr STAR expr .)
    COMMA           reduce using rule 39 (expr -> expr STAR expr .)
    RIGHT_BRACKET   reduce using rule 39 (expr -> expr STAR expr .)
    LEFT_BRACE      reduce using rule 39 (expr -> expr STAR expr .)
    ELSE            reduce using rule 39 (expr -> expr STAR expr .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! STAR            [ shift and go to state 71 ]
  ! SLASH           [ shift and go to state 72 ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 105

    (40) expr -> expr SLASH expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 40 (expr -> expr SLASH expr .)
    PLUS            reduce using rule 40 (expr -> expr SLASH expr .)
    MINUS           reduce using rule 40 (expr -> expr SLASH expr .)
    STAR            reduce using rule 40 (expr -> expr SLASH expr .)
    SLASH           reduce using rule 40 (expr -> expr SLASH expr .)
    LESS            reduce using rule 40 (expr -> expr SLASH expr .)
    LESS_EQUAL      reduce using rule 40 (expr -> expr SLASH expr .)
    GREATER         reduce using rule 40 (expr -> expr SLASH expr .)
    GREATER_EQUAL   reduce using rule 40 (expr -> expr SLASH expr .)
    EQUAL_EQUAL     reduce using rule 40 (expr -> expr SLASH expr .)
    BANG_EQUAL      reduce using rule 40 (expr -> expr SLASH expr .)
    OR              reduce using rule 40 (expr -> expr SLASH expr .)
    AND             reduce using rule 40 (expr -> expr SLASH expr .)
    DOT             reduce using rule 40 (expr -> expr SLASH expr .)
    LEFT_BRACKET    reduce using rule 40 (expr -> expr SLASH expr .)
    LEFT_PAREN      reduce using rule 40 (expr -> expr SLASH expr .)
    IF              reduce using rule 40 (expr -> expr SLASH expr .)
    EQUAL           reduce using rule 40 (expr -> expr SLASH expr .)
    FN              reduce using rule 40 (expr -> expr SLASH expr .)
    $end            reduce using rule 40 (expr -> expr SLASH expr .)
    RIGHT_PAREN     reduce using rule 40 (expr -> expr SLASH expr .)
    COMMA           reduce using rule 40 (expr -> expr SLASH expr .)
    RIGHT_BRACKET   reduce using rule 40 (expr -> expr SLASH expr .)
    LEFT_BRACE      reduce using rule 40 (expr -> expr SLASH expr .)
    ELSE            reduce using rule 40 (expr -> expr SLASH expr .)

  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 70 ]
  ! STAR            [ shift and go to state 71 ]
  ! SLASH           [ shift and go to state 72 ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 106

    (41) expr -> expr LESS expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 41 (expr -> expr LESS expr .)
    LESS            reduce using rule 41 (expr -> expr LESS expr .)
    LESS_EQUAL      reduce using rule 41 (expr -> expr LESS expr .)
    GREATER         reduce using rule 41 (expr -> expr LESS expr .)
    GREATER_EQUAL   reduce using rule 41 (expr -> expr LESS expr .)
    EQUAL_EQUAL     reduce using rule 41 (expr -> expr LESS expr .)
    BANG_EQUAL      reduce using rule 41 (expr -> expr LESS expr .)
    OR              reduce using rule 41 (expr -> expr LESS expr .)
    AND             reduce using rule 41 (expr -> expr LESS expr .)
    DOT             reduce using rule 41 (expr -> expr LESS expr .)
    LEFT_BRACKET    reduce using rule 41 (expr -> expr LESS expr .)
    LEFT_PAREN      reduce using rule 41 (expr -> expr LESS expr .)
    IF              reduce using rule 41 (expr -> expr LESS expr .)
    EQUAL           reduce using rule 41 (expr -> expr LESS expr .)
    FN              reduce using rule 41 (expr -> expr LESS expr .)
    $end            reduce using rule 41 (expr -> expr LESS expr .)
    RIGHT_PAREN     reduce using rule 41 (expr -> expr LESS expr .)
    COMMA           reduce using rule 41 (expr -> expr LESS expr .)
    RIGHT_BRACKET   reduce using rule 41 (expr -> expr LESS expr .)
    LEFT_BRACE      reduce using rule 41 (expr -> expr LESS expr .)
    ELSE            reduce using rule 41 (expr -> expr LESS expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 41 (expr -> expr LESS expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr LESS expr .) ]
  ! STAR            [ reduce using rule 41 (expr -> expr LESS expr .) ]
  ! SLASH           [ reduce using rule 41 (expr -> expr LESS expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 107

    (42) expr -> expr LESS_EQUAL expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    LESS            reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    GREATER         reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    BANG_EQUAL      reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    OR              reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    DOT             reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    LEFT_PAREN      reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    IF              reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    EQUAL           reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    FN              reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    $end            reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    LEFT_BRACE      reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    ELSE            reduce using rule 42 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 42 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr LESS_EQUAL expr .) ]
  ! STAR            [ reduce using rule 42 (expr -> expr LESS_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 42 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 108

    (43) expr -> expr GREATER expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 43 (expr -> expr GREATER expr .)
    LESS            reduce using rule 43 (expr -> expr GREATER expr .)
    LESS_EQUAL      reduce using rule 43 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 43 (expr -> expr GREATER expr .)
    GREATER_EQUAL   reduce using rule 43 (expr -> expr GREATER expr .)
    EQUAL_EQUAL     reduce using rule 43 (expr -> expr GREATER expr .)
    BANG_EQUAL      reduce using rule 43 (expr -> expr GREATER expr .)
    OR              reduce using rule 43 (expr -> expr GREATER expr .)
    AND             reduce using rule 43 (expr -> expr GREATER expr .)
    DOT             reduce using rule 43 (expr -> expr GREATER expr .)
    LEFT_BRACKET    reduce using rule 43 (expr -> expr GREATER expr .)
    LEFT_PAREN      reduce using rule 43 (expr -> expr GREATER expr .)
    IF              reduce using rule 43 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 43 (expr -> expr GREATER expr .)
    FN              reduce using rule 43 (expr -> expr GREATER expr .)
    $end            reduce using rule 43 (expr -> expr GREATER expr .)
    RIGHT_PAREN     reduce using rule 43 (expr -> expr GREATER expr .)
    COMMA           reduce using rule 43 (expr -> expr GREATER expr .)
    RIGHT_BRACKET   reduce using rule 43 (expr -> expr GREATER expr .)
    LEFT_BRACE      reduce using rule 43 (expr -> expr GREATER expr .)
    ELSE            reduce using rule 43 (expr -> expr GREATER expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 43 (expr -> expr GREATER expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr GREATER expr .) ]
  ! STAR            [ reduce using rule 43 (expr -> expr GREATER expr .) ]
  ! SLASH           [ reduce using rule 43 (expr -> expr GREATER expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 109

    (44) expr -> expr GREATER_EQUAL expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    LESS            reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    LESS_EQUAL      reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    GREATER         reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    BANG_EQUAL      reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    DOT             reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    LEFT_PAREN      reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    IF              reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    EQUAL           reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    FN              reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    $end            reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    LEFT_BRACE      reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    ELSE            reduce using rule 44 (expr -> expr GREATER_EQUAL expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 44 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr GREATER_EQUAL expr .) ]
  ! STAR            [ reduce using rule 44 (expr -> expr GREATER_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 44 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 110

    (45) expr -> expr EQUAL_EQUAL expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    LESS            reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    LESS_EQUAL      reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    GREATER         reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    BANG_EQUAL      reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    OR              reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    AND             reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    DOT             reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_PAREN      reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    IF              reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    EQUAL           reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    FN              reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    $end            reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    COMMA           reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_BRACE      reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    ELSE            reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .) ]
  ! STAR            [ reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 45 (expr -> expr EQUAL_EQUAL expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 111

    (46) expr -> expr BANG_EQUAL expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    LESS            reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    LESS_EQUAL      reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    GREATER         reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    BANG_EQUAL      reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    OR              reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    AND             reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    DOT             reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    LEFT_PAREN      reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    IF              reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    EQUAL           reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    FN              reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    $end            reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    COMMA           reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    LEFT_BRACE      reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    ELSE            reduce using rule 46 (expr -> expr BANG_EQUAL expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 46 (expr -> expr BANG_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr BANG_EQUAL expr .) ]
  ! STAR            [ reduce using rule 46 (expr -> expr BANG_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 46 (expr -> expr BANG_EQUAL expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 112

    (47) expr -> expr OR expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 47 (expr -> expr OR expr .)
    LESS            reduce using rule 47 (expr -> expr OR expr .)
    LESS_EQUAL      reduce using rule 47 (expr -> expr OR expr .)
    GREATER         reduce using rule 47 (expr -> expr OR expr .)
    GREATER_EQUAL   reduce using rule 47 (expr -> expr OR expr .)
    EQUAL_EQUAL     reduce using rule 47 (expr -> expr OR expr .)
    BANG_EQUAL      reduce using rule 47 (expr -> expr OR expr .)
    OR              reduce using rule 47 (expr -> expr OR expr .)
    AND             reduce using rule 47 (expr -> expr OR expr .)
    DOT             reduce using rule 47 (expr -> expr OR expr .)
    LEFT_BRACKET    reduce using rule 47 (expr -> expr OR expr .)
    LEFT_PAREN      reduce using rule 47 (expr -> expr OR expr .)
    IF              reduce using rule 47 (expr -> expr OR expr .)
    EQUAL           reduce using rule 47 (expr -> expr OR expr .)
    FN              reduce using rule 47 (expr -> expr OR expr .)
    $end            reduce using rule 47 (expr -> expr OR expr .)
    RIGHT_PAREN     reduce using rule 47 (expr -> expr OR expr .)
    COMMA           reduce using rule 47 (expr -> expr OR expr .)
    RIGHT_BRACKET   reduce using rule 47 (expr -> expr OR expr .)
    LEFT_BRACE      reduce using rule 47 (expr -> expr OR expr .)
    ELSE            reduce using rule 47 (expr -> expr OR expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! STAR            [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! SLASH           [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 113

    (48) expr -> expr AND expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 48 (expr -> expr AND expr .)
    LESS            reduce using rule 48 (expr -> expr AND expr .)
    LESS_EQUAL      reduce using rule 48 (expr -> expr AND expr .)
    GREATER         reduce using rule 48 (expr -> expr AND expr .)
    GREATER_EQUAL   reduce using rule 48 (expr -> expr AND expr .)
    EQUAL_EQUAL     reduce using rule 48 (expr -> expr AND expr .)
    BANG_EQUAL      reduce using rule 48 (expr -> expr AND expr .)
    OR              reduce using rule 48 (expr -> expr AND expr .)
    AND             reduce using rule 48 (expr -> expr AND expr .)
    DOT             reduce using rule 48 (expr -> expr AND expr .)
    LEFT_BRACKET    reduce using rule 48 (expr -> expr AND expr .)
    LEFT_PAREN      reduce using rule 48 (expr -> expr AND expr .)
    IF              reduce using rule 48 (expr -> expr AND expr .)
    EQUAL           reduce using rule 48 (expr -> expr AND expr .)
    FN              reduce using rule 48 (expr -> expr AND expr .)
    $end            reduce using rule 48 (expr -> expr AND expr .)
    RIGHT_PAREN     reduce using rule 48 (expr -> expr AND expr .)
    COMMA           reduce using rule 48 (expr -> expr AND expr .)
    RIGHT_BRACKET   reduce using rule 48 (expr -> expr AND expr .)
    LEFT_BRACE      reduce using rule 48 (expr -> expr AND expr .)
    ELSE            reduce using rule 48 (expr -> expr AND expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72

  ! PLUS            [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! STAR            [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! SLASH           [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! LESS            [ shift and go to state 73 ]
  ! LESS_EQUAL      [ shift and go to state 74 ]
  ! GREATER         [ shift and go to state 75 ]
  ! GREATER_EQUAL   [ shift and go to state 76 ]
  ! EQUAL_EQUAL     [ shift and go to state 77 ]
  ! BANG_EQUAL      [ shift and go to state 78 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 80 ]
  ! DOT             [ shift and go to state 81 ]
  ! LEFT_BRACKET    [ shift and go to state 99 ]
  ! LEFT_PAREN      [ shift and go to state 82 ]
  ! IF              [ shift and go to state 84 ]


state 114

    (54) expr -> expr DOT IDENTIFIER .
    (55) expr -> expr DOT IDENTIFIER . LEFT_PAREN expr_list_comma RIGHT_PAREN

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    SEMICOLON       reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    PLUS            reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    MINUS           reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    STAR            reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    SLASH           reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    LESS            reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    LESS_EQUAL      reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    GREATER         reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    BANG_EQUAL      reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    OR              reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    AND             reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    DOT             reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    IF              reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    EQUAL           reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    FN              reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    $end            reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    COMMA           reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    LEFT_BRACE      reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    ELSE            reduce using rule 54 (expr -> expr DOT IDENTIFIER .)
    LEFT_PAREN      shift and go to state 133

  ! LEFT_PAREN      [ reduce using rule 54 (expr -> expr DOT IDENTIFIER .) ]


state 115

    (57) expr -> expr LEFT_PAREN expr_list_comma . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 134


state 116

    (56) expr -> expr LEFT_BRACKET expr . RIGHT_BRACKET
    (64) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET
    (65) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET indexof_list
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 135
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 117

    (62) expr -> expr IF expr . ELSE expr
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    ELSE            shift and go to state 136
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 118

    (70) assign -> expr EQUAL expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 137
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 119

    (71) assign -> expr indexof_list EQUAL . expr SEMICOLON
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 138

state 120

    (53) expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .

    SEMICOLON       reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    PLUS            reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    MINUS           reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    STAR            reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    SLASH           reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS            reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER         reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    OR              reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    AND             reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    DOT             reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    IF              reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    EQUAL           reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    FN              reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    $end            reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    COMMA           reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACE      reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    ELSE            reduce using rule 53 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)


state 121

    (58) expr_list_comma -> expr COMMA . expr_list_comma
    (58) expr_list_comma -> . expr COMMA expr_list_comma
    (59) expr_list_comma -> . expr
    (60) expr_list_comma -> . empty
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (72) empty -> .

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    RIGHT_BRACKET   reduce using rule 72 (empty -> .)
    RIGHT_PAREN     reduce using rule 72 (empty -> .)

    expr                           shift and go to state 89
    expr_list_comma                shift and go to state 139
    empty                          shift and go to state 90

state 122

    (32) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (33) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    expr                           shift and go to state 43
    stmt_list                      shift and go to state 140
    stmt                           shift and go to state 42
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 123

    (66) declaration -> LET IDENTIFIER EQUAL . expr SEMICOLON
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 141

state 124

    (68) declaration -> LET IDENTIFIER SEMICOLON .

    NOT             reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_PAREN      reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    NIL             reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    LET             reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    PRINTLN         reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    IF              reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 68 (declaration -> LET IDENTIFIER SEMICOLON .)


state 125

    (67) declaration -> LET MUT IDENTIFIER . EQUAL expr SEMICOLON
    (69) declaration -> LET MUT IDENTIFIER . SEMICOLON

    EQUAL           shift and go to state 142
    SEMICOLON       shift and go to state 143


state 126

    (34) print -> PRINT expr SEMICOLON .

    NOT             reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    NUMBER          reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    NIL             reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    STRING          reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    LET             reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    PRINT           reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    PRINTLN         reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    IF              reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    WHILE           reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    FOR             reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    RETURN          reduce using rule 34 (print -> PRINT expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 34 (print -> PRINT expr SEMICOLON .)


state 127

    (35) print -> PRINTLN expr SEMICOLON .

    NOT             reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    NUMBER          reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    NIL             reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    STRING          reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    LET             reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    PRINT           reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    PRINTLN         reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    IF              reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    WHILE           reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    FOR             reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    RETURN          reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 35 (print -> PRINTLN expr SEMICOLON .)


state 128

    (31) while -> WHILE expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    expr                           shift and go to state 43
    stmt_list                      shift and go to state 144
    stmt                           shift and go to state 42
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 129

    (29) for -> FOR IDENTIFIER IN . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 145

state 130

    (30) for -> FOR IDENTIFIER COMMA . IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 146


state 131

    (28) return -> RETURN expr SEMICOLON .

    NOT             reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    NIL             reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    LET             reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    PRINT           reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    PRINTLN         reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    IF              reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 28 (return -> RETURN expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 28 (return -> RETURN expr SEMICOLON .)


state 132

    (56) expr -> expr LEFT_BRACKET expr . RIGHT_BRACKET
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 147
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 133

    (55) expr -> expr DOT IDENTIFIER LEFT_PAREN . expr_list_comma RIGHT_PAREN
    (58) expr_list_comma -> . expr COMMA expr_list_comma
    (59) expr_list_comma -> . expr
    (60) expr_list_comma -> . empty
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (72) empty -> .

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    RIGHT_PAREN     reduce using rule 72 (empty -> .)

    expr                           shift and go to state 89
    expr_list_comma                shift and go to state 148
    empty                          shift and go to state 90

state 134

    (57) expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .

    SEMICOLON       reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PLUS            reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    MINUS           reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STAR            reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SLASH           reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS            reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER         reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    OR              reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    AND             reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    DOT             reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IF              reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL           reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FN              reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    $end            reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    COMMA           reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    ELSE            reduce using rule 57 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)


state 135

    (56) expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .
    (64) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .
    (65) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET . indexof_list
    (64) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (65) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

  ! reduce/reduce conflict for EQUAL resolved using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    PLUS            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    MINUS           reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    STAR            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SLASH           reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER         reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    OR              reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    AND             reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    DOT             reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    IF              reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL           reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 149

  ! LEFT_BRACKET    [ reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .) ]
  ! EQUAL           [ reduce using rule 64 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .) ]

    indexof_list                   shift and go to state 150

state 136

    (62) expr -> expr IF expr ELSE . expr
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 151

state 137

    (70) assign -> expr EQUAL expr SEMICOLON .

    NOT             reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    NIL             reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    STRING          reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    LET             reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    IF              reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    FOR             reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 70 (assign -> expr EQUAL expr SEMICOLON .)


state 138

    (71) assign -> expr indexof_list EQUAL expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 152
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 139

    (58) expr_list_comma -> expr COMMA expr_list_comma .

    RIGHT_BRACKET   reduce using rule 58 (expr_list_comma -> expr COMMA expr_list_comma .)
    RIGHT_PAREN     reduce using rule 58 (expr_list_comma -> expr COMMA expr_list_comma .)


state 140

    (32) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE
    (33) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 153


state 141

    (66) declaration -> LET IDENTIFIER EQUAL expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 154
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 142

    (67) declaration -> LET MUT IDENTIFIER EQUAL . expr SEMICOLON
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 155

state 143

    (69) declaration -> LET MUT IDENTIFIER SEMICOLON .

    NOT             reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_PAREN      reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    NIL             reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LET             reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    PRINTLN         reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    IF              reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 69 (declaration -> LET MUT IDENTIFIER SEMICOLON .)


state 144

    (31) while -> WHILE expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 156


state 145

    (29) for -> FOR IDENTIFIER IN expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 157
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 146

    (30) for -> FOR IDENTIFIER COMMA IDENTIFIER . IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IN              shift and go to state 158


state 147

    (56) expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .

    PLUS            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    MINUS           reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    STAR            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SLASH           reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER         reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    OR              reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    AND             reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    DOT             reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    IF              reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    FN              reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    $end            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL           reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    COMMA           reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACE      reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    ELSE            reduce using rule 56 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)


state 148

    (55) expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 159


state 149

    (64) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET
    (65) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET indexof_list
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 160

state 150

    (65) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list .

    EQUAL           reduce using rule 65 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list .)


state 151

    (62) expr -> expr IF expr ELSE expr .
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    SEMICOLON       reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    EQUAL           reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    FN              reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    $end            reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    RIGHT_PAREN     reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    COMMA           reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    RIGHT_BRACKET   reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    LEFT_BRACE      reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    ELSE            reduce using rule 62 (expr -> expr IF expr ELSE expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84

  ! PLUS            [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! MINUS           [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! STAR            [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! SLASH           [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! LESS            [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER         [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! BANG_EQUAL      [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! OR              [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! AND             [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! DOT             [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! LEFT_PAREN      [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]
  ! IF              [ reduce using rule 62 (expr -> expr IF expr ELSE expr .) ]


state 152

    (71) assign -> expr indexof_list EQUAL expr SEMICOLON .

    NOT             reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    NIL             reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    STRING          reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LET             reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    IF              reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    FOR             reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 71 (assign -> expr indexof_list EQUAL expr SEMICOLON .)


state 153

    (32) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .
    (33) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE . ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 32 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            shift and go to state 161


state 154

    (66) declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .

    NOT             reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    FOR             reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 66 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)


state 155

    (67) declaration -> LET MUT IDENTIFIER EQUAL expr . SEMICOLON
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 162
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 156

    (31) while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 31 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)


state 157

    (29) for -> FOR IDENTIFIER IN expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    expr                           shift and go to state 43
    stmt_list                      shift and go to state 163
    stmt                           shift and go to state 42
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 158

    (30) for -> FOR IDENTIFIER COMMA IDENTIFIER IN . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40

    expr                           shift and go to state 164

state 159

    (55) expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .

    SEMICOLON       reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PLUS            reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    MINUS           reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STAR            reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SLASH           reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS            reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER         reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    OR              reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    AND             reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    DOT             reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IF              reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL           reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FN              reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    $end            reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    COMMA           reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    ELSE            reduce using rule 55 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)


state 160

    (64) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET
    (65) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET indexof_list
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 165
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 161

    (33) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 166


state 162

    (67) declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .

    NOT             reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    FOR             reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 67 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)


state 163

    (29) for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 167


state 164

    (30) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (37) expr -> expr . PLUS expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . STAR expr
    (40) expr -> expr . SLASH expr
    (41) expr -> expr . LESS expr
    (42) expr -> expr . LESS_EQUAL expr
    (43) expr -> expr . GREATER expr
    (44) expr -> expr . GREATER_EQUAL expr
    (45) expr -> expr . EQUAL_EQUAL expr
    (46) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (54) expr -> expr . DOT IDENTIFIER
    (55) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (62) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 168
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    STAR            shift and go to state 71
    SLASH           shift and go to state 72
    LESS            shift and go to state 73
    LESS_EQUAL      shift and go to state 74
    GREATER         shift and go to state 75
    GREATER_EQUAL   shift and go to state 76
    EQUAL_EQUAL     shift and go to state 77
    BANG_EQUAL      shift and go to state 78
    OR              shift and go to state 79
    AND             shift and go to state 80
    DOT             shift and go to state 81
    LEFT_BRACKET    shift and go to state 99
    LEFT_PAREN      shift and go to state 82
    IF              shift and go to state 84


state 165

    (64) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .
    (65) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET . indexof_list
    (64) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (65) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

    EQUAL           reduce using rule 64 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 149

    indexof_list                   shift and go to state 150

state 166

    (33) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    expr                           shift and go to state 43
    stmt_list                      shift and go to state 169
    stmt                           shift and go to state 42
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 167

    (29) for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 29 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)


state 168

    (30) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (36) expr -> . NOT expr
    (37) expr -> . expr PLUS expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr STAR expr
    (40) expr -> . expr SLASH expr
    (41) expr -> . expr LESS expr
    (42) expr -> . expr LESS_EQUAL expr
    (43) expr -> . expr GREATER expr
    (44) expr -> . expr GREATER_EQUAL expr
    (45) expr -> . expr EQUAL_EQUAL expr
    (46) expr -> . expr BANG_EQUAL expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (50) expr -> . NUMBER
    (51) expr -> . NIL
    (52) expr -> . STRING
    (53) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (54) expr -> . expr DOT IDENTIFIER
    (55) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (56) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (57) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . IDENTIFIER
    (62) expr -> . expr IF expr ELSE expr
    (63) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (66) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (67) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (68) declaration -> . LET IDENTIFIER SEMICOLON
    (69) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (70) assign -> . expr EQUAL expr SEMICOLON
    (71) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (34) print -> . PRINT expr SEMICOLON
    (35) print -> . PRINTLN expr SEMICOLON
    (32) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (31) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (30) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (28) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 51
    LEFT_PAREN      shift and go to state 39
    NUMBER          shift and go to state 52
    NIL             shift and go to state 53
    STRING          shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 38
    LEFT_BRACE      shift and go to state 40
    LET             shift and go to state 57
    PRINT           shift and go to state 58
    PRINTLN         shift and go to state 59
    IF              shift and go to state 56
    WHILE           shift and go to state 60
    FOR             shift and go to state 61
    RETURN          shift and go to state 62

    expr                           shift and go to state 43
    stmt_list                      shift and go to state 170
    stmt                           shift and go to state 42
    declaration                    shift and go to state 44
    assign                         shift and go to state 45
    print                          shift and go to state 46
    condition                      shift and go to state 47
    while                          shift and go to state 48
    for                            shift and go to state 49
    return                         shift and go to state 50

state 169

    (33) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 171


state 170

    (30) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 172


state 171

    (33) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 33 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)


state 172

    (30) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 30 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for STAR in state 151 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 151 resolved as shift
WARNING: shift/reduce conflict for LESS in state 151 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 151 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for OR in state 151 resolved as shift
WARNING: shift/reduce conflict for AND in state 151 resolved as shift
WARNING: shift/reduce conflict for DOT in state 151 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 151 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 151 resolved as shift
WARNING: shift/reduce conflict for IF in state 151 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (use_list -> use)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 135 resolved using rule (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET)
WARNING: rejected rule (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET) in state 135
