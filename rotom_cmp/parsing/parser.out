Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BANG
    CLASS
    DOT
    EOF
    FALSE
    FOR
    OR
    RETURN
    SUPER
    THIS
    TRUE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> fn_def_list
Rule 2     fn_def_list -> fn_def fn_def_list
Rule 3     fn_def_list -> fn_def
Rule 4     fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
Rule 5     fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr
Rule 6     param_list -> IDENTIFIER COMMA param_list
Rule 7     param_list -> IDENTIFIER
Rule 8     param_list -> empty
Rule 9     stmt_list -> stmt stmt_list
Rule 10    stmt_list -> stmt
Rule 11    stmt -> expr
Rule 12    stmt -> declaration
Rule 13    stmt -> assign
Rule 14    stmt -> print
Rule 15    stmt -> condition
Rule 16    stmt -> while
Rule 17    while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 18    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 19    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
Rule 20    print -> PRINT expr SEMICOLON
Rule 21    print -> PRINTLN expr SEMICOLON
Rule 22    expr -> expr PLUS expr
Rule 23    expr -> expr MINUS expr
Rule 24    expr -> expr STAR expr
Rule 25    expr -> expr SLASH expr
Rule 26    expr -> expr LESS expr
Rule 27    expr -> expr LESS_EQUAL expr
Rule 28    expr -> expr GREATER expr
Rule 29    expr -> expr GREATER_EQUAL expr
Rule 30    expr -> expr EQUAL_EQUAL expr
Rule 31    expr -> expr BANG_EQUAL expr
Rule 32    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 33    expr -> NUMBER
Rule 34    expr -> NIL
Rule 35    expr -> STRING
Rule 36    expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET
Rule 37    expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
Rule 38    expr_list_comma -> expr COMMA expr_list_comma
Rule 39    expr_list_comma -> expr
Rule 40    expr_list_comma -> empty
Rule 41    expr -> IDENTIFIER
Rule 42    expr -> expr IF expr ELSE expr
Rule 43    expr -> LEFT_BRACE stmt_list RIGHT_BRACE
Rule 44    declaration -> LET IDENTIFIER EQUAL expr SEMICOLON
Rule 45    declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON
Rule 46    assign -> IDENTIFIER EQUAL expr SEMICOLON
Rule 47    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARROW                : 5
BANG                 : 
BANG_EQUAL           : 31
CLASS                : 
COMMA                : 6 38
DOT                  : 
ELSE                 : 19 42
EOF                  : 
EQUAL                : 44 45 46
EQUAL_EQUAL          : 30
FALSE                : 
FN                   : 4 5
FOR                  : 
GREATER              : 28
GREATER_EQUAL        : 29
IDENTIFIER           : 4 5 6 7 37 41 44 45 46
IF                   : 18 19 42
LEFT_BRACE           : 4 17 18 19 19 43
LEFT_BRACKET         : 36
LEFT_PAREN           : 4 5 32 37
LESS                 : 26
LESS_EQUAL           : 27
LET                  : 44 45
MINUS                : 23
MUT                  : 45
NIL                  : 34
NUMBER               : 33
OR                   : 
PLUS                 : 22
PRINT                : 20
PRINTLN              : 21
RETURN               : 
RIGHT_BRACE          : 4 17 18 19 19 43
RIGHT_BRACKET        : 36
RIGHT_PAREN          : 4 5 32 37
SEMICOLON            : 20 21 44 45 46
SLASH                : 25
STAR                 : 24
STRING               : 35
SUPER                : 
THIS                 : 
TRUE                 : 
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

assign               : 13
condition            : 15
declaration          : 12
empty                : 8 40
expr                 : 5 11 17 18 19 20 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 38 39 42 42 42 44 45 46
expr_list_comma      : 36 37 38
fn_def               : 2 3
fn_def_list          : 1 2
param_list           : 4 5 6
print                : 14
prog                 : 0
stmt                 : 9 10
stmt_list            : 4 9 17 18 19 19 43
while                : 16

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . fn_def_list
    (2) fn_def_list -> . fn_def fn_def_list
    (3) fn_def_list -> . fn_def
    (4) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (5) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    FN              shift and go to state 4

    prog                           shift and go to state 1
    fn_def_list                    shift and go to state 2
    fn_def                         shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> fn_def_list .

    $end            reduce using rule 1 (prog -> fn_def_list .)


state 3

    (2) fn_def_list -> fn_def . fn_def_list
    (3) fn_def_list -> fn_def .
    (2) fn_def_list -> . fn_def fn_def_list
    (3) fn_def_list -> . fn_def
    (4) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (5) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    $end            reduce using rule 3 (fn_def_list -> fn_def .)
    FN              shift and go to state 4

    fn_def                         shift and go to state 3
    fn_def_list                    shift and go to state 5

state 4

    (4) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (5) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    IDENTIFIER      shift and go to state 6


state 5

    (2) fn_def_list -> fn_def fn_def_list .

    $end            reduce using rule 2 (fn_def_list -> fn_def fn_def_list .)


state 6

    (4) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (5) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    LEFT_PAREN      shift and go to state 7


state 7

    (4) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (5) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN ARROW expr
    (6) param_list -> . IDENTIFIER COMMA param_list
    (7) param_list -> . IDENTIFIER
    (8) param_list -> . empty
    (47) empty -> .

    IDENTIFIER      shift and go to state 8
    RIGHT_PAREN     reduce using rule 47 (empty -> .)

    param_list                     shift and go to state 9
    empty                          shift and go to state 10

state 8

    (6) param_list -> IDENTIFIER . COMMA param_list
    (7) param_list -> IDENTIFIER .

    COMMA           shift and go to state 11
    RIGHT_PAREN     reduce using rule 7 (param_list -> IDENTIFIER .)


state 9

    (4) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (5) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN ARROW expr

    RIGHT_PAREN     shift and go to state 12


state 10

    (8) param_list -> empty .

    RIGHT_PAREN     reduce using rule 8 (param_list -> empty .)


state 11

    (6) param_list -> IDENTIFIER COMMA . param_list
    (6) param_list -> . IDENTIFIER COMMA param_list
    (7) param_list -> . IDENTIFIER
    (8) param_list -> . empty
    (47) empty -> .

    IDENTIFIER      shift and go to state 8
    RIGHT_PAREN     reduce using rule 47 (empty -> .)

    param_list                     shift and go to state 13
    empty                          shift and go to state 10

state 12

    (4) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . LEFT_BRACE stmt_list RIGHT_BRACE
    (5) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . ARROW expr

    LEFT_BRACE      shift and go to state 14
    ARROW           shift and go to state 15


state 13

    (6) param_list -> IDENTIFIER COMMA param_list .

    RIGHT_PAREN     reduce using rule 6 (param_list -> IDENTIFIER COMMA param_list .)


state 14

    (4) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE . stmt_list RIGHT_BRACE
    (9) stmt_list -> . stmt stmt_list
    (10) stmt_list -> . stmt
    (11) stmt -> . expr
    (12) stmt -> . declaration
    (13) stmt -> . assign
    (14) stmt -> . print
    (15) stmt -> . condition
    (16) stmt -> . while
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (44) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (45) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (46) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (20) print -> . PRINT expr SEMICOLON
    (21) print -> . PRINTLN expr SEMICOLON
    (18) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (17) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 16
    LEFT_BRACE      shift and go to state 18
    LET             shift and go to state 32
    PRINT           shift and go to state 33
    PRINTLN         shift and go to state 34
    IF              shift and go to state 31
    WHILE           shift and go to state 35

    stmt_list                      shift and go to state 19
    stmt                           shift and go to state 20
    expr                           shift and go to state 21
    declaration                    shift and go to state 22
    assign                         shift and go to state 23
    print                          shift and go to state 24
    condition                      shift and go to state 25
    while                          shift and go to state 26

state 15

    (5) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 37

state 16

    (37) expr -> IDENTIFIER . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> IDENTIFIER .
    (46) assign -> IDENTIFIER . EQUAL expr SEMICOLON

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    LEFT_PAREN      shift and go to state 38
    PLUS            reduce using rule 41 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 41 (expr -> IDENTIFIER .)
    STAR            reduce using rule 41 (expr -> IDENTIFIER .)
    SLASH           reduce using rule 41 (expr -> IDENTIFIER .)
    LESS            reduce using rule 41 (expr -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 41 (expr -> IDENTIFIER .)
    GREATER         reduce using rule 41 (expr -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 41 (expr -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 41 (expr -> IDENTIFIER .)
    BANG_EQUAL      reduce using rule 41 (expr -> IDENTIFIER .)
    IF              reduce using rule 41 (expr -> IDENTIFIER .)
    NUMBER          reduce using rule 41 (expr -> IDENTIFIER .)
    NIL             reduce using rule 41 (expr -> IDENTIFIER .)
    STRING          reduce using rule 41 (expr -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 41 (expr -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 41 (expr -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 41 (expr -> IDENTIFIER .)
    LET             reduce using rule 41 (expr -> IDENTIFIER .)
    PRINT           reduce using rule 41 (expr -> IDENTIFIER .)
    PRINTLN         reduce using rule 41 (expr -> IDENTIFIER .)
    WHILE           reduce using rule 41 (expr -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 41 (expr -> IDENTIFIER .)
    EQUAL           shift and go to state 39

  ! LEFT_PAREN      [ reduce using rule 41 (expr -> IDENTIFIER .) ]


state 17

    (32) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 40

state 18

    (43) expr -> LEFT_BRACE . stmt_list RIGHT_BRACE
    (9) stmt_list -> . stmt stmt_list
    (10) stmt_list -> . stmt
    (11) stmt -> . expr
    (12) stmt -> . declaration
    (13) stmt -> . assign
    (14) stmt -> . print
    (15) stmt -> . condition
    (16) stmt -> . while
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (44) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (45) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (46) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (20) print -> . PRINT expr SEMICOLON
    (21) print -> . PRINTLN expr SEMICOLON
    (18) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (17) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 16
    LEFT_BRACE      shift and go to state 18
    LET             shift and go to state 32
    PRINT           shift and go to state 33
    PRINTLN         shift and go to state 34
    IF              shift and go to state 31
    WHILE           shift and go to state 35

    stmt_list                      shift and go to state 41
    stmt                           shift and go to state 20
    expr                           shift and go to state 21
    declaration                    shift and go to state 22
    assign                         shift and go to state 23
    print                          shift and go to state 24
    condition                      shift and go to state 25
    while                          shift and go to state 26

state 19

    (4) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 42


state 20

    (9) stmt_list -> stmt . stmt_list
    (10) stmt_list -> stmt .
    (9) stmt_list -> . stmt stmt_list
    (10) stmt_list -> . stmt
    (11) stmt -> . expr
    (12) stmt -> . declaration
    (13) stmt -> . assign
    (14) stmt -> . print
    (15) stmt -> . condition
    (16) stmt -> . while
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (44) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (45) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (46) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (20) print -> . PRINT expr SEMICOLON
    (21) print -> . PRINTLN expr SEMICOLON
    (18) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (17) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE

    RIGHT_BRACE     reduce using rule 10 (stmt_list -> stmt .)
    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 16
    LEFT_BRACE      shift and go to state 18
    LET             shift and go to state 32
    PRINT           shift and go to state 33
    PRINTLN         shift and go to state 34
    IF              shift and go to state 31
    WHILE           shift and go to state 35

    stmt                           shift and go to state 20
    stmt_list                      shift and go to state 43
    expr                           shift and go to state 21
    declaration                    shift and go to state 22
    assign                         shift and go to state 23
    print                          shift and go to state 24
    condition                      shift and go to state 25
    while                          shift and go to state 26

state 21

    (11) stmt -> expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 11 (stmt -> expr .)
    NUMBER          reduce using rule 11 (stmt -> expr .)
    NIL             reduce using rule 11 (stmt -> expr .)
    STRING          reduce using rule 11 (stmt -> expr .)
    LEFT_BRACKET    reduce using rule 11 (stmt -> expr .)
    IDENTIFIER      reduce using rule 11 (stmt -> expr .)
    LEFT_BRACE      reduce using rule 11 (stmt -> expr .)
    LET             reduce using rule 11 (stmt -> expr .)
    PRINT           reduce using rule 11 (stmt -> expr .)
    PRINTLN         reduce using rule 11 (stmt -> expr .)
    WHILE           reduce using rule 11 (stmt -> expr .)
    RIGHT_BRACE     reduce using rule 11 (stmt -> expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! IF              [ reduce using rule 11 (stmt -> expr .) ]


state 22

    (12) stmt -> declaration .

    LEFT_PAREN      reduce using rule 12 (stmt -> declaration .)
    NUMBER          reduce using rule 12 (stmt -> declaration .)
    NIL             reduce using rule 12 (stmt -> declaration .)
    STRING          reduce using rule 12 (stmt -> declaration .)
    LEFT_BRACKET    reduce using rule 12 (stmt -> declaration .)
    IDENTIFIER      reduce using rule 12 (stmt -> declaration .)
    LEFT_BRACE      reduce using rule 12 (stmt -> declaration .)
    LET             reduce using rule 12 (stmt -> declaration .)
    PRINT           reduce using rule 12 (stmt -> declaration .)
    PRINTLN         reduce using rule 12 (stmt -> declaration .)
    IF              reduce using rule 12 (stmt -> declaration .)
    WHILE           reduce using rule 12 (stmt -> declaration .)
    RIGHT_BRACE     reduce using rule 12 (stmt -> declaration .)


state 23

    (13) stmt -> assign .

    LEFT_PAREN      reduce using rule 13 (stmt -> assign .)
    NUMBER          reduce using rule 13 (stmt -> assign .)
    NIL             reduce using rule 13 (stmt -> assign .)
    STRING          reduce using rule 13 (stmt -> assign .)
    LEFT_BRACKET    reduce using rule 13 (stmt -> assign .)
    IDENTIFIER      reduce using rule 13 (stmt -> assign .)
    LEFT_BRACE      reduce using rule 13 (stmt -> assign .)
    LET             reduce using rule 13 (stmt -> assign .)
    PRINT           reduce using rule 13 (stmt -> assign .)
    PRINTLN         reduce using rule 13 (stmt -> assign .)
    IF              reduce using rule 13 (stmt -> assign .)
    WHILE           reduce using rule 13 (stmt -> assign .)
    RIGHT_BRACE     reduce using rule 13 (stmt -> assign .)


state 24

    (14) stmt -> print .

    LEFT_PAREN      reduce using rule 14 (stmt -> print .)
    NUMBER          reduce using rule 14 (stmt -> print .)
    NIL             reduce using rule 14 (stmt -> print .)
    STRING          reduce using rule 14 (stmt -> print .)
    LEFT_BRACKET    reduce using rule 14 (stmt -> print .)
    IDENTIFIER      reduce using rule 14 (stmt -> print .)
    LEFT_BRACE      reduce using rule 14 (stmt -> print .)
    LET             reduce using rule 14 (stmt -> print .)
    PRINT           reduce using rule 14 (stmt -> print .)
    PRINTLN         reduce using rule 14 (stmt -> print .)
    IF              reduce using rule 14 (stmt -> print .)
    WHILE           reduce using rule 14 (stmt -> print .)
    RIGHT_BRACE     reduce using rule 14 (stmt -> print .)


state 25

    (15) stmt -> condition .

    LEFT_PAREN      reduce using rule 15 (stmt -> condition .)
    NUMBER          reduce using rule 15 (stmt -> condition .)
    NIL             reduce using rule 15 (stmt -> condition .)
    STRING          reduce using rule 15 (stmt -> condition .)
    LEFT_BRACKET    reduce using rule 15 (stmt -> condition .)
    IDENTIFIER      reduce using rule 15 (stmt -> condition .)
    LEFT_BRACE      reduce using rule 15 (stmt -> condition .)
    LET             reduce using rule 15 (stmt -> condition .)
    PRINT           reduce using rule 15 (stmt -> condition .)
    PRINTLN         reduce using rule 15 (stmt -> condition .)
    IF              reduce using rule 15 (stmt -> condition .)
    WHILE           reduce using rule 15 (stmt -> condition .)
    RIGHT_BRACE     reduce using rule 15 (stmt -> condition .)


state 26

    (16) stmt -> while .

    LEFT_PAREN      reduce using rule 16 (stmt -> while .)
    NUMBER          reduce using rule 16 (stmt -> while .)
    NIL             reduce using rule 16 (stmt -> while .)
    STRING          reduce using rule 16 (stmt -> while .)
    LEFT_BRACKET    reduce using rule 16 (stmt -> while .)
    IDENTIFIER      reduce using rule 16 (stmt -> while .)
    LEFT_BRACE      reduce using rule 16 (stmt -> while .)
    LET             reduce using rule 16 (stmt -> while .)
    PRINT           reduce using rule 16 (stmt -> while .)
    PRINTLN         reduce using rule 16 (stmt -> while .)
    IF              reduce using rule 16 (stmt -> while .)
    WHILE           reduce using rule 16 (stmt -> while .)
    RIGHT_BRACE     reduce using rule 16 (stmt -> while .)


state 27

    (33) expr -> NUMBER .

    PLUS            reduce using rule 33 (expr -> NUMBER .)
    MINUS           reduce using rule 33 (expr -> NUMBER .)
    STAR            reduce using rule 33 (expr -> NUMBER .)
    SLASH           reduce using rule 33 (expr -> NUMBER .)
    LESS            reduce using rule 33 (expr -> NUMBER .)
    LESS_EQUAL      reduce using rule 33 (expr -> NUMBER .)
    GREATER         reduce using rule 33 (expr -> NUMBER .)
    GREATER_EQUAL   reduce using rule 33 (expr -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 33 (expr -> NUMBER .)
    BANG_EQUAL      reduce using rule 33 (expr -> NUMBER .)
    IF              reduce using rule 33 (expr -> NUMBER .)
    LEFT_PAREN      reduce using rule 33 (expr -> NUMBER .)
    NUMBER          reduce using rule 33 (expr -> NUMBER .)
    NIL             reduce using rule 33 (expr -> NUMBER .)
    STRING          reduce using rule 33 (expr -> NUMBER .)
    LEFT_BRACKET    reduce using rule 33 (expr -> NUMBER .)
    IDENTIFIER      reduce using rule 33 (expr -> NUMBER .)
    LEFT_BRACE      reduce using rule 33 (expr -> NUMBER .)
    LET             reduce using rule 33 (expr -> NUMBER .)
    PRINT           reduce using rule 33 (expr -> NUMBER .)
    PRINTLN         reduce using rule 33 (expr -> NUMBER .)
    WHILE           reduce using rule 33 (expr -> NUMBER .)
    RIGHT_BRACE     reduce using rule 33 (expr -> NUMBER .)
    FN              reduce using rule 33 (expr -> NUMBER .)
    $end            reduce using rule 33 (expr -> NUMBER .)
    RIGHT_PAREN     reduce using rule 33 (expr -> NUMBER .)
    COMMA           reduce using rule 33 (expr -> NUMBER .)
    RIGHT_BRACKET   reduce using rule 33 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 33 (expr -> NUMBER .)
    ELSE            reduce using rule 33 (expr -> NUMBER .)


state 28

    (34) expr -> NIL .

    PLUS            reduce using rule 34 (expr -> NIL .)
    MINUS           reduce using rule 34 (expr -> NIL .)
    STAR            reduce using rule 34 (expr -> NIL .)
    SLASH           reduce using rule 34 (expr -> NIL .)
    LESS            reduce using rule 34 (expr -> NIL .)
    LESS_EQUAL      reduce using rule 34 (expr -> NIL .)
    GREATER         reduce using rule 34 (expr -> NIL .)
    GREATER_EQUAL   reduce using rule 34 (expr -> NIL .)
    EQUAL_EQUAL     reduce using rule 34 (expr -> NIL .)
    BANG_EQUAL      reduce using rule 34 (expr -> NIL .)
    IF              reduce using rule 34 (expr -> NIL .)
    LEFT_PAREN      reduce using rule 34 (expr -> NIL .)
    NUMBER          reduce using rule 34 (expr -> NIL .)
    NIL             reduce using rule 34 (expr -> NIL .)
    STRING          reduce using rule 34 (expr -> NIL .)
    LEFT_BRACKET    reduce using rule 34 (expr -> NIL .)
    IDENTIFIER      reduce using rule 34 (expr -> NIL .)
    LEFT_BRACE      reduce using rule 34 (expr -> NIL .)
    LET             reduce using rule 34 (expr -> NIL .)
    PRINT           reduce using rule 34 (expr -> NIL .)
    PRINTLN         reduce using rule 34 (expr -> NIL .)
    WHILE           reduce using rule 34 (expr -> NIL .)
    RIGHT_BRACE     reduce using rule 34 (expr -> NIL .)
    FN              reduce using rule 34 (expr -> NIL .)
    $end            reduce using rule 34 (expr -> NIL .)
    RIGHT_PAREN     reduce using rule 34 (expr -> NIL .)
    COMMA           reduce using rule 34 (expr -> NIL .)
    RIGHT_BRACKET   reduce using rule 34 (expr -> NIL .)
    SEMICOLON       reduce using rule 34 (expr -> NIL .)
    ELSE            reduce using rule 34 (expr -> NIL .)


state 29

    (35) expr -> STRING .

    PLUS            reduce using rule 35 (expr -> STRING .)
    MINUS           reduce using rule 35 (expr -> STRING .)
    STAR            reduce using rule 35 (expr -> STRING .)
    SLASH           reduce using rule 35 (expr -> STRING .)
    LESS            reduce using rule 35 (expr -> STRING .)
    LESS_EQUAL      reduce using rule 35 (expr -> STRING .)
    GREATER         reduce using rule 35 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 35 (expr -> STRING .)
    EQUAL_EQUAL     reduce using rule 35 (expr -> STRING .)
    BANG_EQUAL      reduce using rule 35 (expr -> STRING .)
    IF              reduce using rule 35 (expr -> STRING .)
    LEFT_PAREN      reduce using rule 35 (expr -> STRING .)
    NUMBER          reduce using rule 35 (expr -> STRING .)
    NIL             reduce using rule 35 (expr -> STRING .)
    STRING          reduce using rule 35 (expr -> STRING .)
    LEFT_BRACKET    reduce using rule 35 (expr -> STRING .)
    IDENTIFIER      reduce using rule 35 (expr -> STRING .)
    LEFT_BRACE      reduce using rule 35 (expr -> STRING .)
    LET             reduce using rule 35 (expr -> STRING .)
    PRINT           reduce using rule 35 (expr -> STRING .)
    PRINTLN         reduce using rule 35 (expr -> STRING .)
    WHILE           reduce using rule 35 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 35 (expr -> STRING .)
    FN              reduce using rule 35 (expr -> STRING .)
    $end            reduce using rule 35 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 35 (expr -> STRING .)
    COMMA           reduce using rule 35 (expr -> STRING .)
    RIGHT_BRACKET   reduce using rule 35 (expr -> STRING .)
    SEMICOLON       reduce using rule 35 (expr -> STRING .)
    ELSE            reduce using rule 35 (expr -> STRING .)


state 30

    (36) expr -> LEFT_BRACKET . expr_list_comma RIGHT_BRACKET
    (38) expr_list_comma -> . expr COMMA expr_list_comma
    (39) expr_list_comma -> . expr
    (40) expr_list_comma -> . empty
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (47) empty -> .

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18
    RIGHT_BRACKET   reduce using rule 47 (empty -> .)

    expr_list_comma                shift and go to state 55
    expr                           shift and go to state 56
    empty                          shift and go to state 57

state 31

    (18) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 58

state 32

    (44) declaration -> LET . IDENTIFIER EQUAL expr SEMICOLON
    (45) declaration -> LET . MUT IDENTIFIER EQUAL expr SEMICOLON

    IDENTIFIER      shift and go to state 59
    MUT             shift and go to state 60


state 33

    (20) print -> PRINT . expr SEMICOLON
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 61

state 34

    (21) print -> PRINTLN . expr SEMICOLON
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 62

state 35

    (17) while -> WHILE . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 63

state 36

    (37) expr -> IDENTIFIER . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    LEFT_PAREN      shift and go to state 38
    PLUS            reduce using rule 41 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 41 (expr -> IDENTIFIER .)
    STAR            reduce using rule 41 (expr -> IDENTIFIER .)
    SLASH           reduce using rule 41 (expr -> IDENTIFIER .)
    LESS            reduce using rule 41 (expr -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 41 (expr -> IDENTIFIER .)
    GREATER         reduce using rule 41 (expr -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 41 (expr -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 41 (expr -> IDENTIFIER .)
    BANG_EQUAL      reduce using rule 41 (expr -> IDENTIFIER .)
    IF              reduce using rule 41 (expr -> IDENTIFIER .)
    FN              reduce using rule 41 (expr -> IDENTIFIER .)
    $end            reduce using rule 41 (expr -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 41 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 41 (expr -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 41 (expr -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 41 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 41 (expr -> IDENTIFIER .)
    NUMBER          reduce using rule 41 (expr -> IDENTIFIER .)
    NIL             reduce using rule 41 (expr -> IDENTIFIER .)
    STRING          reduce using rule 41 (expr -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 41 (expr -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 41 (expr -> IDENTIFIER .)
    LET             reduce using rule 41 (expr -> IDENTIFIER .)
    PRINT           reduce using rule 41 (expr -> IDENTIFIER .)
    PRINTLN         reduce using rule 41 (expr -> IDENTIFIER .)
    WHILE           reduce using rule 41 (expr -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 41 (expr -> IDENTIFIER .)
    ELSE            reduce using rule 41 (expr -> IDENTIFIER .)

  ! LEFT_PAREN      [ reduce using rule 41 (expr -> IDENTIFIER .) ]


state 37

    (5) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    FN              reduce using rule 5 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    $end            reduce using rule 5 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 38

    (37) expr -> IDENTIFIER LEFT_PAREN . expr_list_comma RIGHT_PAREN
    (38) expr_list_comma -> . expr COMMA expr_list_comma
    (39) expr_list_comma -> . expr
    (40) expr_list_comma -> . empty
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (47) empty -> .

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18
    RIGHT_PAREN     reduce using rule 47 (empty -> .)

    expr_list_comma                shift and go to state 64
    expr                           shift and go to state 56
    empty                          shift and go to state 57

state 39

    (46) assign -> IDENTIFIER EQUAL . expr SEMICOLON
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 65

state 40

    (32) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    RIGHT_PAREN     shift and go to state 66
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 41

    (43) expr -> LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 67


state 42

    (4) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .

    FN              reduce using rule 4 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 4 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)


state 43

    (9) stmt_list -> stmt stmt_list .

    RIGHT_BRACE     reduce using rule 9 (stmt_list -> stmt stmt_list .)


state 44

    (22) expr -> expr PLUS . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 68

state 45

    (23) expr -> expr MINUS . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 69

state 46

    (24) expr -> expr STAR . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 70

state 47

    (25) expr -> expr SLASH . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 71

state 48

    (26) expr -> expr LESS . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 72

state 49

    (27) expr -> expr LESS_EQUAL . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 73

state 50

    (28) expr -> expr GREATER . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 74

state 51

    (29) expr -> expr GREATER_EQUAL . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 75

state 52

    (30) expr -> expr EQUAL_EQUAL . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 76

state 53

    (31) expr -> expr BANG_EQUAL . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 77

state 54

    (42) expr -> expr IF . expr ELSE expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 78

state 55

    (36) expr -> LEFT_BRACKET expr_list_comma . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 79


state 56

    (38) expr_list_comma -> expr . COMMA expr_list_comma
    (39) expr_list_comma -> expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    COMMA           shift and go to state 80
    RIGHT_BRACKET   reduce using rule 39 (expr_list_comma -> expr .)
    RIGHT_PAREN     reduce using rule 39 (expr_list_comma -> expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 57

    (40) expr_list_comma -> empty .

    RIGHT_BRACKET   reduce using rule 40 (expr_list_comma -> empty .)
    RIGHT_PAREN     reduce using rule 40 (expr_list_comma -> empty .)


state 58

    (18) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 81
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 59

    (44) declaration -> LET IDENTIFIER . EQUAL expr SEMICOLON

    EQUAL           shift and go to state 82


state 60

    (45) declaration -> LET MUT . IDENTIFIER EQUAL expr SEMICOLON

    IDENTIFIER      shift and go to state 83


state 61

    (20) print -> PRINT expr . SEMICOLON
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 84
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 62

    (21) print -> PRINTLN expr . SEMICOLON
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 85
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 63

    (17) while -> WHILE expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 86
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 64

    (37) expr -> IDENTIFIER LEFT_PAREN expr_list_comma . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 87


state 65

    (46) assign -> IDENTIFIER EQUAL expr . SEMICOLON
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 88
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 66

    (32) expr -> LEFT_PAREN expr RIGHT_PAREN .

    PLUS            reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    STAR            reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SLASH           reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS            reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER         reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    NUMBER          reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    NIL             reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    STRING          reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LET             reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINT           reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINTLN         reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    WHILE           reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    FN              reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    ELSE            reduce using rule 32 (expr -> LEFT_PAREN expr RIGHT_PAREN .)


state 67

    (43) expr -> LEFT_BRACE stmt_list RIGHT_BRACE .

    PLUS            reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    MINUS           reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    STAR            reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    SLASH           reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS            reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS_EQUAL      reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER         reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER_EQUAL   reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    EQUAL_EQUAL     reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    BANG_EQUAL      reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    FN              reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    COMMA           reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    SEMICOLON       reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            reduce using rule 43 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)


state 68

    (22) expr -> expr PLUS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 22 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 22 (expr -> expr PLUS expr .)
    NIL             reduce using rule 22 (expr -> expr PLUS expr .)
    STRING          reduce using rule 22 (expr -> expr PLUS expr .)
    LEFT_BRACKET    reduce using rule 22 (expr -> expr PLUS expr .)
    IDENTIFIER      reduce using rule 22 (expr -> expr PLUS expr .)
    LEFT_BRACE      reduce using rule 22 (expr -> expr PLUS expr .)
    LET             reduce using rule 22 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 22 (expr -> expr PLUS expr .)
    PRINTLN         reduce using rule 22 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 22 (expr -> expr PLUS expr .)
    RIGHT_BRACE     reduce using rule 22 (expr -> expr PLUS expr .)
    FN              reduce using rule 22 (expr -> expr PLUS expr .)
    $end            reduce using rule 22 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 22 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 22 (expr -> expr PLUS expr .)
    RIGHT_BRACKET   reduce using rule 22 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 22 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! STAR            [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! SLASH           [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! LESS            [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! GREATER         [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! BANG_EQUAL      [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! IF              [ reduce using rule 22 (expr -> expr PLUS expr .) ]


state 69

    (23) expr -> expr MINUS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 23 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 23 (expr -> expr MINUS expr .)
    NIL             reduce using rule 23 (expr -> expr MINUS expr .)
    STRING          reduce using rule 23 (expr -> expr MINUS expr .)
    LEFT_BRACKET    reduce using rule 23 (expr -> expr MINUS expr .)
    IDENTIFIER      reduce using rule 23 (expr -> expr MINUS expr .)
    LEFT_BRACE      reduce using rule 23 (expr -> expr MINUS expr .)
    LET             reduce using rule 23 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 23 (expr -> expr MINUS expr .)
    PRINTLN         reduce using rule 23 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 23 (expr -> expr MINUS expr .)
    RIGHT_BRACE     reduce using rule 23 (expr -> expr MINUS expr .)
    FN              reduce using rule 23 (expr -> expr MINUS expr .)
    $end            reduce using rule 23 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 23 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 23 (expr -> expr MINUS expr .)
    RIGHT_BRACKET   reduce using rule 23 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 23 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! STAR            [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! SLASH           [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! LESS            [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! GREATER         [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! BANG_EQUAL      [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! IF              [ reduce using rule 23 (expr -> expr MINUS expr .) ]


state 70

    (24) expr -> expr STAR expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 24 (expr -> expr STAR expr .)
    NUMBER          reduce using rule 24 (expr -> expr STAR expr .)
    NIL             reduce using rule 24 (expr -> expr STAR expr .)
    STRING          reduce using rule 24 (expr -> expr STAR expr .)
    LEFT_BRACKET    reduce using rule 24 (expr -> expr STAR expr .)
    IDENTIFIER      reduce using rule 24 (expr -> expr STAR expr .)
    LEFT_BRACE      reduce using rule 24 (expr -> expr STAR expr .)
    LET             reduce using rule 24 (expr -> expr STAR expr .)
    PRINT           reduce using rule 24 (expr -> expr STAR expr .)
    PRINTLN         reduce using rule 24 (expr -> expr STAR expr .)
    WHILE           reduce using rule 24 (expr -> expr STAR expr .)
    RIGHT_BRACE     reduce using rule 24 (expr -> expr STAR expr .)
    FN              reduce using rule 24 (expr -> expr STAR expr .)
    $end            reduce using rule 24 (expr -> expr STAR expr .)
    RIGHT_PAREN     reduce using rule 24 (expr -> expr STAR expr .)
    COMMA           reduce using rule 24 (expr -> expr STAR expr .)
    RIGHT_BRACKET   reduce using rule 24 (expr -> expr STAR expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr STAR expr .)
    ELSE            reduce using rule 24 (expr -> expr STAR expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! STAR            [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! SLASH           [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! LESS            [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! GREATER         [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! BANG_EQUAL      [ reduce using rule 24 (expr -> expr STAR expr .) ]
  ! IF              [ reduce using rule 24 (expr -> expr STAR expr .) ]


state 71

    (25) expr -> expr SLASH expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 25 (expr -> expr SLASH expr .)
    NUMBER          reduce using rule 25 (expr -> expr SLASH expr .)
    NIL             reduce using rule 25 (expr -> expr SLASH expr .)
    STRING          reduce using rule 25 (expr -> expr SLASH expr .)
    LEFT_BRACKET    reduce using rule 25 (expr -> expr SLASH expr .)
    IDENTIFIER      reduce using rule 25 (expr -> expr SLASH expr .)
    LEFT_BRACE      reduce using rule 25 (expr -> expr SLASH expr .)
    LET             reduce using rule 25 (expr -> expr SLASH expr .)
    PRINT           reduce using rule 25 (expr -> expr SLASH expr .)
    PRINTLN         reduce using rule 25 (expr -> expr SLASH expr .)
    WHILE           reduce using rule 25 (expr -> expr SLASH expr .)
    RIGHT_BRACE     reduce using rule 25 (expr -> expr SLASH expr .)
    FN              reduce using rule 25 (expr -> expr SLASH expr .)
    $end            reduce using rule 25 (expr -> expr SLASH expr .)
    RIGHT_PAREN     reduce using rule 25 (expr -> expr SLASH expr .)
    COMMA           reduce using rule 25 (expr -> expr SLASH expr .)
    RIGHT_BRACKET   reduce using rule 25 (expr -> expr SLASH expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr SLASH expr .)
    ELSE            reduce using rule 25 (expr -> expr SLASH expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! STAR            [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! SLASH           [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! LESS            [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! LESS_EQUAL      [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! GREATER         [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! BANG_EQUAL      [ reduce using rule 25 (expr -> expr SLASH expr .) ]
  ! IF              [ reduce using rule 25 (expr -> expr SLASH expr .) ]


state 72

    (26) expr -> expr LESS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 26 (expr -> expr LESS expr .)
    NUMBER          reduce using rule 26 (expr -> expr LESS expr .)
    NIL             reduce using rule 26 (expr -> expr LESS expr .)
    STRING          reduce using rule 26 (expr -> expr LESS expr .)
    LEFT_BRACKET    reduce using rule 26 (expr -> expr LESS expr .)
    IDENTIFIER      reduce using rule 26 (expr -> expr LESS expr .)
    LEFT_BRACE      reduce using rule 26 (expr -> expr LESS expr .)
    LET             reduce using rule 26 (expr -> expr LESS expr .)
    PRINT           reduce using rule 26 (expr -> expr LESS expr .)
    PRINTLN         reduce using rule 26 (expr -> expr LESS expr .)
    WHILE           reduce using rule 26 (expr -> expr LESS expr .)
    RIGHT_BRACE     reduce using rule 26 (expr -> expr LESS expr .)
    FN              reduce using rule 26 (expr -> expr LESS expr .)
    $end            reduce using rule 26 (expr -> expr LESS expr .)
    RIGHT_PAREN     reduce using rule 26 (expr -> expr LESS expr .)
    COMMA           reduce using rule 26 (expr -> expr LESS expr .)
    RIGHT_BRACKET   reduce using rule 26 (expr -> expr LESS expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr LESS expr .)
    ELSE            reduce using rule 26 (expr -> expr LESS expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! STAR            [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! SLASH           [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! LESS            [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! GREATER         [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! BANG_EQUAL      [ reduce using rule 26 (expr -> expr LESS expr .) ]
  ! IF              [ reduce using rule 26 (expr -> expr LESS expr .) ]


state 73

    (27) expr -> expr LESS_EQUAL expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    NUMBER          reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    NIL             reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    STRING          reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    IDENTIFIER      reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    LEFT_BRACE      reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    LET             reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    PRINT           reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    PRINTLN         reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    WHILE           reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    FN              reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    $end            reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    ELSE            reduce using rule 27 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! STAR            [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS            [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]
  ! IF              [ reduce using rule 27 (expr -> expr LESS_EQUAL expr .) ]


state 74

    (28) expr -> expr GREATER expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 28 (expr -> expr GREATER expr .)
    NUMBER          reduce using rule 28 (expr -> expr GREATER expr .)
    NIL             reduce using rule 28 (expr -> expr GREATER expr .)
    STRING          reduce using rule 28 (expr -> expr GREATER expr .)
    LEFT_BRACKET    reduce using rule 28 (expr -> expr GREATER expr .)
    IDENTIFIER      reduce using rule 28 (expr -> expr GREATER expr .)
    LEFT_BRACE      reduce using rule 28 (expr -> expr GREATER expr .)
    LET             reduce using rule 28 (expr -> expr GREATER expr .)
    PRINT           reduce using rule 28 (expr -> expr GREATER expr .)
    PRINTLN         reduce using rule 28 (expr -> expr GREATER expr .)
    WHILE           reduce using rule 28 (expr -> expr GREATER expr .)
    RIGHT_BRACE     reduce using rule 28 (expr -> expr GREATER expr .)
    FN              reduce using rule 28 (expr -> expr GREATER expr .)
    $end            reduce using rule 28 (expr -> expr GREATER expr .)
    RIGHT_PAREN     reduce using rule 28 (expr -> expr GREATER expr .)
    COMMA           reduce using rule 28 (expr -> expr GREATER expr .)
    RIGHT_BRACKET   reduce using rule 28 (expr -> expr GREATER expr .)
    SEMICOLON       reduce using rule 28 (expr -> expr GREATER expr .)
    ELSE            reduce using rule 28 (expr -> expr GREATER expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! STAR            [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! SLASH           [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! LESS            [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! LESS_EQUAL      [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! GREATER         [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! BANG_EQUAL      [ reduce using rule 28 (expr -> expr GREATER expr .) ]
  ! IF              [ reduce using rule 28 (expr -> expr GREATER expr .) ]


state 75

    (29) expr -> expr GREATER_EQUAL expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    NUMBER          reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    NIL             reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    STRING          reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    IDENTIFIER      reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    LEFT_BRACE      reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    LET             reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    PRINT           reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    PRINTLN         reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    WHILE           reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    FN              reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    $end            reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    ELSE            reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! STAR            [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS            [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! IF              [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]


state 76

    (30) expr -> expr EQUAL_EQUAL expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    NUMBER          reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    NIL             reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    STRING          reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    IDENTIFIER      reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_BRACE      reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    LET             reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    PRINT           reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    PRINTLN         reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    WHILE           reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    FN              reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    $end            reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    COMMA           reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    SEMICOLON       reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    ELSE            reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! STAR            [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! LESS            [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]
  ! IF              [ reduce using rule 30 (expr -> expr EQUAL_EQUAL expr .) ]


state 77

    (31) expr -> expr BANG_EQUAL expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    NUMBER          reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    NIL             reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    STRING          reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    IDENTIFIER      reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    LEFT_BRACE      reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    LET             reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    PRINT           reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    PRINTLN         reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    WHILE           reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    FN              reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    $end            reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    COMMA           reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    SEMICOLON       reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    ELSE            reduce using rule 31 (expr -> expr BANG_EQUAL expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! STAR            [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! LESS            [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]
  ! IF              [ reduce using rule 31 (expr -> expr BANG_EQUAL expr .) ]


state 78

    (42) expr -> expr IF expr . ELSE expr
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    ELSE            shift and go to state 89
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 79

    (36) expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .

    PLUS            reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    MINUS           reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    STAR            reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    SLASH           reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS            reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER         reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    IF              reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    NUMBER          reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    NIL             reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    STRING          reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACE      reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LET             reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    PRINT           reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    PRINTLN         reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    WHILE           reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    FN              reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    $end            reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    COMMA           reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    ELSE            reduce using rule 36 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)


state 80

    (38) expr_list_comma -> expr COMMA . expr_list_comma
    (38) expr_list_comma -> . expr COMMA expr_list_comma
    (39) expr_list_comma -> . expr
    (40) expr_list_comma -> . empty
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (47) empty -> .

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18
    RIGHT_BRACKET   reduce using rule 47 (empty -> .)
    RIGHT_PAREN     reduce using rule 47 (empty -> .)

    expr                           shift and go to state 56
    expr_list_comma                shift and go to state 90
    empty                          shift and go to state 57

state 81

    (18) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (19) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (9) stmt_list -> . stmt stmt_list
    (10) stmt_list -> . stmt
    (11) stmt -> . expr
    (12) stmt -> . declaration
    (13) stmt -> . assign
    (14) stmt -> . print
    (15) stmt -> . condition
    (16) stmt -> . while
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (44) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (45) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (46) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (20) print -> . PRINT expr SEMICOLON
    (21) print -> . PRINTLN expr SEMICOLON
    (18) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (17) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 16
    LEFT_BRACE      shift and go to state 18
    LET             shift and go to state 32
    PRINT           shift and go to state 33
    PRINTLN         shift and go to state 34
    IF              shift and go to state 31
    WHILE           shift and go to state 35

    expr                           shift and go to state 21
    stmt_list                      shift and go to state 91
    stmt                           shift and go to state 20
    declaration                    shift and go to state 22
    assign                         shift and go to state 23
    print                          shift and go to state 24
    condition                      shift and go to state 25
    while                          shift and go to state 26

state 82

    (44) declaration -> LET IDENTIFIER EQUAL . expr SEMICOLON
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 92

state 83

    (45) declaration -> LET MUT IDENTIFIER . EQUAL expr SEMICOLON

    EQUAL           shift and go to state 93


state 84

    (20) print -> PRINT expr SEMICOLON .

    LEFT_PAREN      reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    NUMBER          reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    NIL             reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    STRING          reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    LET             reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    PRINT           reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    PRINTLN         reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    IF              reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    WHILE           reduce using rule 20 (print -> PRINT expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 20 (print -> PRINT expr SEMICOLON .)


state 85

    (21) print -> PRINTLN expr SEMICOLON .

    LEFT_PAREN      reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    NUMBER          reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    NIL             reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    STRING          reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    LET             reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    PRINT           reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    PRINTLN         reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    IF              reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    WHILE           reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 21 (print -> PRINTLN expr SEMICOLON .)


state 86

    (17) while -> WHILE expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (9) stmt_list -> . stmt stmt_list
    (10) stmt_list -> . stmt
    (11) stmt -> . expr
    (12) stmt -> . declaration
    (13) stmt -> . assign
    (14) stmt -> . print
    (15) stmt -> . condition
    (16) stmt -> . while
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (44) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (45) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (46) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (20) print -> . PRINT expr SEMICOLON
    (21) print -> . PRINTLN expr SEMICOLON
    (18) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (17) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 16
    LEFT_BRACE      shift and go to state 18
    LET             shift and go to state 32
    PRINT           shift and go to state 33
    PRINTLN         shift and go to state 34
    IF              shift and go to state 31
    WHILE           shift and go to state 35

    expr                           shift and go to state 21
    stmt_list                      shift and go to state 94
    stmt                           shift and go to state 20
    declaration                    shift and go to state 22
    assign                         shift and go to state 23
    print                          shift and go to state 24
    condition                      shift and go to state 25
    while                          shift and go to state 26

state 87

    (37) expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .

    PLUS            reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    MINUS           reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STAR            reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SLASH           reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS            reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER         reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IF              reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    NUMBER          reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    NIL             reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STRING          reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LET             reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PRINT           reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PRINTLN         reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    WHILE           reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FN              reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    $end            reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    COMMA           reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SEMICOLON       reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    ELSE            reduce using rule 37 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)


state 88

    (46) assign -> IDENTIFIER EQUAL expr SEMICOLON .

    LEFT_PAREN      reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 46 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)


state 89

    (42) expr -> expr IF expr ELSE . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 95

state 90

    (38) expr_list_comma -> expr COMMA expr_list_comma .

    RIGHT_BRACKET   reduce using rule 38 (expr_list_comma -> expr COMMA expr_list_comma .)
    RIGHT_PAREN     reduce using rule 38 (expr_list_comma -> expr COMMA expr_list_comma .)


state 91

    (18) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE
    (19) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 96


state 92

    (44) declaration -> LET IDENTIFIER EQUAL expr . SEMICOLON
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 97
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 93

    (45) declaration -> LET MUT IDENTIFIER EQUAL . expr SEMICOLON
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 36
    LEFT_BRACE      shift and go to state 18

    expr                           shift and go to state 98

state 94

    (17) while -> WHILE expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 99


state 95

    (42) expr -> expr IF expr ELSE expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    NUMBER          reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    NIL             reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    STRING          reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    LEFT_BRACKET    reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    IDENTIFIER      reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    LEFT_BRACE      reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    LET             reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    PRINT           reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    PRINTLN         reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    WHILE           reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    RIGHT_BRACE     reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    FN              reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    $end            reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    RIGHT_PAREN     reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    COMMA           reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    RIGHT_BRACKET   reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    ELSE            reduce using rule 42 (expr -> expr IF expr ELSE expr .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54

  ! PLUS            [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! STAR            [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! SLASH           [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! LESS            [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER         [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! BANG_EQUAL      [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]
  ! IF              [ reduce using rule 42 (expr -> expr IF expr ELSE expr .) ]


state 96

    (18) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .
    (19) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE . ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 18 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            shift and go to state 100


state 97

    (44) declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .

    LEFT_PAREN      reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 44 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)


state 98

    (45) declaration -> LET MUT IDENTIFIER EQUAL expr . SEMICOLON
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . STAR expr
    (25) expr -> expr . SLASH expr
    (26) expr -> expr . LESS expr
    (27) expr -> expr . LESS_EQUAL expr
    (28) expr -> expr . GREATER expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . EQUAL_EQUAL expr
    (31) expr -> expr . BANG_EQUAL expr
    (42) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 101
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    STAR            shift and go to state 46
    SLASH           shift and go to state 47
    LESS            shift and go to state 48
    LESS_EQUAL      shift and go to state 49
    GREATER         shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL_EQUAL     shift and go to state 52
    BANG_EQUAL      shift and go to state 53
    IF              shift and go to state 54


state 99

    (17) while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .

    LEFT_PAREN      reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)


state 100

    (19) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 102


state 101

    (45) declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .

    LEFT_PAREN      reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 45 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)


state 102

    (19) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE . stmt_list RIGHT_BRACE
    (9) stmt_list -> . stmt stmt_list
    (10) stmt_list -> . stmt
    (11) stmt -> . expr
    (12) stmt -> . declaration
    (13) stmt -> . assign
    (14) stmt -> . print
    (15) stmt -> . condition
    (16) stmt -> . while
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr STAR expr
    (25) expr -> . expr SLASH expr
    (26) expr -> . expr LESS expr
    (27) expr -> . expr LESS_EQUAL expr
    (28) expr -> . expr GREATER expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr EQUAL_EQUAL expr
    (31) expr -> . expr BANG_EQUAL expr
    (32) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (33) expr -> . NUMBER
    (34) expr -> . NIL
    (35) expr -> . STRING
    (36) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (37) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (41) expr -> . IDENTIFIER
    (42) expr -> . expr IF expr ELSE expr
    (43) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (44) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (45) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (46) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (20) print -> . PRINT expr SEMICOLON
    (21) print -> . PRINTLN expr SEMICOLON
    (18) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (19) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (17) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 17
    NUMBER          shift and go to state 27
    NIL             shift and go to state 28
    STRING          shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    IDENTIFIER      shift and go to state 16
    LEFT_BRACE      shift and go to state 18
    LET             shift and go to state 32
    PRINT           shift and go to state 33
    PRINTLN         shift and go to state 34
    IF              shift and go to state 31
    WHILE           shift and go to state 35

    expr                           shift and go to state 21
    stmt_list                      shift and go to state 103
    stmt                           shift and go to state 20
    declaration                    shift and go to state 22
    assign                         shift and go to state 23
    print                          shift and go to state 24
    condition                      shift and go to state 25
    while                          shift and go to state 26

state 103

    (19) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 104


state 104

    (19) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .

    LEFT_PAREN      reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 19 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PAREN in state 16 resolved as shift
WARNING: shift/reduce conflict for IF in state 21 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for STAR in state 68 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for STAR in state 69 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for STAR in state 70 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for STAR in state 71 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for STAR in state 72 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for STAR in state 73 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for STAR in state 74 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for STAR in state 75 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for STAR in state 76 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 76 resolved as shift
WARNING: shift/reduce conflict for LESS in state 76 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for STAR in state 77 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for IF in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for STAR in state 95 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
