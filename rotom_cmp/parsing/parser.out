Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BANG
    CLASS
    COLON
    EOF
    FALSE
    OR
    SUPER
    THIS
    TRUE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> use_list fn_def_list
Rule 2     use_list -> use use_list
Rule 3     use_list -> use
Rule 4     use_list -> empty
Rule 5     use -> USE STRING ARROW IDENTIFIER SEMICOLON
Rule 6     use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
Rule 7     fn_def_list -> fn_def fn_def_list
Rule 8     fn_def_list -> fn_def
Rule 9     fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
Rule 10    fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr
Rule 11    param_list -> IDENTIFIER COMMA param_list
Rule 12    param_list -> IDENTIFIER
Rule 13    param_list -> empty
Rule 14    stmt_list -> stmt stmt_list
Rule 15    stmt_list -> stmt
Rule 16    stmt -> expr
Rule 17    stmt -> declaration
Rule 18    stmt -> assign
Rule 19    stmt -> print
Rule 20    stmt -> condition
Rule 21    stmt -> while
Rule 22    stmt -> for
Rule 23    stmt -> return
Rule 24    return -> RETURN expr SEMICOLON
Rule 25    for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 26    for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 27    while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 28    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 29    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
Rule 30    print -> PRINT expr SEMICOLON
Rule 31    print -> PRINTLN expr SEMICOLON
Rule 32    expr -> expr PLUS expr
Rule 33    expr -> expr MINUS expr
Rule 34    expr -> expr STAR expr
Rule 35    expr -> expr SLASH expr
Rule 36    expr -> expr LESS expr
Rule 37    expr -> expr LESS_EQUAL expr
Rule 38    expr -> expr GREATER expr
Rule 39    expr -> expr GREATER_EQUAL expr
Rule 40    expr -> expr EQUAL_EQUAL expr
Rule 41    expr -> expr BANG_EQUAL expr
Rule 42    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 43    expr -> NUMBER
Rule 44    expr -> NIL
Rule 45    expr -> STRING
Rule 46    expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET
Rule 47    expr -> expr DOT IDENTIFIER
Rule 48    expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
Rule 49    expr -> expr LEFT_BRACKET expr RIGHT_BRACKET
Rule 50    expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
Rule 51    expr_list_comma -> expr COMMA expr_list_comma
Rule 52    expr_list_comma -> expr
Rule 53    expr_list_comma -> empty
Rule 54    expr -> IDENTIFIER
Rule 55    expr -> expr IF expr ELSE expr
Rule 56    expr -> LEFT_BRACE stmt_list RIGHT_BRACE
Rule 57    indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET
Rule 58    indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list
Rule 59    declaration -> LET IDENTIFIER EQUAL expr SEMICOLON
Rule 60    declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON
Rule 61    declaration -> LET IDENTIFIER SEMICOLON
Rule 62    declaration -> LET MUT IDENTIFIER SEMICOLON
Rule 63    assign -> IDENTIFIER EQUAL expr SEMICOLON
Rule 64    assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON
Rule 65    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARROW                : 5 6 10
BANG                 : 
BANG_EQUAL           : 41
CLASS                : 
COLON                : 
COMMA                : 11 26 51
DOT                  : 47 48
ELSE                 : 29 55
EOF                  : 
EQUAL                : 59 60 63 64
EQUAL_EQUAL          : 40
FALSE                : 
FN                   : 9 10
FOR                  : 25 26
GREATER              : 38
GREATER_EQUAL        : 39
IDENTIFIER           : 5 9 10 11 12 25 26 26 47 48 50 54 59 60 61 62 63 64
IF                   : 28 29 55
IN                   : 25 26
LEFT_BRACE           : 9 25 26 27 28 29 29 56
LEFT_BRACKET         : 46 49 57 58
LEFT_PAREN           : 6 9 10 42 48 50
LESS                 : 36
LESS_EQUAL           : 37
LET                  : 59 60 61 62
MINUS                : 33
MUT                  : 60 62
NIL                  : 44
NUMBER               : 43
OR                   : 
PLUS                 : 32
PRINT                : 30
PRINTLN              : 31
RETURN               : 24
RIGHT_BRACE          : 9 25 26 27 28 29 29 56
RIGHT_BRACKET        : 46 49 57 58
RIGHT_PAREN          : 6 9 10 42 48 50
SEMICOLON            : 5 6 24 30 31 59 60 61 62 63 64
SLASH                : 35
STAR                 : 34
STRING               : 5 6 45
SUPER                : 
THIS                 : 
TRUE                 : 
USE                  : 5 6
WHILE                : 27
error                : 

Nonterminals, with rules where they appear

assign               : 18
condition            : 20
declaration          : 17
empty                : 4 13 53
expr                 : 10 16 24 25 26 27 28 29 30 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 47 48 49 49 51 52 55 55 55 57 58 59 60 63 64
expr_list_comma      : 46 48 50 51
fn_def               : 7 8
fn_def_list          : 1 7
for                  : 22
indexof_list         : 58 64
param_list           : 6 9 10 11
print                : 19
prog                 : 0
return               : 23
stmt                 : 14 15
stmt_list            : 9 14 25 26 27 28 29 29 56
use                  : 2 3
use_list             : 1 2
while                : 21

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . use_list fn_def_list
    (2) use_list -> . use use_list
    (3) use_list -> . use
    (4) use_list -> . empty
    (5) use -> . USE STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> . USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
    (65) empty -> .

    USE             shift and go to state 5
    FN              reduce using rule 65 (empty -> .)

    prog                           shift and go to state 1
    use_list                       shift and go to state 2
    use                            shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> prog .



state 2

    (1) prog -> use_list . fn_def_list
    (7) fn_def_list -> . fn_def fn_def_list
    (8) fn_def_list -> . fn_def
    (9) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    FN              shift and go to state 8

    fn_def_list                    shift and go to state 6
    fn_def                         shift and go to state 7

state 3

    (2) use_list -> use . use_list
    (3) use_list -> use .
    (2) use_list -> . use use_list
    (3) use_list -> . use
    (4) use_list -> . empty
    (5) use -> . USE STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> . USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
    (65) empty -> .

  ! reduce/reduce conflict for FN resolved using rule 3 (use_list -> use .)
    FN              reduce using rule 3 (use_list -> use .)
    USE             shift and go to state 5

  ! FN              [ reduce using rule 65 (empty -> .) ]

    use                            shift and go to state 3
    use_list                       shift and go to state 9
    empty                          shift and go to state 4

state 4

    (4) use_list -> empty .

    FN              reduce using rule 4 (use_list -> empty .)


state 5

    (5) use -> USE . STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> USE . STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    STRING          shift and go to state 10


state 6

    (1) prog -> use_list fn_def_list .

    $end            reduce using rule 1 (prog -> use_list fn_def_list .)


state 7

    (7) fn_def_list -> fn_def . fn_def_list
    (8) fn_def_list -> fn_def .
    (7) fn_def_list -> . fn_def fn_def_list
    (8) fn_def_list -> . fn_def
    (9) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    $end            reduce using rule 8 (fn_def_list -> fn_def .)
    FN              shift and go to state 8

    fn_def                         shift and go to state 7
    fn_def_list                    shift and go to state 11

state 8

    (9) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    IDENTIFIER      shift and go to state 12


state 9

    (2) use_list -> use use_list .

    FN              reduce using rule 2 (use_list -> use use_list .)


state 10

    (5) use -> USE STRING . ARROW IDENTIFIER SEMICOLON
    (6) use -> USE STRING . ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    ARROW           shift and go to state 13


state 11

    (7) fn_def_list -> fn_def fn_def_list .

    $end            reduce using rule 7 (fn_def_list -> fn_def fn_def_list .)


state 12

    (9) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    LEFT_PAREN      shift and go to state 14


state 13

    (5) use -> USE STRING ARROW . IDENTIFIER SEMICOLON
    (6) use -> USE STRING ARROW . LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 15
    LEFT_PAREN      shift and go to state 16


state 14

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN ARROW expr
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (65) empty -> .

    IDENTIFIER      shift and go to state 17
    RIGHT_PAREN     reduce using rule 65 (empty -> .)

    param_list                     shift and go to state 18
    empty                          shift and go to state 19

state 15

    (5) use -> USE STRING ARROW IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 20


state 16

    (6) use -> USE STRING ARROW LEFT_PAREN . param_list RIGHT_PAREN SEMICOLON
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (65) empty -> .

    IDENTIFIER      shift and go to state 17
    RIGHT_PAREN     reduce using rule 65 (empty -> .)

    param_list                     shift and go to state 21
    empty                          shift and go to state 19

state 17

    (11) param_list -> IDENTIFIER . COMMA param_list
    (12) param_list -> IDENTIFIER .

    COMMA           shift and go to state 22
    RIGHT_PAREN     reduce using rule 12 (param_list -> IDENTIFIER .)


state 18

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN ARROW expr

    RIGHT_PAREN     shift and go to state 23


state 19

    (13) param_list -> empty .

    RIGHT_PAREN     reduce using rule 13 (param_list -> empty .)


state 20

    (5) use -> USE STRING ARROW IDENTIFIER SEMICOLON .

    USE             reduce using rule 5 (use -> USE STRING ARROW IDENTIFIER SEMICOLON .)
    FN              reduce using rule 5 (use -> USE STRING ARROW IDENTIFIER SEMICOLON .)


state 21

    (6) use -> USE STRING ARROW LEFT_PAREN param_list . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 24


state 22

    (11) param_list -> IDENTIFIER COMMA . param_list
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (65) empty -> .

    IDENTIFIER      shift and go to state 17
    RIGHT_PAREN     reduce using rule 65 (empty -> .)

    param_list                     shift and go to state 25
    empty                          shift and go to state 19

state 23

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . ARROW expr

    LEFT_BRACE      shift and go to state 26
    ARROW           shift and go to state 27


state 24

    (6) use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 28


state 25

    (11) param_list -> IDENTIFIER COMMA param_list .

    RIGHT_PAREN     reduce using rule 11 (param_list -> IDENTIFIER COMMA param_list .)


state 26

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    stmt_list                      shift and go to state 32
    stmt                           shift and go to state 33
    expr                           shift and go to state 34
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 27

    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 54

state 28

    (6) use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .

    USE             reduce using rule 6 (use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .)
    FN              reduce using rule 6 (use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .)


state 29

    (50) expr -> IDENTIFIER . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> IDENTIFIER .
    (63) assign -> IDENTIFIER . EQUAL expr SEMICOLON
    (64) assign -> IDENTIFIER . indexof_list EQUAL expr SEMICOLON
    (57) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (58) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 55
    PLUS            reduce using rule 54 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 54 (expr -> IDENTIFIER .)
    STAR            reduce using rule 54 (expr -> IDENTIFIER .)
    SLASH           reduce using rule 54 (expr -> IDENTIFIER .)
    LESS            reduce using rule 54 (expr -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 54 (expr -> IDENTIFIER .)
    GREATER         reduce using rule 54 (expr -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 54 (expr -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 54 (expr -> IDENTIFIER .)
    BANG_EQUAL      reduce using rule 54 (expr -> IDENTIFIER .)
    DOT             reduce using rule 54 (expr -> IDENTIFIER .)
    IF              reduce using rule 54 (expr -> IDENTIFIER .)
    NUMBER          reduce using rule 54 (expr -> IDENTIFIER .)
    NIL             reduce using rule 54 (expr -> IDENTIFIER .)
    STRING          reduce using rule 54 (expr -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 54 (expr -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 54 (expr -> IDENTIFIER .)
    LET             reduce using rule 54 (expr -> IDENTIFIER .)
    PRINT           reduce using rule 54 (expr -> IDENTIFIER .)
    PRINTLN         reduce using rule 54 (expr -> IDENTIFIER .)
    WHILE           reduce using rule 54 (expr -> IDENTIFIER .)
    FOR             reduce using rule 54 (expr -> IDENTIFIER .)
    RETURN          reduce using rule 54 (expr -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 54 (expr -> IDENTIFIER .)
    EQUAL           shift and go to state 56
    LEFT_BRACKET    shift and go to state 58

  ! LEFT_BRACKET    [ reduce using rule 54 (expr -> IDENTIFIER .) ]
  ! LEFT_PAREN      [ reduce using rule 54 (expr -> IDENTIFIER .) ]

    indexof_list                   shift and go to state 57

state 30

    (42) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 59

state 31

    (56) expr -> LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    stmt_list                      shift and go to state 60
    stmt                           shift and go to state 33
    expr                           shift and go to state 34
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 32

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 61


state 33

    (14) stmt_list -> stmt . stmt_list
    (15) stmt_list -> stmt .
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    RIGHT_BRACE     reduce using rule 15 (stmt_list -> stmt .)
    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    stmt                           shift and go to state 33
    stmt_list                      shift and go to state 62
    expr                           shift and go to state 34
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 34

    (16) stmt -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 16 (stmt -> expr .)
    NUMBER          reduce using rule 16 (stmt -> expr .)
    NIL             reduce using rule 16 (stmt -> expr .)
    STRING          reduce using rule 16 (stmt -> expr .)
    IDENTIFIER      reduce using rule 16 (stmt -> expr .)
    LEFT_BRACE      reduce using rule 16 (stmt -> expr .)
    LET             reduce using rule 16 (stmt -> expr .)
    PRINT           reduce using rule 16 (stmt -> expr .)
    PRINTLN         reduce using rule 16 (stmt -> expr .)
    WHILE           reduce using rule 16 (stmt -> expr .)
    FOR             reduce using rule 16 (stmt -> expr .)
    RETURN          reduce using rule 16 (stmt -> expr .)
    RIGHT_BRACE     reduce using rule 16 (stmt -> expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! LEFT_BRACKET    [ reduce using rule 16 (stmt -> expr .) ]
  ! IF              [ reduce using rule 16 (stmt -> expr .) ]


state 35

    (17) stmt -> declaration .

    LEFT_PAREN      reduce using rule 17 (stmt -> declaration .)
    NUMBER          reduce using rule 17 (stmt -> declaration .)
    NIL             reduce using rule 17 (stmt -> declaration .)
    STRING          reduce using rule 17 (stmt -> declaration .)
    LEFT_BRACKET    reduce using rule 17 (stmt -> declaration .)
    IDENTIFIER      reduce using rule 17 (stmt -> declaration .)
    LEFT_BRACE      reduce using rule 17 (stmt -> declaration .)
    LET             reduce using rule 17 (stmt -> declaration .)
    PRINT           reduce using rule 17 (stmt -> declaration .)
    PRINTLN         reduce using rule 17 (stmt -> declaration .)
    IF              reduce using rule 17 (stmt -> declaration .)
    WHILE           reduce using rule 17 (stmt -> declaration .)
    FOR             reduce using rule 17 (stmt -> declaration .)
    RETURN          reduce using rule 17 (stmt -> declaration .)
    RIGHT_BRACE     reduce using rule 17 (stmt -> declaration .)


state 36

    (18) stmt -> assign .

    LEFT_PAREN      reduce using rule 18 (stmt -> assign .)
    NUMBER          reduce using rule 18 (stmt -> assign .)
    NIL             reduce using rule 18 (stmt -> assign .)
    STRING          reduce using rule 18 (stmt -> assign .)
    LEFT_BRACKET    reduce using rule 18 (stmt -> assign .)
    IDENTIFIER      reduce using rule 18 (stmt -> assign .)
    LEFT_BRACE      reduce using rule 18 (stmt -> assign .)
    LET             reduce using rule 18 (stmt -> assign .)
    PRINT           reduce using rule 18 (stmt -> assign .)
    PRINTLN         reduce using rule 18 (stmt -> assign .)
    IF              reduce using rule 18 (stmt -> assign .)
    WHILE           reduce using rule 18 (stmt -> assign .)
    FOR             reduce using rule 18 (stmt -> assign .)
    RETURN          reduce using rule 18 (stmt -> assign .)
    RIGHT_BRACE     reduce using rule 18 (stmt -> assign .)


state 37

    (19) stmt -> print .

    LEFT_PAREN      reduce using rule 19 (stmt -> print .)
    NUMBER          reduce using rule 19 (stmt -> print .)
    NIL             reduce using rule 19 (stmt -> print .)
    STRING          reduce using rule 19 (stmt -> print .)
    LEFT_BRACKET    reduce using rule 19 (stmt -> print .)
    IDENTIFIER      reduce using rule 19 (stmt -> print .)
    LEFT_BRACE      reduce using rule 19 (stmt -> print .)
    LET             reduce using rule 19 (stmt -> print .)
    PRINT           reduce using rule 19 (stmt -> print .)
    PRINTLN         reduce using rule 19 (stmt -> print .)
    IF              reduce using rule 19 (stmt -> print .)
    WHILE           reduce using rule 19 (stmt -> print .)
    FOR             reduce using rule 19 (stmt -> print .)
    RETURN          reduce using rule 19 (stmt -> print .)
    RIGHT_BRACE     reduce using rule 19 (stmt -> print .)


state 38

    (20) stmt -> condition .

    LEFT_PAREN      reduce using rule 20 (stmt -> condition .)
    NUMBER          reduce using rule 20 (stmt -> condition .)
    NIL             reduce using rule 20 (stmt -> condition .)
    STRING          reduce using rule 20 (stmt -> condition .)
    LEFT_BRACKET    reduce using rule 20 (stmt -> condition .)
    IDENTIFIER      reduce using rule 20 (stmt -> condition .)
    LEFT_BRACE      reduce using rule 20 (stmt -> condition .)
    LET             reduce using rule 20 (stmt -> condition .)
    PRINT           reduce using rule 20 (stmt -> condition .)
    PRINTLN         reduce using rule 20 (stmt -> condition .)
    IF              reduce using rule 20 (stmt -> condition .)
    WHILE           reduce using rule 20 (stmt -> condition .)
    FOR             reduce using rule 20 (stmt -> condition .)
    RETURN          reduce using rule 20 (stmt -> condition .)
    RIGHT_BRACE     reduce using rule 20 (stmt -> condition .)


state 39

    (21) stmt -> while .

    LEFT_PAREN      reduce using rule 21 (stmt -> while .)
    NUMBER          reduce using rule 21 (stmt -> while .)
    NIL             reduce using rule 21 (stmt -> while .)
    STRING          reduce using rule 21 (stmt -> while .)
    LEFT_BRACKET    reduce using rule 21 (stmt -> while .)
    IDENTIFIER      reduce using rule 21 (stmt -> while .)
    LEFT_BRACE      reduce using rule 21 (stmt -> while .)
    LET             reduce using rule 21 (stmt -> while .)
    PRINT           reduce using rule 21 (stmt -> while .)
    PRINTLN         reduce using rule 21 (stmt -> while .)
    IF              reduce using rule 21 (stmt -> while .)
    WHILE           reduce using rule 21 (stmt -> while .)
    FOR             reduce using rule 21 (stmt -> while .)
    RETURN          reduce using rule 21 (stmt -> while .)
    RIGHT_BRACE     reduce using rule 21 (stmt -> while .)


state 40

    (22) stmt -> for .

    LEFT_PAREN      reduce using rule 22 (stmt -> for .)
    NUMBER          reduce using rule 22 (stmt -> for .)
    NIL             reduce using rule 22 (stmt -> for .)
    STRING          reduce using rule 22 (stmt -> for .)
    LEFT_BRACKET    reduce using rule 22 (stmt -> for .)
    IDENTIFIER      reduce using rule 22 (stmt -> for .)
    LEFT_BRACE      reduce using rule 22 (stmt -> for .)
    LET             reduce using rule 22 (stmt -> for .)
    PRINT           reduce using rule 22 (stmt -> for .)
    PRINTLN         reduce using rule 22 (stmt -> for .)
    IF              reduce using rule 22 (stmt -> for .)
    WHILE           reduce using rule 22 (stmt -> for .)
    FOR             reduce using rule 22 (stmt -> for .)
    RETURN          reduce using rule 22 (stmt -> for .)
    RIGHT_BRACE     reduce using rule 22 (stmt -> for .)


state 41

    (23) stmt -> return .

    LEFT_PAREN      reduce using rule 23 (stmt -> return .)
    NUMBER          reduce using rule 23 (stmt -> return .)
    NIL             reduce using rule 23 (stmt -> return .)
    STRING          reduce using rule 23 (stmt -> return .)
    LEFT_BRACKET    reduce using rule 23 (stmt -> return .)
    IDENTIFIER      reduce using rule 23 (stmt -> return .)
    LEFT_BRACE      reduce using rule 23 (stmt -> return .)
    LET             reduce using rule 23 (stmt -> return .)
    PRINT           reduce using rule 23 (stmt -> return .)
    PRINTLN         reduce using rule 23 (stmt -> return .)
    IF              reduce using rule 23 (stmt -> return .)
    WHILE           reduce using rule 23 (stmt -> return .)
    FOR             reduce using rule 23 (stmt -> return .)
    RETURN          reduce using rule 23 (stmt -> return .)
    RIGHT_BRACE     reduce using rule 23 (stmt -> return .)


state 42

    (43) expr -> NUMBER .

    PLUS            reduce using rule 43 (expr -> NUMBER .)
    MINUS           reduce using rule 43 (expr -> NUMBER .)
    STAR            reduce using rule 43 (expr -> NUMBER .)
    SLASH           reduce using rule 43 (expr -> NUMBER .)
    LESS            reduce using rule 43 (expr -> NUMBER .)
    LESS_EQUAL      reduce using rule 43 (expr -> NUMBER .)
    GREATER         reduce using rule 43 (expr -> NUMBER .)
    GREATER_EQUAL   reduce using rule 43 (expr -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 43 (expr -> NUMBER .)
    BANG_EQUAL      reduce using rule 43 (expr -> NUMBER .)
    DOT             reduce using rule 43 (expr -> NUMBER .)
    LEFT_BRACKET    reduce using rule 43 (expr -> NUMBER .)
    IF              reduce using rule 43 (expr -> NUMBER .)
    LEFT_PAREN      reduce using rule 43 (expr -> NUMBER .)
    NUMBER          reduce using rule 43 (expr -> NUMBER .)
    NIL             reduce using rule 43 (expr -> NUMBER .)
    STRING          reduce using rule 43 (expr -> NUMBER .)
    IDENTIFIER      reduce using rule 43 (expr -> NUMBER .)
    LEFT_BRACE      reduce using rule 43 (expr -> NUMBER .)
    LET             reduce using rule 43 (expr -> NUMBER .)
    PRINT           reduce using rule 43 (expr -> NUMBER .)
    PRINTLN         reduce using rule 43 (expr -> NUMBER .)
    WHILE           reduce using rule 43 (expr -> NUMBER .)
    FOR             reduce using rule 43 (expr -> NUMBER .)
    RETURN          reduce using rule 43 (expr -> NUMBER .)
    RIGHT_BRACE     reduce using rule 43 (expr -> NUMBER .)
    FN              reduce using rule 43 (expr -> NUMBER .)
    $end            reduce using rule 43 (expr -> NUMBER .)
    RIGHT_PAREN     reduce using rule 43 (expr -> NUMBER .)
    COMMA           reduce using rule 43 (expr -> NUMBER .)
    RIGHT_BRACKET   reduce using rule 43 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 43 (expr -> NUMBER .)
    ELSE            reduce using rule 43 (expr -> NUMBER .)


state 43

    (44) expr -> NIL .

    PLUS            reduce using rule 44 (expr -> NIL .)
    MINUS           reduce using rule 44 (expr -> NIL .)
    STAR            reduce using rule 44 (expr -> NIL .)
    SLASH           reduce using rule 44 (expr -> NIL .)
    LESS            reduce using rule 44 (expr -> NIL .)
    LESS_EQUAL      reduce using rule 44 (expr -> NIL .)
    GREATER         reduce using rule 44 (expr -> NIL .)
    GREATER_EQUAL   reduce using rule 44 (expr -> NIL .)
    EQUAL_EQUAL     reduce using rule 44 (expr -> NIL .)
    BANG_EQUAL      reduce using rule 44 (expr -> NIL .)
    DOT             reduce using rule 44 (expr -> NIL .)
    LEFT_BRACKET    reduce using rule 44 (expr -> NIL .)
    IF              reduce using rule 44 (expr -> NIL .)
    LEFT_PAREN      reduce using rule 44 (expr -> NIL .)
    NUMBER          reduce using rule 44 (expr -> NIL .)
    NIL             reduce using rule 44 (expr -> NIL .)
    STRING          reduce using rule 44 (expr -> NIL .)
    IDENTIFIER      reduce using rule 44 (expr -> NIL .)
    LEFT_BRACE      reduce using rule 44 (expr -> NIL .)
    LET             reduce using rule 44 (expr -> NIL .)
    PRINT           reduce using rule 44 (expr -> NIL .)
    PRINTLN         reduce using rule 44 (expr -> NIL .)
    WHILE           reduce using rule 44 (expr -> NIL .)
    FOR             reduce using rule 44 (expr -> NIL .)
    RETURN          reduce using rule 44 (expr -> NIL .)
    RIGHT_BRACE     reduce using rule 44 (expr -> NIL .)
    FN              reduce using rule 44 (expr -> NIL .)
    $end            reduce using rule 44 (expr -> NIL .)
    RIGHT_PAREN     reduce using rule 44 (expr -> NIL .)
    COMMA           reduce using rule 44 (expr -> NIL .)
    RIGHT_BRACKET   reduce using rule 44 (expr -> NIL .)
    SEMICOLON       reduce using rule 44 (expr -> NIL .)
    ELSE            reduce using rule 44 (expr -> NIL .)


state 44

    (45) expr -> STRING .

    PLUS            reduce using rule 45 (expr -> STRING .)
    MINUS           reduce using rule 45 (expr -> STRING .)
    STAR            reduce using rule 45 (expr -> STRING .)
    SLASH           reduce using rule 45 (expr -> STRING .)
    LESS            reduce using rule 45 (expr -> STRING .)
    LESS_EQUAL      reduce using rule 45 (expr -> STRING .)
    GREATER         reduce using rule 45 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 45 (expr -> STRING .)
    EQUAL_EQUAL     reduce using rule 45 (expr -> STRING .)
    BANG_EQUAL      reduce using rule 45 (expr -> STRING .)
    DOT             reduce using rule 45 (expr -> STRING .)
    LEFT_BRACKET    reduce using rule 45 (expr -> STRING .)
    IF              reduce using rule 45 (expr -> STRING .)
    LEFT_PAREN      reduce using rule 45 (expr -> STRING .)
    NUMBER          reduce using rule 45 (expr -> STRING .)
    NIL             reduce using rule 45 (expr -> STRING .)
    STRING          reduce using rule 45 (expr -> STRING .)
    IDENTIFIER      reduce using rule 45 (expr -> STRING .)
    LEFT_BRACE      reduce using rule 45 (expr -> STRING .)
    LET             reduce using rule 45 (expr -> STRING .)
    PRINT           reduce using rule 45 (expr -> STRING .)
    PRINTLN         reduce using rule 45 (expr -> STRING .)
    WHILE           reduce using rule 45 (expr -> STRING .)
    FOR             reduce using rule 45 (expr -> STRING .)
    RETURN          reduce using rule 45 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 45 (expr -> STRING .)
    FN              reduce using rule 45 (expr -> STRING .)
    $end            reduce using rule 45 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 45 (expr -> STRING .)
    COMMA           reduce using rule 45 (expr -> STRING .)
    RIGHT_BRACKET   reduce using rule 45 (expr -> STRING .)
    SEMICOLON       reduce using rule 45 (expr -> STRING .)
    ELSE            reduce using rule 45 (expr -> STRING .)


state 45

    (46) expr -> LEFT_BRACKET . expr_list_comma RIGHT_BRACKET
    (51) expr_list_comma -> . expr COMMA expr_list_comma
    (52) expr_list_comma -> . expr
    (53) expr_list_comma -> . empty
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (65) empty -> .

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31
    RIGHT_BRACKET   reduce using rule 65 (empty -> .)

    expr_list_comma                shift and go to state 76
    expr                           shift and go to state 77
    empty                          shift and go to state 78

state 46

    (28) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 79

state 47

    (59) declaration -> LET . IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> LET . MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> LET . IDENTIFIER SEMICOLON
    (62) declaration -> LET . MUT IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 80
    MUT             shift and go to state 81


state 48

    (30) print -> PRINT . expr SEMICOLON
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 82

state 49

    (31) print -> PRINTLN . expr SEMICOLON
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 83

state 50

    (27) while -> WHILE . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 84

state 51

    (25) for -> FOR . IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> FOR . IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 85


state 52

    (24) return -> RETURN . expr SEMICOLON
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 86

state 53

    (50) expr -> IDENTIFIER . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    LEFT_PAREN      shift and go to state 55
    PLUS            reduce using rule 54 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 54 (expr -> IDENTIFIER .)
    STAR            reduce using rule 54 (expr -> IDENTIFIER .)
    SLASH           reduce using rule 54 (expr -> IDENTIFIER .)
    LESS            reduce using rule 54 (expr -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 54 (expr -> IDENTIFIER .)
    GREATER         reduce using rule 54 (expr -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 54 (expr -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 54 (expr -> IDENTIFIER .)
    BANG_EQUAL      reduce using rule 54 (expr -> IDENTIFIER .)
    DOT             reduce using rule 54 (expr -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 54 (expr -> IDENTIFIER .)
    IF              reduce using rule 54 (expr -> IDENTIFIER .)
    FN              reduce using rule 54 (expr -> IDENTIFIER .)
    $end            reduce using rule 54 (expr -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 54 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 54 (expr -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 54 (expr -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 54 (expr -> IDENTIFIER .)
    SEMICOLON       reduce using rule 54 (expr -> IDENTIFIER .)
    NUMBER          reduce using rule 54 (expr -> IDENTIFIER .)
    NIL             reduce using rule 54 (expr -> IDENTIFIER .)
    STRING          reduce using rule 54 (expr -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 54 (expr -> IDENTIFIER .)
    LET             reduce using rule 54 (expr -> IDENTIFIER .)
    PRINT           reduce using rule 54 (expr -> IDENTIFIER .)
    PRINTLN         reduce using rule 54 (expr -> IDENTIFIER .)
    WHILE           reduce using rule 54 (expr -> IDENTIFIER .)
    FOR             reduce using rule 54 (expr -> IDENTIFIER .)
    RETURN          reduce using rule 54 (expr -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 54 (expr -> IDENTIFIER .)
    ELSE            reduce using rule 54 (expr -> IDENTIFIER .)

  ! LEFT_PAREN      [ reduce using rule 54 (expr -> IDENTIFIER .) ]


state 54

    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    FN              reduce using rule 10 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    $end            reduce using rule 10 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 55

    (50) expr -> IDENTIFIER LEFT_PAREN . expr_list_comma RIGHT_PAREN
    (51) expr_list_comma -> . expr COMMA expr_list_comma
    (52) expr_list_comma -> . expr
    (53) expr_list_comma -> . empty
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (65) empty -> .

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31
    RIGHT_PAREN     reduce using rule 65 (empty -> .)

    expr_list_comma                shift and go to state 87
    expr                           shift and go to state 77
    empty                          shift and go to state 78

state 56

    (63) assign -> IDENTIFIER EQUAL . expr SEMICOLON
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 88

state 57

    (64) assign -> IDENTIFIER indexof_list . EQUAL expr SEMICOLON

    EQUAL           shift and go to state 89


state 58

    (57) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET
    (58) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET indexof_list
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 90

state 59

    (42) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    RIGHT_PAREN     shift and go to state 91
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 60

    (56) expr -> LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 92


state 61

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .

    FN              reduce using rule 9 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 9 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)


state 62

    (14) stmt_list -> stmt stmt_list .

    RIGHT_BRACE     reduce using rule 14 (stmt_list -> stmt stmt_list .)


state 63

    (32) expr -> expr PLUS . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 93

state 64

    (33) expr -> expr MINUS . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 94

state 65

    (34) expr -> expr STAR . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 95

state 66

    (35) expr -> expr SLASH . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 96

state 67

    (36) expr -> expr LESS . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 97

state 68

    (37) expr -> expr LESS_EQUAL . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 98

state 69

    (38) expr -> expr GREATER . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 99

state 70

    (39) expr -> expr GREATER_EQUAL . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 100

state 71

    (40) expr -> expr EQUAL_EQUAL . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 101

state 72

    (41) expr -> expr BANG_EQUAL . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 102

state 73

    (47) expr -> expr DOT . IDENTIFIER
    (48) expr -> expr DOT . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN

    IDENTIFIER      shift and go to state 103


state 74

    (49) expr -> expr LEFT_BRACKET . expr RIGHT_BRACKET
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 104

state 75

    (55) expr -> expr IF . expr ELSE expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 105

state 76

    (46) expr -> LEFT_BRACKET expr_list_comma . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 106


state 77

    (51) expr_list_comma -> expr . COMMA expr_list_comma
    (52) expr_list_comma -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    COMMA           shift and go to state 107
    RIGHT_BRACKET   reduce using rule 52 (expr_list_comma -> expr .)
    RIGHT_PAREN     reduce using rule 52 (expr_list_comma -> expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 78

    (53) expr_list_comma -> empty .

    RIGHT_BRACKET   reduce using rule 53 (expr_list_comma -> empty .)
    RIGHT_PAREN     reduce using rule 53 (expr_list_comma -> empty .)


state 79

    (28) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 108
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 80

    (59) declaration -> LET IDENTIFIER . EQUAL expr SEMICOLON
    (61) declaration -> LET IDENTIFIER . SEMICOLON

    EQUAL           shift and go to state 109
    SEMICOLON       shift and go to state 110


state 81

    (60) declaration -> LET MUT . IDENTIFIER EQUAL expr SEMICOLON
    (62) declaration -> LET MUT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 111


state 82

    (30) print -> PRINT expr . SEMICOLON
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 112
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 83

    (31) print -> PRINTLN expr . SEMICOLON
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 113
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 84

    (27) while -> WHILE expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 114
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 85

    (25) for -> FOR IDENTIFIER . IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> FOR IDENTIFIER . COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IN              shift and go to state 115
    COMMA           shift and go to state 116


state 86

    (24) return -> RETURN expr . SEMICOLON
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 117
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 87

    (50) expr -> IDENTIFIER LEFT_PAREN expr_list_comma . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 118


state 88

    (63) assign -> IDENTIFIER EQUAL expr . SEMICOLON
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 119
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 89

    (64) assign -> IDENTIFIER indexof_list EQUAL . expr SEMICOLON
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 120

state 90

    (57) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET
    (58) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET indexof_list
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 121
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 91

    (42) expr -> LEFT_PAREN expr RIGHT_PAREN .

    PLUS            reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    STAR            reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SLASH           reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS            reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER         reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    DOT             reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    NUMBER          reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    NIL             reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    STRING          reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LET             reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINT           reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINTLN         reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    WHILE           reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    FOR             reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RETURN          reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    FN              reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    ELSE            reduce using rule 42 (expr -> LEFT_PAREN expr RIGHT_PAREN .)


state 92

    (56) expr -> LEFT_BRACE stmt_list RIGHT_BRACE .

    PLUS            reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    MINUS           reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    STAR            reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    SLASH           reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS            reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS_EQUAL      reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER         reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER_EQUAL   reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    EQUAL_EQUAL     reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    BANG_EQUAL      reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    DOT             reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    FN              reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    COMMA           reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    SEMICOLON       reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            reduce using rule 56 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)


state 93

    (32) expr -> expr PLUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 32 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 32 (expr -> expr PLUS expr .)
    NIL             reduce using rule 32 (expr -> expr PLUS expr .)
    STRING          reduce using rule 32 (expr -> expr PLUS expr .)
    IDENTIFIER      reduce using rule 32 (expr -> expr PLUS expr .)
    LEFT_BRACE      reduce using rule 32 (expr -> expr PLUS expr .)
    LET             reduce using rule 32 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 32 (expr -> expr PLUS expr .)
    PRINTLN         reduce using rule 32 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 32 (expr -> expr PLUS expr .)
    FOR             reduce using rule 32 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 32 (expr -> expr PLUS expr .)
    RIGHT_BRACE     reduce using rule 32 (expr -> expr PLUS expr .)
    FN              reduce using rule 32 (expr -> expr PLUS expr .)
    $end            reduce using rule 32 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 32 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 32 (expr -> expr PLUS expr .)
    RIGHT_BRACKET   reduce using rule 32 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 32 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 32 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! STAR            [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! SLASH           [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! LESS            [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! GREATER         [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! BANG_EQUAL      [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! DOT             [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! IF              [ reduce using rule 32 (expr -> expr PLUS expr .) ]


state 94

    (33) expr -> expr MINUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 33 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 33 (expr -> expr MINUS expr .)
    NIL             reduce using rule 33 (expr -> expr MINUS expr .)
    STRING          reduce using rule 33 (expr -> expr MINUS expr .)
    IDENTIFIER      reduce using rule 33 (expr -> expr MINUS expr .)
    LEFT_BRACE      reduce using rule 33 (expr -> expr MINUS expr .)
    LET             reduce using rule 33 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 33 (expr -> expr MINUS expr .)
    PRINTLN         reduce using rule 33 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 33 (expr -> expr MINUS expr .)
    FOR             reduce using rule 33 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 33 (expr -> expr MINUS expr .)
    RIGHT_BRACE     reduce using rule 33 (expr -> expr MINUS expr .)
    FN              reduce using rule 33 (expr -> expr MINUS expr .)
    $end            reduce using rule 33 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 33 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 33 (expr -> expr MINUS expr .)
    RIGHT_BRACKET   reduce using rule 33 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 33 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 33 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! STAR            [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! SLASH           [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! LESS            [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! GREATER         [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! BANG_EQUAL      [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! DOT             [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! IF              [ reduce using rule 33 (expr -> expr MINUS expr .) ]


state 95

    (34) expr -> expr STAR expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 34 (expr -> expr STAR expr .)
    NUMBER          reduce using rule 34 (expr -> expr STAR expr .)
    NIL             reduce using rule 34 (expr -> expr STAR expr .)
    STRING          reduce using rule 34 (expr -> expr STAR expr .)
    IDENTIFIER      reduce using rule 34 (expr -> expr STAR expr .)
    LEFT_BRACE      reduce using rule 34 (expr -> expr STAR expr .)
    LET             reduce using rule 34 (expr -> expr STAR expr .)
    PRINT           reduce using rule 34 (expr -> expr STAR expr .)
    PRINTLN         reduce using rule 34 (expr -> expr STAR expr .)
    WHILE           reduce using rule 34 (expr -> expr STAR expr .)
    FOR             reduce using rule 34 (expr -> expr STAR expr .)
    RETURN          reduce using rule 34 (expr -> expr STAR expr .)
    RIGHT_BRACE     reduce using rule 34 (expr -> expr STAR expr .)
    FN              reduce using rule 34 (expr -> expr STAR expr .)
    $end            reduce using rule 34 (expr -> expr STAR expr .)
    RIGHT_PAREN     reduce using rule 34 (expr -> expr STAR expr .)
    COMMA           reduce using rule 34 (expr -> expr STAR expr .)
    RIGHT_BRACKET   reduce using rule 34 (expr -> expr STAR expr .)
    SEMICOLON       reduce using rule 34 (expr -> expr STAR expr .)
    ELSE            reduce using rule 34 (expr -> expr STAR expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! STAR            [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! SLASH           [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! LESS            [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! GREATER         [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! BANG_EQUAL      [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! DOT             [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 34 (expr -> expr STAR expr .) ]
  ! IF              [ reduce using rule 34 (expr -> expr STAR expr .) ]


state 96

    (35) expr -> expr SLASH expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 35 (expr -> expr SLASH expr .)
    NUMBER          reduce using rule 35 (expr -> expr SLASH expr .)
    NIL             reduce using rule 35 (expr -> expr SLASH expr .)
    STRING          reduce using rule 35 (expr -> expr SLASH expr .)
    IDENTIFIER      reduce using rule 35 (expr -> expr SLASH expr .)
    LEFT_BRACE      reduce using rule 35 (expr -> expr SLASH expr .)
    LET             reduce using rule 35 (expr -> expr SLASH expr .)
    PRINT           reduce using rule 35 (expr -> expr SLASH expr .)
    PRINTLN         reduce using rule 35 (expr -> expr SLASH expr .)
    WHILE           reduce using rule 35 (expr -> expr SLASH expr .)
    FOR             reduce using rule 35 (expr -> expr SLASH expr .)
    RETURN          reduce using rule 35 (expr -> expr SLASH expr .)
    RIGHT_BRACE     reduce using rule 35 (expr -> expr SLASH expr .)
    FN              reduce using rule 35 (expr -> expr SLASH expr .)
    $end            reduce using rule 35 (expr -> expr SLASH expr .)
    RIGHT_PAREN     reduce using rule 35 (expr -> expr SLASH expr .)
    COMMA           reduce using rule 35 (expr -> expr SLASH expr .)
    RIGHT_BRACKET   reduce using rule 35 (expr -> expr SLASH expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr SLASH expr .)
    ELSE            reduce using rule 35 (expr -> expr SLASH expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! STAR            [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! SLASH           [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! LESS            [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! GREATER         [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! BANG_EQUAL      [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! DOT             [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 35 (expr -> expr SLASH expr .) ]
  ! IF              [ reduce using rule 35 (expr -> expr SLASH expr .) ]


state 97

    (36) expr -> expr LESS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 36 (expr -> expr LESS expr .)
    NUMBER          reduce using rule 36 (expr -> expr LESS expr .)
    NIL             reduce using rule 36 (expr -> expr LESS expr .)
    STRING          reduce using rule 36 (expr -> expr LESS expr .)
    IDENTIFIER      reduce using rule 36 (expr -> expr LESS expr .)
    LEFT_BRACE      reduce using rule 36 (expr -> expr LESS expr .)
    LET             reduce using rule 36 (expr -> expr LESS expr .)
    PRINT           reduce using rule 36 (expr -> expr LESS expr .)
    PRINTLN         reduce using rule 36 (expr -> expr LESS expr .)
    WHILE           reduce using rule 36 (expr -> expr LESS expr .)
    FOR             reduce using rule 36 (expr -> expr LESS expr .)
    RETURN          reduce using rule 36 (expr -> expr LESS expr .)
    RIGHT_BRACE     reduce using rule 36 (expr -> expr LESS expr .)
    FN              reduce using rule 36 (expr -> expr LESS expr .)
    $end            reduce using rule 36 (expr -> expr LESS expr .)
    RIGHT_PAREN     reduce using rule 36 (expr -> expr LESS expr .)
    COMMA           reduce using rule 36 (expr -> expr LESS expr .)
    RIGHT_BRACKET   reduce using rule 36 (expr -> expr LESS expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr LESS expr .)
    ELSE            reduce using rule 36 (expr -> expr LESS expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! STAR            [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! SLASH           [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! LESS            [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! GREATER         [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! BANG_EQUAL      [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! DOT             [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 36 (expr -> expr LESS expr .) ]
  ! IF              [ reduce using rule 36 (expr -> expr LESS expr .) ]


state 98

    (37) expr -> expr LESS_EQUAL expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    NUMBER          reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    NIL             reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    STRING          reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    IDENTIFIER      reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    LEFT_BRACE      reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    LET             reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    PRINT           reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    PRINTLN         reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    WHILE           reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    FOR             reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    RETURN          reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    FN              reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    $end            reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    ELSE            reduce using rule 37 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! STAR            [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS            [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! DOT             [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]
  ! IF              [ reduce using rule 37 (expr -> expr LESS_EQUAL expr .) ]


state 99

    (38) expr -> expr GREATER expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 38 (expr -> expr GREATER expr .)
    NUMBER          reduce using rule 38 (expr -> expr GREATER expr .)
    NIL             reduce using rule 38 (expr -> expr GREATER expr .)
    STRING          reduce using rule 38 (expr -> expr GREATER expr .)
    IDENTIFIER      reduce using rule 38 (expr -> expr GREATER expr .)
    LEFT_BRACE      reduce using rule 38 (expr -> expr GREATER expr .)
    LET             reduce using rule 38 (expr -> expr GREATER expr .)
    PRINT           reduce using rule 38 (expr -> expr GREATER expr .)
    PRINTLN         reduce using rule 38 (expr -> expr GREATER expr .)
    WHILE           reduce using rule 38 (expr -> expr GREATER expr .)
    FOR             reduce using rule 38 (expr -> expr GREATER expr .)
    RETURN          reduce using rule 38 (expr -> expr GREATER expr .)
    RIGHT_BRACE     reduce using rule 38 (expr -> expr GREATER expr .)
    FN              reduce using rule 38 (expr -> expr GREATER expr .)
    $end            reduce using rule 38 (expr -> expr GREATER expr .)
    RIGHT_PAREN     reduce using rule 38 (expr -> expr GREATER expr .)
    COMMA           reduce using rule 38 (expr -> expr GREATER expr .)
    RIGHT_BRACKET   reduce using rule 38 (expr -> expr GREATER expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr GREATER expr .)
    ELSE            reduce using rule 38 (expr -> expr GREATER expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! STAR            [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! SLASH           [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! LESS            [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! GREATER         [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! BANG_EQUAL      [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! DOT             [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 38 (expr -> expr GREATER expr .) ]
  ! IF              [ reduce using rule 38 (expr -> expr GREATER expr .) ]


state 100

    (39) expr -> expr GREATER_EQUAL expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    NUMBER          reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    NIL             reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    STRING          reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    IDENTIFIER      reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    LEFT_BRACE      reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    LET             reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    PRINT           reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    PRINTLN         reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    WHILE           reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    FOR             reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    RETURN          reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    FN              reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    $end            reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    ELSE            reduce using rule 39 (expr -> expr GREATER_EQUAL expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! STAR            [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS            [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! DOT             [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]
  ! IF              [ reduce using rule 39 (expr -> expr GREATER_EQUAL expr .) ]


state 101

    (40) expr -> expr EQUAL_EQUAL expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    NUMBER          reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    NIL             reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    STRING          reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    IDENTIFIER      reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_BRACE      reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    LET             reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    PRINT           reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    PRINTLN         reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    WHILE           reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    FOR             reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    RETURN          reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    FN              reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    $end            reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    COMMA           reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    ELSE            reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! STAR            [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! LESS            [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! DOT             [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]
  ! IF              [ reduce using rule 40 (expr -> expr EQUAL_EQUAL expr .) ]


state 102

    (41) expr -> expr BANG_EQUAL expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    NUMBER          reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    NIL             reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    STRING          reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    IDENTIFIER      reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    LEFT_BRACE      reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    LET             reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    PRINT           reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    PRINTLN         reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    WHILE           reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    FOR             reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    RETURN          reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    FN              reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    $end            reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    COMMA           reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    ELSE            reduce using rule 41 (expr -> expr BANG_EQUAL expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! STAR            [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! LESS            [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! BANG_EQUAL      [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! DOT             [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]
  ! IF              [ reduce using rule 41 (expr -> expr BANG_EQUAL expr .) ]


state 103

    (47) expr -> expr DOT IDENTIFIER .
    (48) expr -> expr DOT IDENTIFIER . LEFT_PAREN expr_list_comma RIGHT_PAREN

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    PLUS            reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    MINUS           reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    STAR            reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    SLASH           reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    LESS            reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    LESS_EQUAL      reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    GREATER         reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    BANG_EQUAL      reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    DOT             reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    IF              reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    NUMBER          reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    NIL             reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    STRING          reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    LEFT_BRACE      reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    LET             reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    PRINT           reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    PRINTLN         reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    WHILE           reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    FOR             reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    RETURN          reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    FN              reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    $end            reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    COMMA           reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    ELSE            reduce using rule 47 (expr -> expr DOT IDENTIFIER .)
    LEFT_PAREN      shift and go to state 122

  ! LEFT_PAREN      [ reduce using rule 47 (expr -> expr DOT IDENTIFIER .) ]


state 104

    (49) expr -> expr LEFT_BRACKET expr . RIGHT_BRACKET
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 123
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 105

    (55) expr -> expr IF expr . ELSE expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    ELSE            shift and go to state 124
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 106

    (46) expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .

    PLUS            reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    MINUS           reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    STAR            reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    SLASH           reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS            reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER         reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    DOT             reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    IF              reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    NUMBER          reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    NIL             reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    STRING          reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACE      reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LET             reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    PRINT           reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    PRINTLN         reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    WHILE           reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    FOR             reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RETURN          reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    FN              reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    $end            reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    COMMA           reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    ELSE            reduce using rule 46 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)


state 107

    (51) expr_list_comma -> expr COMMA . expr_list_comma
    (51) expr_list_comma -> . expr COMMA expr_list_comma
    (52) expr_list_comma -> . expr
    (53) expr_list_comma -> . empty
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (65) empty -> .

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31
    RIGHT_BRACKET   reduce using rule 65 (empty -> .)
    RIGHT_PAREN     reduce using rule 65 (empty -> .)

    expr                           shift and go to state 77
    expr_list_comma                shift and go to state 125
    empty                          shift and go to state 78

state 108

    (28) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (29) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    expr                           shift and go to state 34
    stmt_list                      shift and go to state 126
    stmt                           shift and go to state 33
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 109

    (59) declaration -> LET IDENTIFIER EQUAL . expr SEMICOLON
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 127

state 110

    (61) declaration -> LET IDENTIFIER SEMICOLON .

    LEFT_PAREN      reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    NIL             reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    LET             reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    PRINTLN         reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    IF              reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 61 (declaration -> LET IDENTIFIER SEMICOLON .)


state 111

    (60) declaration -> LET MUT IDENTIFIER . EQUAL expr SEMICOLON
    (62) declaration -> LET MUT IDENTIFIER . SEMICOLON

    EQUAL           shift and go to state 128
    SEMICOLON       shift and go to state 129


state 112

    (30) print -> PRINT expr SEMICOLON .

    LEFT_PAREN      reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    NUMBER          reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    NIL             reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    STRING          reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    LET             reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    PRINT           reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    PRINTLN         reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    IF              reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    WHILE           reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    FOR             reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    RETURN          reduce using rule 30 (print -> PRINT expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 30 (print -> PRINT expr SEMICOLON .)


state 113

    (31) print -> PRINTLN expr SEMICOLON .

    LEFT_PAREN      reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    NUMBER          reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    NIL             reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    STRING          reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    LET             reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    PRINT           reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    PRINTLN         reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    IF              reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    WHILE           reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    FOR             reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    RETURN          reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 31 (print -> PRINTLN expr SEMICOLON .)


state 114

    (27) while -> WHILE expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    expr                           shift and go to state 34
    stmt_list                      shift and go to state 130
    stmt                           shift and go to state 33
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 115

    (25) for -> FOR IDENTIFIER IN . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 131

state 116

    (26) for -> FOR IDENTIFIER COMMA . IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 132


state 117

    (24) return -> RETURN expr SEMICOLON .

    LEFT_PAREN      reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    NIL             reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    LET             reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    PRINT           reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    PRINTLN         reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    IF              reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 24 (return -> RETURN expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (return -> RETURN expr SEMICOLON .)


state 118

    (50) expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .

    PLUS            reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    MINUS           reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STAR            reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SLASH           reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS            reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER         reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    DOT             reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IF              reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    NUMBER          reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    NIL             reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STRING          reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LET             reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PRINT           reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PRINTLN         reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    WHILE           reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FOR             reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RETURN          reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FN              reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    $end            reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    COMMA           reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SEMICOLON       reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    ELSE            reduce using rule 50 (expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)


state 119

    (63) assign -> IDENTIFIER EQUAL expr SEMICOLON .

    LEFT_PAREN      reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    FOR             reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 63 (assign -> IDENTIFIER EQUAL expr SEMICOLON .)


state 120

    (64) assign -> IDENTIFIER indexof_list EQUAL expr . SEMICOLON
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 133
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 121

    (57) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .
    (58) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET . indexof_list
    (57) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (58) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

    EQUAL           reduce using rule 57 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 58

    indexof_list                   shift and go to state 134

state 122

    (48) expr -> expr DOT IDENTIFIER LEFT_PAREN . expr_list_comma RIGHT_PAREN
    (51) expr_list_comma -> . expr COMMA expr_list_comma
    (52) expr_list_comma -> . expr
    (53) expr_list_comma -> . empty
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (65) empty -> .

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31
    RIGHT_PAREN     reduce using rule 65 (empty -> .)

    expr                           shift and go to state 77
    expr_list_comma                shift and go to state 135
    empty                          shift and go to state 78

state 123

    (49) expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .

    PLUS            reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    MINUS           reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    STAR            reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SLASH           reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS            reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER         reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    DOT             reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    IF              reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    NUMBER          reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    NIL             reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    STRING          reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACE      reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LET             reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    PRINT           reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    PRINTLN         reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    WHILE           reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    FOR             reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RETURN          reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    FN              reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    $end            reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    COMMA           reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    ELSE            reduce using rule 49 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)


state 124

    (55) expr -> expr IF expr ELSE . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 136

state 125

    (51) expr_list_comma -> expr COMMA expr_list_comma .

    RIGHT_BRACKET   reduce using rule 51 (expr_list_comma -> expr COMMA expr_list_comma .)
    RIGHT_PAREN     reduce using rule 51 (expr_list_comma -> expr COMMA expr_list_comma .)


state 126

    (28) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE
    (29) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 137


state 127

    (59) declaration -> LET IDENTIFIER EQUAL expr . SEMICOLON
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 138
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 128

    (60) declaration -> LET MUT IDENTIFIER EQUAL . expr SEMICOLON
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 139

state 129

    (62) declaration -> LET MUT IDENTIFIER SEMICOLON .

    LEFT_PAREN      reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    NIL             reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LET             reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    PRINTLN         reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    IF              reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 62 (declaration -> LET MUT IDENTIFIER SEMICOLON .)


state 130

    (27) while -> WHILE expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 140


state 131

    (25) for -> FOR IDENTIFIER IN expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 141
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 132

    (26) for -> FOR IDENTIFIER COMMA IDENTIFIER . IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IN              shift and go to state 142


state 133

    (64) assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .

    LEFT_PAREN      reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    NIL             reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    STRING          reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    LET             reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    IF              reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    FOR             reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 64 (assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON .)


state 134

    (58) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list .

    EQUAL           reduce using rule 58 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list .)


state 135

    (48) expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 143


state 136

    (55) expr -> expr IF expr ELSE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    LEFT_PAREN      reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    NUMBER          reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    NIL             reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    STRING          reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    IDENTIFIER      reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    LEFT_BRACE      reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    LET             reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    PRINT           reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    PRINTLN         reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    WHILE           reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    FOR             reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    RETURN          reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    RIGHT_BRACE     reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    FN              reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    $end            reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    RIGHT_PAREN     reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    COMMA           reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    RIGHT_BRACKET   reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    SEMICOLON       reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    ELSE            reduce using rule 55 (expr -> expr IF expr ELSE expr .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75

  ! PLUS            [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! STAR            [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! SLASH           [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! LESS            [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER         [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! BANG_EQUAL      [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! DOT             [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]
  ! IF              [ reduce using rule 55 (expr -> expr IF expr ELSE expr .) ]


state 137

    (28) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .
    (29) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE . ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            shift and go to state 144


state 138

    (59) declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .

    LEFT_PAREN      reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    FOR             reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 59 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)


state 139

    (60) declaration -> LET MUT IDENTIFIER EQUAL expr . SEMICOLON
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 145
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 140

    (27) while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .

    LEFT_PAREN      reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 27 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)


state 141

    (25) for -> FOR IDENTIFIER IN expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    expr                           shift and go to state 34
    stmt_list                      shift and go to state 146
    stmt                           shift and go to state 33
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 142

    (26) for -> FOR IDENTIFIER COMMA IDENTIFIER IN . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 53
    LEFT_BRACE      shift and go to state 31

    expr                           shift and go to state 147

state 143

    (48) expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .

    PLUS            reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    MINUS           reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STAR            reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SLASH           reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS            reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER         reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    DOT             reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IF              reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    NUMBER          reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    NIL             reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STRING          reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IDENTIFIER      reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LET             reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PRINT           reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PRINTLN         reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    WHILE           reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FOR             reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RETURN          reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FN              reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    $end            reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    COMMA           reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SEMICOLON       reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    ELSE            reduce using rule 48 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)


state 144

    (29) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 148


state 145

    (60) declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .

    LEFT_PAREN      reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    FOR             reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 60 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)


state 146

    (25) for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 149


state 147

    (26) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . STAR expr
    (35) expr -> expr . SLASH expr
    (36) expr -> expr . LESS expr
    (37) expr -> expr . LESS_EQUAL expr
    (38) expr -> expr . GREATER expr
    (39) expr -> expr . GREATER_EQUAL expr
    (40) expr -> expr . EQUAL_EQUAL expr
    (41) expr -> expr . BANG_EQUAL expr
    (47) expr -> expr . DOT IDENTIFIER
    (48) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (55) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 150
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    STAR            shift and go to state 65
    SLASH           shift and go to state 66
    LESS            shift and go to state 67
    LESS_EQUAL      shift and go to state 68
    GREATER         shift and go to state 69
    GREATER_EQUAL   shift and go to state 70
    EQUAL_EQUAL     shift and go to state 71
    BANG_EQUAL      shift and go to state 72
    DOT             shift and go to state 73
    LEFT_BRACKET    shift and go to state 74
    IF              shift and go to state 75


state 148

    (29) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    expr                           shift and go to state 34
    stmt_list                      shift and go to state 151
    stmt                           shift and go to state 33
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 149

    (25) for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .

    LEFT_PAREN      reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 25 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)


state 150

    (26) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr STAR expr
    (35) expr -> . expr SLASH expr
    (36) expr -> . expr LESS expr
    (37) expr -> . expr LESS_EQUAL expr
    (38) expr -> . expr GREATER expr
    (39) expr -> . expr GREATER_EQUAL expr
    (40) expr -> . expr EQUAL_EQUAL expr
    (41) expr -> . expr BANG_EQUAL expr
    (42) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (43) expr -> . NUMBER
    (44) expr -> . NIL
    (45) expr -> . STRING
    (46) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (47) expr -> . expr DOT IDENTIFIER
    (48) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (49) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (50) expr -> . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (54) expr -> . IDENTIFIER
    (55) expr -> . expr IF expr ELSE expr
    (56) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (59) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (60) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (61) declaration -> . LET IDENTIFIER SEMICOLON
    (62) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (63) assign -> . IDENTIFIER EQUAL expr SEMICOLON
    (64) assign -> . IDENTIFIER indexof_list EQUAL expr SEMICOLON
    (30) print -> . PRINT expr SEMICOLON
    (31) print -> . PRINTLN expr SEMICOLON
    (28) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (29) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (27) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (25) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (26) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (24) return -> . RETURN expr SEMICOLON

    LEFT_PAREN      shift and go to state 30
    NUMBER          shift and go to state 42
    NIL             shift and go to state 43
    STRING          shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    IDENTIFIER      shift and go to state 29
    LEFT_BRACE      shift and go to state 31
    LET             shift and go to state 47
    PRINT           shift and go to state 48
    PRINTLN         shift and go to state 49
    IF              shift and go to state 46
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    RETURN          shift and go to state 52

    expr                           shift and go to state 34
    stmt_list                      shift and go to state 152
    stmt                           shift and go to state 33
    declaration                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    condition                      shift and go to state 38
    while                          shift and go to state 39
    for                            shift and go to state 40
    return                         shift and go to state 41

state 151

    (29) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 153


state 152

    (26) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 154


state 153

    (29) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .

    LEFT_PAREN      reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 29 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)


state 154

    (26) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .

    LEFT_PAREN      reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 26 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PAREN in state 29 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 29 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for STAR in state 93 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 93 resolved as shift
WARNING: shift/reduce conflict for LESS in state 93 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for DOT in state 93 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for STAR in state 94 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for DOT in state 94 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for STAR in state 95 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for DOT in state 95 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for STAR in state 96 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for DOT in state 96 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for STAR in state 97 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for DOT in state 97 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for STAR in state 98 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for DOT in state 98 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for STAR in state 99 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for DOT in state 99 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for STAR in state 100 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for DOT in state 100 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for STAR in state 101 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for DOT in state 101 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for STAR in state 102 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for DOT in state 102 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for STAR in state 136 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS in state 136 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 136 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for DOT in state 136 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 136 resolved as shift
WARNING: shift/reduce conflict for IF in state 136 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (use_list -> use)
WARNING: rejected rule (empty -> <empty>) in state 3
