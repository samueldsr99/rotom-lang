Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BANG
    CLASS
    EOF
    FALSE
    SUPER
    THIS
    TRUE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> use_list type_def_list fn_def_list
Rule 2     use_list -> use use_list
Rule 3     use_list -> use
Rule 4     use_list -> empty
Rule 5     use -> USE STRING ARROW IDENTIFIER SEMICOLON
Rule 6     use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
Rule 7     fn_def_list -> fn_def fn_def_list
Rule 8     fn_def_list -> fn_def
Rule 9     fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
Rule 10    fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr
Rule 11    param_list -> IDENTIFIER COMMA param_list
Rule 12    param_list -> IDENTIFIER
Rule 13    param_list -> empty
Rule 14    stmt_list -> stmt stmt_list
Rule 15    stmt_list -> stmt
Rule 16    stmt -> expr SEMICOLON
Rule 17    stmt -> declaration
Rule 18    stmt -> assign
Rule 19    stmt -> print
Rule 20    stmt -> condition
Rule 21    stmt -> while
Rule 22    stmt -> for
Rule 23    stmt -> return
Rule 24    type_def_list -> type_def type_def_list
Rule 25    type_def_list -> type_def
Rule 26    type_def_list -> empty
Rule 27    type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE
Rule 28    prop_list -> prop COMMA prop_list
Rule 29    prop_list -> prop COMMA
Rule 30    prop_list -> prop
Rule 31    prop -> IDENTIFIER
Rule 32    prop -> IDENTIFIER QUESTION
Rule 33    return -> RETURN expr SEMICOLON
Rule 34    for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 35    for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 36    while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 37    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE
Rule 38    condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
Rule 39    print -> PRINT expr SEMICOLON
Rule 40    print -> PRINTLN expr SEMICOLON
Rule 41    expr -> NOT expr
Rule 42    expr -> expr PLUS expr
Rule 43    expr -> expr MINUS expr
Rule 44    expr -> expr STAR expr
Rule 45    expr -> expr SLASH expr
Rule 46    expr -> expr LESS expr
Rule 47    expr -> expr LESS_EQUAL expr
Rule 48    expr -> expr GREATER expr
Rule 49    expr -> expr GREATER_EQUAL expr
Rule 50    expr -> expr EQUAL_EQUAL expr
Rule 51    expr -> expr BANG_EQUAL expr
Rule 52    expr -> expr OR expr
Rule 53    expr -> expr AND expr
Rule 54    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 55    expr -> NUMBER
Rule 56    expr -> NIL
Rule 57    expr -> STRING
Rule 58    expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET
Rule 59    expr -> expr DOT IDENTIFIER
Rule 60    expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
Rule 61    expr -> expr LEFT_BRACKET expr RIGHT_BRACKET
Rule 62    expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
Rule 63    prop_assignment_list -> IDENTIFIER EQUAL expr COMMA prop_assignment_list
Rule 64    prop_assignment_list -> IDENTIFIER EQUAL expr COMMA
Rule 65    prop_assignment_list -> IDENTIFIER EQUAL expr
Rule 66    expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN
Rule 67    expr_list_comma -> expr COMMA expr_list_comma
Rule 68    expr_list_comma -> expr
Rule 69    expr_list_comma -> empty
Rule 70    expr -> IDENTIFIER
Rule 71    expr -> expr IF expr ELSE expr
Rule 72    expr -> LEFT_BRACE stmt_list RIGHT_BRACE
Rule 73    indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET
Rule 74    indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list
Rule 75    declaration -> LET IDENTIFIER EQUAL expr SEMICOLON
Rule 76    declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON
Rule 77    declaration -> LET IDENTIFIER SEMICOLON
Rule 78    declaration -> LET MUT IDENTIFIER SEMICOLON
Rule 79    assign -> expr EQUAL expr SEMICOLON
Rule 80    assign -> expr indexof_list EQUAL expr SEMICOLON
Rule 81    empty -> <empty>

Terminals, with rules where they appear

AND                  : 53
ARROW                : 5 6 10
BANG                 : 
BANG_EQUAL           : 51
CLASS                : 
COLON                : 62 62
COMMA                : 11 28 29 35 63 64 67
DOT                  : 59 60
ELSE                 : 38 71
EOF                  : 
EQUAL                : 63 64 65 75 76 79 80
EQUAL_EQUAL          : 50
FALSE                : 
FN                   : 9 10
FOR                  : 34 35
GREATER              : 48
GREATER_EQUAL        : 49
IDENTIFIER           : 5 9 10 11 12 27 31 32 34 35 35 59 60 62 63 64 65 70 75 76 77 78
IF                   : 37 38 71
IN                   : 34 35
LEFT_BRACE           : 9 27 34 35 36 37 38 38 62 72
LEFT_BRACKET         : 58 61 73 74
LEFT_PAREN           : 6 9 10 54 60 66
LESS                 : 46
LESS_EQUAL           : 47
LET                  : 75 76 77 78
MINUS                : 43
MUT                  : 76 78
NIL                  : 56
NOT                  : 41
NUMBER               : 55
OR                   : 52
PLUS                 : 42
PRINT                : 39
PRINTLN              : 40
QUESTION             : 32
RETURN               : 33
RIGHT_BRACE          : 9 27 34 35 36 37 38 38 62 72
RIGHT_BRACKET        : 58 61 73 74
RIGHT_PAREN          : 6 9 10 54 60 66
SEMICOLON            : 5 6 16 33 39 40 75 76 77 78 79 80
SLASH                : 45
STAR                 : 44
STRING               : 5 6 57
SUPER                : 
THIS                 : 
TRUE                 : 
TYPE                 : 27
USE                  : 5 6
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

assign               : 18
condition            : 20
declaration          : 17
empty                : 4 13 26 69
expr                 : 10 16 33 34 35 36 37 38 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 59 60 61 61 63 64 65 66 67 68 71 71 71 73 74 75 76 79 79 80 80
expr_list_comma      : 58 60 66 67
fn_def               : 7 8
fn_def_list          : 1 7
for                  : 22
indexof_list         : 74 80
param_list           : 6 9 10 11
print                : 19
prog                 : 0
prop                 : 28 29 30
prop_assignment_list : 62 63
prop_list            : 27 28
return               : 23
stmt                 : 14 15
stmt_list            : 9 14 34 35 36 37 38 38 72
type_def             : 24 25
type_def_list        : 1 24
use                  : 2 3
use_list             : 1 2
while                : 21

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . use_list type_def_list fn_def_list
    (2) use_list -> . use use_list
    (3) use_list -> . use
    (4) use_list -> . empty
    (5) use -> . USE STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> . USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
    (81) empty -> .

    USE             shift and go to state 5
    TYPE            reduce using rule 81 (empty -> .)
    FN              reduce using rule 81 (empty -> .)

    prog                           shift and go to state 1
    use_list                       shift and go to state 2
    use                            shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> prog .



state 2

    (1) prog -> use_list . type_def_list fn_def_list
    (24) type_def_list -> . type_def type_def_list
    (25) type_def_list -> . type_def
    (26) type_def_list -> . empty
    (27) type_def -> . TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE
    (81) empty -> .

    TYPE            shift and go to state 9
    FN              reduce using rule 81 (empty -> .)

    type_def_list                  shift and go to state 6
    type_def                       shift and go to state 7
    empty                          shift and go to state 8

state 3

    (2) use_list -> use . use_list
    (3) use_list -> use .
    (2) use_list -> . use use_list
    (3) use_list -> . use
    (4) use_list -> . empty
    (5) use -> . USE STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> . USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON
    (81) empty -> .

  ! reduce/reduce conflict for TYPE resolved using rule 3 (use_list -> use .)
  ! reduce/reduce conflict for FN resolved using rule 3 (use_list -> use .)
    TYPE            reduce using rule 3 (use_list -> use .)
    FN              reduce using rule 3 (use_list -> use .)
    USE             shift and go to state 5

  ! TYPE            [ reduce using rule 81 (empty -> .) ]
  ! FN              [ reduce using rule 81 (empty -> .) ]

    use                            shift and go to state 3
    use_list                       shift and go to state 10
    empty                          shift and go to state 4

state 4

    (4) use_list -> empty .

    TYPE            reduce using rule 4 (use_list -> empty .)
    FN              reduce using rule 4 (use_list -> empty .)


state 5

    (5) use -> USE . STRING ARROW IDENTIFIER SEMICOLON
    (6) use -> USE . STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    STRING          shift and go to state 11


state 6

    (1) prog -> use_list type_def_list . fn_def_list
    (7) fn_def_list -> . fn_def fn_def_list
    (8) fn_def_list -> . fn_def
    (9) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    FN              shift and go to state 14

    fn_def_list                    shift and go to state 12
    fn_def                         shift and go to state 13

state 7

    (24) type_def_list -> type_def . type_def_list
    (25) type_def_list -> type_def .
    (24) type_def_list -> . type_def type_def_list
    (25) type_def_list -> . type_def
    (26) type_def_list -> . empty
    (27) type_def -> . TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE
    (81) empty -> .

  ! reduce/reduce conflict for FN resolved using rule 25 (type_def_list -> type_def .)
    FN              reduce using rule 25 (type_def_list -> type_def .)
    TYPE            shift and go to state 9

  ! FN              [ reduce using rule 81 (empty -> .) ]

    type_def                       shift and go to state 7
    type_def_list                  shift and go to state 15
    empty                          shift and go to state 8

state 8

    (26) type_def_list -> empty .

    FN              reduce using rule 26 (type_def_list -> empty .)


state 9

    (27) type_def -> TYPE . IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 16


state 10

    (2) use_list -> use use_list .

    TYPE            reduce using rule 2 (use_list -> use use_list .)
    FN              reduce using rule 2 (use_list -> use use_list .)


state 11

    (5) use -> USE STRING . ARROW IDENTIFIER SEMICOLON
    (6) use -> USE STRING . ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    ARROW           shift and go to state 17


state 12

    (1) prog -> use_list type_def_list fn_def_list .

    $end            reduce using rule 1 (prog -> use_list type_def_list fn_def_list .)


state 13

    (7) fn_def_list -> fn_def . fn_def_list
    (8) fn_def_list -> fn_def .
    (7) fn_def_list -> . fn_def fn_def_list
    (8) fn_def_list -> . fn_def
    (9) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> . FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    $end            reduce using rule 8 (fn_def_list -> fn_def .)
    FN              shift and go to state 14

    fn_def                         shift and go to state 13
    fn_def_list                    shift and go to state 18

state 14

    (9) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN . IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    IDENTIFIER      shift and go to state 19


state 15

    (24) type_def_list -> type_def type_def_list .

    FN              reduce using rule 24 (type_def_list -> type_def type_def_list .)


state 16

    (27) type_def -> TYPE IDENTIFIER . LEFT_BRACE prop_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 20


state 17

    (5) use -> USE STRING ARROW . IDENTIFIER SEMICOLON
    (6) use -> USE STRING ARROW . LEFT_PAREN param_list RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 21
    LEFT_PAREN      shift and go to state 22


state 18

    (7) fn_def_list -> fn_def fn_def_list .

    $end            reduce using rule 7 (fn_def_list -> fn_def fn_def_list .)


state 19

    (9) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER . LEFT_PAREN param_list RIGHT_PAREN ARROW expr

    LEFT_PAREN      shift and go to state 23


state 20

    (27) type_def -> TYPE IDENTIFIER LEFT_BRACE . prop_list RIGHT_BRACE
    (28) prop_list -> . prop COMMA prop_list
    (29) prop_list -> . prop COMMA
    (30) prop_list -> . prop
    (31) prop -> . IDENTIFIER
    (32) prop -> . IDENTIFIER QUESTION

    IDENTIFIER      shift and go to state 24

    prop_list                      shift and go to state 25
    prop                           shift and go to state 26

state 21

    (5) use -> USE STRING ARROW IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 27


state 22

    (6) use -> USE STRING ARROW LEFT_PAREN . param_list RIGHT_PAREN SEMICOLON
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (81) empty -> .

    IDENTIFIER      shift and go to state 29
    RIGHT_PAREN     reduce using rule 81 (empty -> .)

    param_list                     shift and go to state 28
    empty                          shift and go to state 30

state 23

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN . param_list RIGHT_PAREN ARROW expr
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (81) empty -> .

    IDENTIFIER      shift and go to state 29
    RIGHT_PAREN     reduce using rule 81 (empty -> .)

    param_list                     shift and go to state 31
    empty                          shift and go to state 30

state 24

    (31) prop -> IDENTIFIER .
    (32) prop -> IDENTIFIER . QUESTION

    COMMA           reduce using rule 31 (prop -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 31 (prop -> IDENTIFIER .)
    QUESTION        shift and go to state 32


state 25

    (27) type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 33


state 26

    (28) prop_list -> prop . COMMA prop_list
    (29) prop_list -> prop . COMMA
    (30) prop_list -> prop .

    COMMA           shift and go to state 34
    RIGHT_BRACE     reduce using rule 30 (prop_list -> prop .)


state 27

    (5) use -> USE STRING ARROW IDENTIFIER SEMICOLON .

    USE             reduce using rule 5 (use -> USE STRING ARROW IDENTIFIER SEMICOLON .)
    TYPE            reduce using rule 5 (use -> USE STRING ARROW IDENTIFIER SEMICOLON .)
    FN              reduce using rule 5 (use -> USE STRING ARROW IDENTIFIER SEMICOLON .)


state 28

    (6) use -> USE STRING ARROW LEFT_PAREN param_list . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 35


state 29

    (11) param_list -> IDENTIFIER . COMMA param_list
    (12) param_list -> IDENTIFIER .

    COMMA           shift and go to state 36
    RIGHT_PAREN     reduce using rule 12 (param_list -> IDENTIFIER .)


state 30

    (13) param_list -> empty .

    RIGHT_PAREN     reduce using rule 13 (param_list -> empty .)


state 31

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list . RIGHT_PAREN ARROW expr

    RIGHT_PAREN     shift and go to state 37


state 32

    (32) prop -> IDENTIFIER QUESTION .

    COMMA           reduce using rule 32 (prop -> IDENTIFIER QUESTION .)
    RIGHT_BRACE     reduce using rule 32 (prop -> IDENTIFIER QUESTION .)


state 33

    (27) type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE .

    TYPE            reduce using rule 27 (type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE .)
    FN              reduce using rule 27 (type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE .)


state 34

    (28) prop_list -> prop COMMA . prop_list
    (29) prop_list -> prop COMMA .
    (28) prop_list -> . prop COMMA prop_list
    (29) prop_list -> . prop COMMA
    (30) prop_list -> . prop
    (31) prop -> . IDENTIFIER
    (32) prop -> . IDENTIFIER QUESTION

    RIGHT_BRACE     reduce using rule 29 (prop_list -> prop COMMA .)
    IDENTIFIER      shift and go to state 24

    prop                           shift and go to state 26
    prop_list                      shift and go to state 38

state 35

    (6) use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 39


state 36

    (11) param_list -> IDENTIFIER COMMA . param_list
    (11) param_list -> . IDENTIFIER COMMA param_list
    (12) param_list -> . IDENTIFIER
    (13) param_list -> . empty
    (81) empty -> .

    IDENTIFIER      shift and go to state 29
    RIGHT_PAREN     reduce using rule 81 (empty -> .)

    param_list                     shift and go to state 40
    empty                          shift and go to state 30

state 37

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . LEFT_BRACE stmt_list RIGHT_BRACE
    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN . ARROW expr

    LEFT_BRACE      shift and go to state 41
    ARROW           shift and go to state 42


state 38

    (28) prop_list -> prop COMMA prop_list .

    RIGHT_BRACE     reduce using rule 28 (prop_list -> prop COMMA prop_list .)


state 39

    (6) use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .

    USE             reduce using rule 6 (use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .)
    TYPE            reduce using rule 6 (use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .)
    FN              reduce using rule 6 (use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON .)


state 40

    (11) param_list -> IDENTIFIER COMMA param_list .

    RIGHT_PAREN     reduce using rule 11 (param_list -> IDENTIFIER COMMA param_list .)


state 41

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    stmt_list                      shift and go to state 46
    stmt                           shift and go to state 47
    expr                           shift and go to state 48
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 42

    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 68

state 43

    (62) expr -> IDENTIFIER . COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (70) expr -> IDENTIFIER .

    COLON           shift and go to state 69
    SEMICOLON       reduce using rule 70 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 70 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 70 (expr -> IDENTIFIER .)
    STAR            reduce using rule 70 (expr -> IDENTIFIER .)
    SLASH           reduce using rule 70 (expr -> IDENTIFIER .)
    LESS            reduce using rule 70 (expr -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 70 (expr -> IDENTIFIER .)
    GREATER         reduce using rule 70 (expr -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 70 (expr -> IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 70 (expr -> IDENTIFIER .)
    BANG_EQUAL      reduce using rule 70 (expr -> IDENTIFIER .)
    OR              reduce using rule 70 (expr -> IDENTIFIER .)
    AND             reduce using rule 70 (expr -> IDENTIFIER .)
    DOT             reduce using rule 70 (expr -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 70 (expr -> IDENTIFIER .)
    LEFT_PAREN      reduce using rule 70 (expr -> IDENTIFIER .)
    IF              reduce using rule 70 (expr -> IDENTIFIER .)
    EQUAL           reduce using rule 70 (expr -> IDENTIFIER .)
    FN              reduce using rule 70 (expr -> IDENTIFIER .)
    $end            reduce using rule 70 (expr -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 70 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 70 (expr -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 70 (expr -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 70 (expr -> IDENTIFIER .)
    ELSE            reduce using rule 70 (expr -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 70 (expr -> IDENTIFIER .)


state 44

    (54) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 70

state 45

    (72) expr -> LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    stmt_list                      shift and go to state 71
    stmt                           shift and go to state 47
    expr                           shift and go to state 48
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 46

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 72


state 47

    (14) stmt_list -> stmt . stmt_list
    (15) stmt_list -> stmt .
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    RIGHT_BRACE     reduce using rule 15 (stmt_list -> stmt .)
    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    stmt                           shift and go to state 47
    stmt_list                      shift and go to state 73
    expr                           shift and go to state 48
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 48

    (16) stmt -> expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr
    (79) assign -> expr . EQUAL expr SEMICOLON
    (80) assign -> expr . indexof_list EQUAL expr SEMICOLON
    (73) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (74) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

    SEMICOLON       shift and go to state 74
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 89
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90
    EQUAL           shift and go to state 91

    indexof_list                   shift and go to state 92

state 49

    (17) stmt -> declaration .

    NOT             reduce using rule 17 (stmt -> declaration .)
    LEFT_PAREN      reduce using rule 17 (stmt -> declaration .)
    NUMBER          reduce using rule 17 (stmt -> declaration .)
    NIL             reduce using rule 17 (stmt -> declaration .)
    STRING          reduce using rule 17 (stmt -> declaration .)
    LEFT_BRACKET    reduce using rule 17 (stmt -> declaration .)
    IDENTIFIER      reduce using rule 17 (stmt -> declaration .)
    LEFT_BRACE      reduce using rule 17 (stmt -> declaration .)
    LET             reduce using rule 17 (stmt -> declaration .)
    PRINT           reduce using rule 17 (stmt -> declaration .)
    PRINTLN         reduce using rule 17 (stmt -> declaration .)
    IF              reduce using rule 17 (stmt -> declaration .)
    WHILE           reduce using rule 17 (stmt -> declaration .)
    FOR             reduce using rule 17 (stmt -> declaration .)
    RETURN          reduce using rule 17 (stmt -> declaration .)
    RIGHT_BRACE     reduce using rule 17 (stmt -> declaration .)


state 50

    (18) stmt -> assign .

    NOT             reduce using rule 18 (stmt -> assign .)
    LEFT_PAREN      reduce using rule 18 (stmt -> assign .)
    NUMBER          reduce using rule 18 (stmt -> assign .)
    NIL             reduce using rule 18 (stmt -> assign .)
    STRING          reduce using rule 18 (stmt -> assign .)
    LEFT_BRACKET    reduce using rule 18 (stmt -> assign .)
    IDENTIFIER      reduce using rule 18 (stmt -> assign .)
    LEFT_BRACE      reduce using rule 18 (stmt -> assign .)
    LET             reduce using rule 18 (stmt -> assign .)
    PRINT           reduce using rule 18 (stmt -> assign .)
    PRINTLN         reduce using rule 18 (stmt -> assign .)
    IF              reduce using rule 18 (stmt -> assign .)
    WHILE           reduce using rule 18 (stmt -> assign .)
    FOR             reduce using rule 18 (stmt -> assign .)
    RETURN          reduce using rule 18 (stmt -> assign .)
    RIGHT_BRACE     reduce using rule 18 (stmt -> assign .)


state 51

    (19) stmt -> print .

    NOT             reduce using rule 19 (stmt -> print .)
    LEFT_PAREN      reduce using rule 19 (stmt -> print .)
    NUMBER          reduce using rule 19 (stmt -> print .)
    NIL             reduce using rule 19 (stmt -> print .)
    STRING          reduce using rule 19 (stmt -> print .)
    LEFT_BRACKET    reduce using rule 19 (stmt -> print .)
    IDENTIFIER      reduce using rule 19 (stmt -> print .)
    LEFT_BRACE      reduce using rule 19 (stmt -> print .)
    LET             reduce using rule 19 (stmt -> print .)
    PRINT           reduce using rule 19 (stmt -> print .)
    PRINTLN         reduce using rule 19 (stmt -> print .)
    IF              reduce using rule 19 (stmt -> print .)
    WHILE           reduce using rule 19 (stmt -> print .)
    FOR             reduce using rule 19 (stmt -> print .)
    RETURN          reduce using rule 19 (stmt -> print .)
    RIGHT_BRACE     reduce using rule 19 (stmt -> print .)


state 52

    (20) stmt -> condition .

    NOT             reduce using rule 20 (stmt -> condition .)
    LEFT_PAREN      reduce using rule 20 (stmt -> condition .)
    NUMBER          reduce using rule 20 (stmt -> condition .)
    NIL             reduce using rule 20 (stmt -> condition .)
    STRING          reduce using rule 20 (stmt -> condition .)
    LEFT_BRACKET    reduce using rule 20 (stmt -> condition .)
    IDENTIFIER      reduce using rule 20 (stmt -> condition .)
    LEFT_BRACE      reduce using rule 20 (stmt -> condition .)
    LET             reduce using rule 20 (stmt -> condition .)
    PRINT           reduce using rule 20 (stmt -> condition .)
    PRINTLN         reduce using rule 20 (stmt -> condition .)
    IF              reduce using rule 20 (stmt -> condition .)
    WHILE           reduce using rule 20 (stmt -> condition .)
    FOR             reduce using rule 20 (stmt -> condition .)
    RETURN          reduce using rule 20 (stmt -> condition .)
    RIGHT_BRACE     reduce using rule 20 (stmt -> condition .)


state 53

    (21) stmt -> while .

    NOT             reduce using rule 21 (stmt -> while .)
    LEFT_PAREN      reduce using rule 21 (stmt -> while .)
    NUMBER          reduce using rule 21 (stmt -> while .)
    NIL             reduce using rule 21 (stmt -> while .)
    STRING          reduce using rule 21 (stmt -> while .)
    LEFT_BRACKET    reduce using rule 21 (stmt -> while .)
    IDENTIFIER      reduce using rule 21 (stmt -> while .)
    LEFT_BRACE      reduce using rule 21 (stmt -> while .)
    LET             reduce using rule 21 (stmt -> while .)
    PRINT           reduce using rule 21 (stmt -> while .)
    PRINTLN         reduce using rule 21 (stmt -> while .)
    IF              reduce using rule 21 (stmt -> while .)
    WHILE           reduce using rule 21 (stmt -> while .)
    FOR             reduce using rule 21 (stmt -> while .)
    RETURN          reduce using rule 21 (stmt -> while .)
    RIGHT_BRACE     reduce using rule 21 (stmt -> while .)


state 54

    (22) stmt -> for .

    NOT             reduce using rule 22 (stmt -> for .)
    LEFT_PAREN      reduce using rule 22 (stmt -> for .)
    NUMBER          reduce using rule 22 (stmt -> for .)
    NIL             reduce using rule 22 (stmt -> for .)
    STRING          reduce using rule 22 (stmt -> for .)
    LEFT_BRACKET    reduce using rule 22 (stmt -> for .)
    IDENTIFIER      reduce using rule 22 (stmt -> for .)
    LEFT_BRACE      reduce using rule 22 (stmt -> for .)
    LET             reduce using rule 22 (stmt -> for .)
    PRINT           reduce using rule 22 (stmt -> for .)
    PRINTLN         reduce using rule 22 (stmt -> for .)
    IF              reduce using rule 22 (stmt -> for .)
    WHILE           reduce using rule 22 (stmt -> for .)
    FOR             reduce using rule 22 (stmt -> for .)
    RETURN          reduce using rule 22 (stmt -> for .)
    RIGHT_BRACE     reduce using rule 22 (stmt -> for .)


state 55

    (23) stmt -> return .

    NOT             reduce using rule 23 (stmt -> return .)
    LEFT_PAREN      reduce using rule 23 (stmt -> return .)
    NUMBER          reduce using rule 23 (stmt -> return .)
    NIL             reduce using rule 23 (stmt -> return .)
    STRING          reduce using rule 23 (stmt -> return .)
    LEFT_BRACKET    reduce using rule 23 (stmt -> return .)
    IDENTIFIER      reduce using rule 23 (stmt -> return .)
    LEFT_BRACE      reduce using rule 23 (stmt -> return .)
    LET             reduce using rule 23 (stmt -> return .)
    PRINT           reduce using rule 23 (stmt -> return .)
    PRINTLN         reduce using rule 23 (stmt -> return .)
    IF              reduce using rule 23 (stmt -> return .)
    WHILE           reduce using rule 23 (stmt -> return .)
    FOR             reduce using rule 23 (stmt -> return .)
    RETURN          reduce using rule 23 (stmt -> return .)
    RIGHT_BRACE     reduce using rule 23 (stmt -> return .)


state 56

    (41) expr -> NOT . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 93

state 57

    (55) expr -> NUMBER .

    SEMICOLON       reduce using rule 55 (expr -> NUMBER .)
    PLUS            reduce using rule 55 (expr -> NUMBER .)
    MINUS           reduce using rule 55 (expr -> NUMBER .)
    STAR            reduce using rule 55 (expr -> NUMBER .)
    SLASH           reduce using rule 55 (expr -> NUMBER .)
    LESS            reduce using rule 55 (expr -> NUMBER .)
    LESS_EQUAL      reduce using rule 55 (expr -> NUMBER .)
    GREATER         reduce using rule 55 (expr -> NUMBER .)
    GREATER_EQUAL   reduce using rule 55 (expr -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 55 (expr -> NUMBER .)
    BANG_EQUAL      reduce using rule 55 (expr -> NUMBER .)
    OR              reduce using rule 55 (expr -> NUMBER .)
    AND             reduce using rule 55 (expr -> NUMBER .)
    DOT             reduce using rule 55 (expr -> NUMBER .)
    LEFT_BRACKET    reduce using rule 55 (expr -> NUMBER .)
    LEFT_PAREN      reduce using rule 55 (expr -> NUMBER .)
    IF              reduce using rule 55 (expr -> NUMBER .)
    EQUAL           reduce using rule 55 (expr -> NUMBER .)
    FN              reduce using rule 55 (expr -> NUMBER .)
    $end            reduce using rule 55 (expr -> NUMBER .)
    RIGHT_PAREN     reduce using rule 55 (expr -> NUMBER .)
    COMMA           reduce using rule 55 (expr -> NUMBER .)
    RIGHT_BRACKET   reduce using rule 55 (expr -> NUMBER .)
    LEFT_BRACE      reduce using rule 55 (expr -> NUMBER .)
    ELSE            reduce using rule 55 (expr -> NUMBER .)
    RIGHT_BRACE     reduce using rule 55 (expr -> NUMBER .)


state 58

    (56) expr -> NIL .

    SEMICOLON       reduce using rule 56 (expr -> NIL .)
    PLUS            reduce using rule 56 (expr -> NIL .)
    MINUS           reduce using rule 56 (expr -> NIL .)
    STAR            reduce using rule 56 (expr -> NIL .)
    SLASH           reduce using rule 56 (expr -> NIL .)
    LESS            reduce using rule 56 (expr -> NIL .)
    LESS_EQUAL      reduce using rule 56 (expr -> NIL .)
    GREATER         reduce using rule 56 (expr -> NIL .)
    GREATER_EQUAL   reduce using rule 56 (expr -> NIL .)
    EQUAL_EQUAL     reduce using rule 56 (expr -> NIL .)
    BANG_EQUAL      reduce using rule 56 (expr -> NIL .)
    OR              reduce using rule 56 (expr -> NIL .)
    AND             reduce using rule 56 (expr -> NIL .)
    DOT             reduce using rule 56 (expr -> NIL .)
    LEFT_BRACKET    reduce using rule 56 (expr -> NIL .)
    LEFT_PAREN      reduce using rule 56 (expr -> NIL .)
    IF              reduce using rule 56 (expr -> NIL .)
    EQUAL           reduce using rule 56 (expr -> NIL .)
    FN              reduce using rule 56 (expr -> NIL .)
    $end            reduce using rule 56 (expr -> NIL .)
    RIGHT_PAREN     reduce using rule 56 (expr -> NIL .)
    COMMA           reduce using rule 56 (expr -> NIL .)
    RIGHT_BRACKET   reduce using rule 56 (expr -> NIL .)
    LEFT_BRACE      reduce using rule 56 (expr -> NIL .)
    ELSE            reduce using rule 56 (expr -> NIL .)
    RIGHT_BRACE     reduce using rule 56 (expr -> NIL .)


state 59

    (57) expr -> STRING .

    SEMICOLON       reduce using rule 57 (expr -> STRING .)
    PLUS            reduce using rule 57 (expr -> STRING .)
    MINUS           reduce using rule 57 (expr -> STRING .)
    STAR            reduce using rule 57 (expr -> STRING .)
    SLASH           reduce using rule 57 (expr -> STRING .)
    LESS            reduce using rule 57 (expr -> STRING .)
    LESS_EQUAL      reduce using rule 57 (expr -> STRING .)
    GREATER         reduce using rule 57 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 57 (expr -> STRING .)
    EQUAL_EQUAL     reduce using rule 57 (expr -> STRING .)
    BANG_EQUAL      reduce using rule 57 (expr -> STRING .)
    OR              reduce using rule 57 (expr -> STRING .)
    AND             reduce using rule 57 (expr -> STRING .)
    DOT             reduce using rule 57 (expr -> STRING .)
    LEFT_BRACKET    reduce using rule 57 (expr -> STRING .)
    LEFT_PAREN      reduce using rule 57 (expr -> STRING .)
    IF              reduce using rule 57 (expr -> STRING .)
    EQUAL           reduce using rule 57 (expr -> STRING .)
    FN              reduce using rule 57 (expr -> STRING .)
    $end            reduce using rule 57 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 57 (expr -> STRING .)
    COMMA           reduce using rule 57 (expr -> STRING .)
    RIGHT_BRACKET   reduce using rule 57 (expr -> STRING .)
    LEFT_BRACE      reduce using rule 57 (expr -> STRING .)
    ELSE            reduce using rule 57 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 57 (expr -> STRING .)


state 60

    (58) expr -> LEFT_BRACKET . expr_list_comma RIGHT_BRACKET
    (67) expr_list_comma -> . expr COMMA expr_list_comma
    (68) expr_list_comma -> . expr
    (69) expr_list_comma -> . empty
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (81) empty -> .

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    RIGHT_BRACKET   reduce using rule 81 (empty -> .)

    expr_list_comma                shift and go to state 94
    expr                           shift and go to state 95
    empty                          shift and go to state 96

state 61

    (37) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> IF . expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 97

state 62

    (75) declaration -> LET . IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> LET . MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> LET . IDENTIFIER SEMICOLON
    (78) declaration -> LET . MUT IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 98
    MUT             shift and go to state 99


state 63

    (39) print -> PRINT . expr SEMICOLON
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 100

state 64

    (40) print -> PRINTLN . expr SEMICOLON
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 101

state 65

    (36) while -> WHILE . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 102

state 66

    (34) for -> FOR . IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> FOR . IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 103


state 67

    (33) return -> RETURN . expr SEMICOLON
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 104

state 68

    (10) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    FN              reduce using rule 10 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    $end            reduce using rule 10 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 69

    (62) expr -> IDENTIFIER COLON . COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE

    COLON           shift and go to state 106


state 70

    (54) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    RIGHT_PAREN     shift and go to state 107
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 71

    (72) expr -> LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 108


state 72

    (9) fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .

    FN              reduce using rule 9 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 9 (fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE .)


state 73

    (14) stmt_list -> stmt stmt_list .

    RIGHT_BRACE     reduce using rule 14 (stmt_list -> stmt stmt_list .)


state 74

    (16) stmt -> expr SEMICOLON .

    NOT             reduce using rule 16 (stmt -> expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 16 (stmt -> expr SEMICOLON .)
    NUMBER          reduce using rule 16 (stmt -> expr SEMICOLON .)
    NIL             reduce using rule 16 (stmt -> expr SEMICOLON .)
    STRING          reduce using rule 16 (stmt -> expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 16 (stmt -> expr SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (stmt -> expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 16 (stmt -> expr SEMICOLON .)
    LET             reduce using rule 16 (stmt -> expr SEMICOLON .)
    PRINT           reduce using rule 16 (stmt -> expr SEMICOLON .)
    PRINTLN         reduce using rule 16 (stmt -> expr SEMICOLON .)
    IF              reduce using rule 16 (stmt -> expr SEMICOLON .)
    WHILE           reduce using rule 16 (stmt -> expr SEMICOLON .)
    FOR             reduce using rule 16 (stmt -> expr SEMICOLON .)
    RETURN          reduce using rule 16 (stmt -> expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 16 (stmt -> expr SEMICOLON .)


state 75

    (42) expr -> expr PLUS . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 109

state 76

    (43) expr -> expr MINUS . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 110

state 77

    (44) expr -> expr STAR . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 111

state 78

    (45) expr -> expr SLASH . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 112

state 79

    (46) expr -> expr LESS . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 113

state 80

    (47) expr -> expr LESS_EQUAL . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 114

state 81

    (48) expr -> expr GREATER . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 115

state 82

    (49) expr -> expr GREATER_EQUAL . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 116

state 83

    (50) expr -> expr EQUAL_EQUAL . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 117

state 84

    (51) expr -> expr BANG_EQUAL . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 118

state 85

    (52) expr -> expr OR . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 119

state 86

    (53) expr -> expr AND . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 120

state 87

    (59) expr -> expr DOT . IDENTIFIER
    (60) expr -> expr DOT . IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN

    IDENTIFIER      shift and go to state 121


state 88

    (66) expr -> expr LEFT_PAREN . expr_list_comma RIGHT_PAREN
    (67) expr_list_comma -> . expr COMMA expr_list_comma
    (68) expr_list_comma -> . expr
    (69) expr_list_comma -> . empty
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (81) empty -> .

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    RIGHT_PAREN     reduce using rule 81 (empty -> .)

    expr                           shift and go to state 95
    expr_list_comma                shift and go to state 122
    empty                          shift and go to state 96

state 89

    (61) expr -> expr LEFT_BRACKET . expr RIGHT_BRACKET
    (73) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET
    (74) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET indexof_list
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 123

state 90

    (71) expr -> expr IF . expr ELSE expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 124

state 91

    (79) assign -> expr EQUAL . expr SEMICOLON
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 125

state 92

    (80) assign -> expr indexof_list . EQUAL expr SEMICOLON

    EQUAL           shift and go to state 126


state 93

    (41) expr -> NOT expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 41 (expr -> NOT expr .)
    DOT             reduce using rule 41 (expr -> NOT expr .)
    LEFT_BRACKET    reduce using rule 41 (expr -> NOT expr .)
    LEFT_PAREN      reduce using rule 41 (expr -> NOT expr .)
    IF              reduce using rule 41 (expr -> NOT expr .)
    EQUAL           reduce using rule 41 (expr -> NOT expr .)
    FN              reduce using rule 41 (expr -> NOT expr .)
    $end            reduce using rule 41 (expr -> NOT expr .)
    RIGHT_PAREN     reduce using rule 41 (expr -> NOT expr .)
    COMMA           reduce using rule 41 (expr -> NOT expr .)
    RIGHT_BRACKET   reduce using rule 41 (expr -> NOT expr .)
    LEFT_BRACE      reduce using rule 41 (expr -> NOT expr .)
    ELSE            reduce using rule 41 (expr -> NOT expr .)
    RIGHT_BRACE     reduce using rule 41 (expr -> NOT expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86

  ! PLUS            [ reduce using rule 41 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> NOT expr .) ]
  ! STAR            [ reduce using rule 41 (expr -> NOT expr .) ]
  ! SLASH           [ reduce using rule 41 (expr -> NOT expr .) ]
  ! LESS            [ reduce using rule 41 (expr -> NOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 41 (expr -> NOT expr .) ]
  ! GREATER         [ reduce using rule 41 (expr -> NOT expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 41 (expr -> NOT expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 41 (expr -> NOT expr .) ]
  ! BANG_EQUAL      [ reduce using rule 41 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 41 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 41 (expr -> NOT expr .) ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 94

    (58) expr -> LEFT_BRACKET expr_list_comma . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 127


state 95

    (67) expr_list_comma -> expr . COMMA expr_list_comma
    (68) expr_list_comma -> expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    COMMA           shift and go to state 128
    RIGHT_BRACKET   reduce using rule 68 (expr_list_comma -> expr .)
    RIGHT_PAREN     reduce using rule 68 (expr_list_comma -> expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 96

    (69) expr_list_comma -> empty .

    RIGHT_BRACKET   reduce using rule 69 (expr_list_comma -> empty .)
    RIGHT_PAREN     reduce using rule 69 (expr_list_comma -> empty .)


state 97

    (37) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> IF expr . LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 129
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 98

    (75) declaration -> LET IDENTIFIER . EQUAL expr SEMICOLON
    (77) declaration -> LET IDENTIFIER . SEMICOLON

    EQUAL           shift and go to state 130
    SEMICOLON       shift and go to state 131


state 99

    (76) declaration -> LET MUT . IDENTIFIER EQUAL expr SEMICOLON
    (78) declaration -> LET MUT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 132


state 100

    (39) print -> PRINT expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 133
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 101

    (40) print -> PRINTLN expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 134
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 102

    (36) while -> WHILE expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 135
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 103

    (34) for -> FOR IDENTIFIER . IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> FOR IDENTIFIER . COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IN              shift and go to state 136
    COMMA           shift and go to state 137


state 104

    (33) return -> RETURN expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 138
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 105

    (61) expr -> expr LEFT_BRACKET . expr RIGHT_BRACKET
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 139

state 106

    (62) expr -> IDENTIFIER COLON COLON . LEFT_BRACE prop_assignment_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 140


state 107

    (54) expr -> LEFT_PAREN expr RIGHT_PAREN .

    SEMICOLON       reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    PLUS            reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    STAR            reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SLASH           reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS            reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER         reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    DOT             reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUAL           reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    FN              reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    ELSE            reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 54 (expr -> LEFT_PAREN expr RIGHT_PAREN .)


state 108

    (72) expr -> LEFT_BRACE stmt_list RIGHT_BRACE .

    SEMICOLON       reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    PLUS            reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    MINUS           reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    STAR            reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    SLASH           reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS            reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LESS_EQUAL      reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER         reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    GREATER_EQUAL   reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    EQUAL_EQUAL     reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    BANG_EQUAL      reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    OR              reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    AND             reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    DOT             reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    EQUAL           reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    FN              reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    $end            reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    COMMA           reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 72 (expr -> LEFT_BRACE stmt_list RIGHT_BRACE .)


state 109

    (42) expr -> expr PLUS expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 42 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 42 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 42 (expr -> expr PLUS expr .)
    STAR            reduce using rule 42 (expr -> expr PLUS expr .)
    SLASH           reduce using rule 42 (expr -> expr PLUS expr .)
    LESS            reduce using rule 42 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 42 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 42 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 42 (expr -> expr PLUS expr .)
    EQUAL_EQUAL     reduce using rule 42 (expr -> expr PLUS expr .)
    BANG_EQUAL      reduce using rule 42 (expr -> expr PLUS expr .)
    OR              reduce using rule 42 (expr -> expr PLUS expr .)
    AND             reduce using rule 42 (expr -> expr PLUS expr .)
    DOT             reduce using rule 42 (expr -> expr PLUS expr .)
    LEFT_BRACKET    reduce using rule 42 (expr -> expr PLUS expr .)
    LEFT_PAREN      reduce using rule 42 (expr -> expr PLUS expr .)
    IF              reduce using rule 42 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 42 (expr -> expr PLUS expr .)
    FN              reduce using rule 42 (expr -> expr PLUS expr .)
    $end            reduce using rule 42 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 42 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 42 (expr -> expr PLUS expr .)
    RIGHT_BRACKET   reduce using rule 42 (expr -> expr PLUS expr .)
    LEFT_BRACE      reduce using rule 42 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 42 (expr -> expr PLUS expr .)
    RIGHT_BRACE     reduce using rule 42 (expr -> expr PLUS expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! STAR            [ shift and go to state 77 ]
  ! SLASH           [ shift and go to state 78 ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 110

    (43) expr -> expr MINUS expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 43 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 43 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 43 (expr -> expr MINUS expr .)
    STAR            reduce using rule 43 (expr -> expr MINUS expr .)
    SLASH           reduce using rule 43 (expr -> expr MINUS expr .)
    LESS            reduce using rule 43 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 43 (expr -> expr MINUS expr .)
    GREATER         reduce using rule 43 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 43 (expr -> expr MINUS expr .)
    EQUAL_EQUAL     reduce using rule 43 (expr -> expr MINUS expr .)
    BANG_EQUAL      reduce using rule 43 (expr -> expr MINUS expr .)
    OR              reduce using rule 43 (expr -> expr MINUS expr .)
    AND             reduce using rule 43 (expr -> expr MINUS expr .)
    DOT             reduce using rule 43 (expr -> expr MINUS expr .)
    LEFT_BRACKET    reduce using rule 43 (expr -> expr MINUS expr .)
    LEFT_PAREN      reduce using rule 43 (expr -> expr MINUS expr .)
    IF              reduce using rule 43 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 43 (expr -> expr MINUS expr .)
    FN              reduce using rule 43 (expr -> expr MINUS expr .)
    $end            reduce using rule 43 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 43 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 43 (expr -> expr MINUS expr .)
    RIGHT_BRACKET   reduce using rule 43 (expr -> expr MINUS expr .)
    LEFT_BRACE      reduce using rule 43 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 43 (expr -> expr MINUS expr .)
    RIGHT_BRACE     reduce using rule 43 (expr -> expr MINUS expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! STAR            [ shift and go to state 77 ]
  ! SLASH           [ shift and go to state 78 ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 111

    (44) expr -> expr STAR expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 44 (expr -> expr STAR expr .)
    PLUS            reduce using rule 44 (expr -> expr STAR expr .)
    MINUS           reduce using rule 44 (expr -> expr STAR expr .)
    STAR            reduce using rule 44 (expr -> expr STAR expr .)
    SLASH           reduce using rule 44 (expr -> expr STAR expr .)
    LESS            reduce using rule 44 (expr -> expr STAR expr .)
    LESS_EQUAL      reduce using rule 44 (expr -> expr STAR expr .)
    GREATER         reduce using rule 44 (expr -> expr STAR expr .)
    GREATER_EQUAL   reduce using rule 44 (expr -> expr STAR expr .)
    EQUAL_EQUAL     reduce using rule 44 (expr -> expr STAR expr .)
    BANG_EQUAL      reduce using rule 44 (expr -> expr STAR expr .)
    OR              reduce using rule 44 (expr -> expr STAR expr .)
    AND             reduce using rule 44 (expr -> expr STAR expr .)
    DOT             reduce using rule 44 (expr -> expr STAR expr .)
    LEFT_BRACKET    reduce using rule 44 (expr -> expr STAR expr .)
    LEFT_PAREN      reduce using rule 44 (expr -> expr STAR expr .)
    IF              reduce using rule 44 (expr -> expr STAR expr .)
    EQUAL           reduce using rule 44 (expr -> expr STAR expr .)
    FN              reduce using rule 44 (expr -> expr STAR expr .)
    $end            reduce using rule 44 (expr -> expr STAR expr .)
    RIGHT_PAREN     reduce using rule 44 (expr -> expr STAR expr .)
    COMMA           reduce using rule 44 (expr -> expr STAR expr .)
    RIGHT_BRACKET   reduce using rule 44 (expr -> expr STAR expr .)
    LEFT_BRACE      reduce using rule 44 (expr -> expr STAR expr .)
    ELSE            reduce using rule 44 (expr -> expr STAR expr .)
    RIGHT_BRACE     reduce using rule 44 (expr -> expr STAR expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! STAR            [ shift and go to state 77 ]
  ! SLASH           [ shift and go to state 78 ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 112

    (45) expr -> expr SLASH expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 45 (expr -> expr SLASH expr .)
    PLUS            reduce using rule 45 (expr -> expr SLASH expr .)
    MINUS           reduce using rule 45 (expr -> expr SLASH expr .)
    STAR            reduce using rule 45 (expr -> expr SLASH expr .)
    SLASH           reduce using rule 45 (expr -> expr SLASH expr .)
    LESS            reduce using rule 45 (expr -> expr SLASH expr .)
    LESS_EQUAL      reduce using rule 45 (expr -> expr SLASH expr .)
    GREATER         reduce using rule 45 (expr -> expr SLASH expr .)
    GREATER_EQUAL   reduce using rule 45 (expr -> expr SLASH expr .)
    EQUAL_EQUAL     reduce using rule 45 (expr -> expr SLASH expr .)
    BANG_EQUAL      reduce using rule 45 (expr -> expr SLASH expr .)
    OR              reduce using rule 45 (expr -> expr SLASH expr .)
    AND             reduce using rule 45 (expr -> expr SLASH expr .)
    DOT             reduce using rule 45 (expr -> expr SLASH expr .)
    LEFT_BRACKET    reduce using rule 45 (expr -> expr SLASH expr .)
    LEFT_PAREN      reduce using rule 45 (expr -> expr SLASH expr .)
    IF              reduce using rule 45 (expr -> expr SLASH expr .)
    EQUAL           reduce using rule 45 (expr -> expr SLASH expr .)
    FN              reduce using rule 45 (expr -> expr SLASH expr .)
    $end            reduce using rule 45 (expr -> expr SLASH expr .)
    RIGHT_PAREN     reduce using rule 45 (expr -> expr SLASH expr .)
    COMMA           reduce using rule 45 (expr -> expr SLASH expr .)
    RIGHT_BRACKET   reduce using rule 45 (expr -> expr SLASH expr .)
    LEFT_BRACE      reduce using rule 45 (expr -> expr SLASH expr .)
    ELSE            reduce using rule 45 (expr -> expr SLASH expr .)
    RIGHT_BRACE     reduce using rule 45 (expr -> expr SLASH expr .)

  ! PLUS            [ shift and go to state 75 ]
  ! MINUS           [ shift and go to state 76 ]
  ! STAR            [ shift and go to state 77 ]
  ! SLASH           [ shift and go to state 78 ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 113

    (46) expr -> expr LESS expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 46 (expr -> expr LESS expr .)
    LESS            reduce using rule 46 (expr -> expr LESS expr .)
    LESS_EQUAL      reduce using rule 46 (expr -> expr LESS expr .)
    GREATER         reduce using rule 46 (expr -> expr LESS expr .)
    GREATER_EQUAL   reduce using rule 46 (expr -> expr LESS expr .)
    EQUAL_EQUAL     reduce using rule 46 (expr -> expr LESS expr .)
    BANG_EQUAL      reduce using rule 46 (expr -> expr LESS expr .)
    OR              reduce using rule 46 (expr -> expr LESS expr .)
    AND             reduce using rule 46 (expr -> expr LESS expr .)
    DOT             reduce using rule 46 (expr -> expr LESS expr .)
    LEFT_BRACKET    reduce using rule 46 (expr -> expr LESS expr .)
    LEFT_PAREN      reduce using rule 46 (expr -> expr LESS expr .)
    IF              reduce using rule 46 (expr -> expr LESS expr .)
    EQUAL           reduce using rule 46 (expr -> expr LESS expr .)
    FN              reduce using rule 46 (expr -> expr LESS expr .)
    $end            reduce using rule 46 (expr -> expr LESS expr .)
    RIGHT_PAREN     reduce using rule 46 (expr -> expr LESS expr .)
    COMMA           reduce using rule 46 (expr -> expr LESS expr .)
    RIGHT_BRACKET   reduce using rule 46 (expr -> expr LESS expr .)
    LEFT_BRACE      reduce using rule 46 (expr -> expr LESS expr .)
    ELSE            reduce using rule 46 (expr -> expr LESS expr .)
    RIGHT_BRACE     reduce using rule 46 (expr -> expr LESS expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 46 (expr -> expr LESS expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr LESS expr .) ]
  ! STAR            [ reduce using rule 46 (expr -> expr LESS expr .) ]
  ! SLASH           [ reduce using rule 46 (expr -> expr LESS expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 114

    (47) expr -> expr LESS_EQUAL expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    LESS            reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    GREATER         reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    BANG_EQUAL      reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    OR              reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    DOT             reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    LEFT_PAREN      reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    IF              reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    EQUAL           reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    FN              reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    $end            reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    LEFT_BRACE      reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    ELSE            reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 47 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 47 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr LESS_EQUAL expr .) ]
  ! STAR            [ reduce using rule 47 (expr -> expr LESS_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 47 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 115

    (48) expr -> expr GREATER expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 48 (expr -> expr GREATER expr .)
    LESS            reduce using rule 48 (expr -> expr GREATER expr .)
    LESS_EQUAL      reduce using rule 48 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 48 (expr -> expr GREATER expr .)
    GREATER_EQUAL   reduce using rule 48 (expr -> expr GREATER expr .)
    EQUAL_EQUAL     reduce using rule 48 (expr -> expr GREATER expr .)
    BANG_EQUAL      reduce using rule 48 (expr -> expr GREATER expr .)
    OR              reduce using rule 48 (expr -> expr GREATER expr .)
    AND             reduce using rule 48 (expr -> expr GREATER expr .)
    DOT             reduce using rule 48 (expr -> expr GREATER expr .)
    LEFT_BRACKET    reduce using rule 48 (expr -> expr GREATER expr .)
    LEFT_PAREN      reduce using rule 48 (expr -> expr GREATER expr .)
    IF              reduce using rule 48 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 48 (expr -> expr GREATER expr .)
    FN              reduce using rule 48 (expr -> expr GREATER expr .)
    $end            reduce using rule 48 (expr -> expr GREATER expr .)
    RIGHT_PAREN     reduce using rule 48 (expr -> expr GREATER expr .)
    COMMA           reduce using rule 48 (expr -> expr GREATER expr .)
    RIGHT_BRACKET   reduce using rule 48 (expr -> expr GREATER expr .)
    LEFT_BRACE      reduce using rule 48 (expr -> expr GREATER expr .)
    ELSE            reduce using rule 48 (expr -> expr GREATER expr .)
    RIGHT_BRACE     reduce using rule 48 (expr -> expr GREATER expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 48 (expr -> expr GREATER expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr GREATER expr .) ]
  ! STAR            [ reduce using rule 48 (expr -> expr GREATER expr .) ]
  ! SLASH           [ reduce using rule 48 (expr -> expr GREATER expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 116

    (49) expr -> expr GREATER_EQUAL expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    LESS            reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    LESS_EQUAL      reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    GREATER         reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    BANG_EQUAL      reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    DOT             reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    LEFT_PAREN      reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    IF              reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    EQUAL           reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    FN              reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    $end            reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    LEFT_BRACE      reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    ELSE            reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 49 (expr -> expr GREATER_EQUAL expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 49 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr GREATER_EQUAL expr .) ]
  ! STAR            [ reduce using rule 49 (expr -> expr GREATER_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 49 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 117

    (50) expr -> expr EQUAL_EQUAL expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    LESS            reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    LESS_EQUAL      reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    GREATER         reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    BANG_EQUAL      reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    OR              reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    AND             reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    DOT             reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_PAREN      reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    IF              reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    EQUAL           reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    FN              reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    $end            reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    COMMA           reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    LEFT_BRACE      reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    ELSE            reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .) ]
  ! STAR            [ reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 50 (expr -> expr EQUAL_EQUAL expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 118

    (51) expr -> expr BANG_EQUAL expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    LESS            reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    LESS_EQUAL      reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    GREATER         reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    EQUAL_EQUAL     reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    BANG_EQUAL      reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    OR              reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    AND             reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    DOT             reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    LEFT_BRACKET    reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    LEFT_PAREN      reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    IF              reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    EQUAL           reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    FN              reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    $end            reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    COMMA           reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    RIGHT_BRACKET   reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    LEFT_BRACE      reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    ELSE            reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 51 (expr -> expr BANG_EQUAL expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 51 (expr -> expr BANG_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr BANG_EQUAL expr .) ]
  ! STAR            [ reduce using rule 51 (expr -> expr BANG_EQUAL expr .) ]
  ! SLASH           [ reduce using rule 51 (expr -> expr BANG_EQUAL expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 119

    (52) expr -> expr OR expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 52 (expr -> expr OR expr .)
    LESS            reduce using rule 52 (expr -> expr OR expr .)
    LESS_EQUAL      reduce using rule 52 (expr -> expr OR expr .)
    GREATER         reduce using rule 52 (expr -> expr OR expr .)
    GREATER_EQUAL   reduce using rule 52 (expr -> expr OR expr .)
    EQUAL_EQUAL     reduce using rule 52 (expr -> expr OR expr .)
    BANG_EQUAL      reduce using rule 52 (expr -> expr OR expr .)
    OR              reduce using rule 52 (expr -> expr OR expr .)
    AND             reduce using rule 52 (expr -> expr OR expr .)
    DOT             reduce using rule 52 (expr -> expr OR expr .)
    LEFT_BRACKET    reduce using rule 52 (expr -> expr OR expr .)
    LEFT_PAREN      reduce using rule 52 (expr -> expr OR expr .)
    IF              reduce using rule 52 (expr -> expr OR expr .)
    EQUAL           reduce using rule 52 (expr -> expr OR expr .)
    FN              reduce using rule 52 (expr -> expr OR expr .)
    $end            reduce using rule 52 (expr -> expr OR expr .)
    RIGHT_PAREN     reduce using rule 52 (expr -> expr OR expr .)
    COMMA           reduce using rule 52 (expr -> expr OR expr .)
    RIGHT_BRACKET   reduce using rule 52 (expr -> expr OR expr .)
    LEFT_BRACE      reduce using rule 52 (expr -> expr OR expr .)
    ELSE            reduce using rule 52 (expr -> expr OR expr .)
    RIGHT_BRACE     reduce using rule 52 (expr -> expr OR expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! STAR            [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! SLASH           [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 120

    (53) expr -> expr AND expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       reduce using rule 53 (expr -> expr AND expr .)
    LESS            reduce using rule 53 (expr -> expr AND expr .)
    LESS_EQUAL      reduce using rule 53 (expr -> expr AND expr .)
    GREATER         reduce using rule 53 (expr -> expr AND expr .)
    GREATER_EQUAL   reduce using rule 53 (expr -> expr AND expr .)
    EQUAL_EQUAL     reduce using rule 53 (expr -> expr AND expr .)
    BANG_EQUAL      reduce using rule 53 (expr -> expr AND expr .)
    OR              reduce using rule 53 (expr -> expr AND expr .)
    AND             reduce using rule 53 (expr -> expr AND expr .)
    DOT             reduce using rule 53 (expr -> expr AND expr .)
    LEFT_BRACKET    reduce using rule 53 (expr -> expr AND expr .)
    LEFT_PAREN      reduce using rule 53 (expr -> expr AND expr .)
    IF              reduce using rule 53 (expr -> expr AND expr .)
    EQUAL           reduce using rule 53 (expr -> expr AND expr .)
    FN              reduce using rule 53 (expr -> expr AND expr .)
    $end            reduce using rule 53 (expr -> expr AND expr .)
    RIGHT_PAREN     reduce using rule 53 (expr -> expr AND expr .)
    COMMA           reduce using rule 53 (expr -> expr AND expr .)
    RIGHT_BRACKET   reduce using rule 53 (expr -> expr AND expr .)
    LEFT_BRACE      reduce using rule 53 (expr -> expr AND expr .)
    ELSE            reduce using rule 53 (expr -> expr AND expr .)
    RIGHT_BRACE     reduce using rule 53 (expr -> expr AND expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78

  ! PLUS            [ reduce using rule 53 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr AND expr .) ]
  ! STAR            [ reduce using rule 53 (expr -> expr AND expr .) ]
  ! SLASH           [ reduce using rule 53 (expr -> expr AND expr .) ]
  ! LESS            [ shift and go to state 79 ]
  ! LESS_EQUAL      [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! EQUAL_EQUAL     [ shift and go to state 83 ]
  ! BANG_EQUAL      [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! DOT             [ shift and go to state 87 ]
  ! LEFT_BRACKET    [ shift and go to state 105 ]
  ! LEFT_PAREN      [ shift and go to state 88 ]
  ! IF              [ shift and go to state 90 ]


state 121

    (59) expr -> expr DOT IDENTIFIER .
    (60) expr -> expr DOT IDENTIFIER . LEFT_PAREN expr_list_comma RIGHT_PAREN

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    SEMICOLON       reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    PLUS            reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    MINUS           reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    STAR            reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    SLASH           reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    LESS            reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    LESS_EQUAL      reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    GREATER         reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    EQUAL_EQUAL     reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    BANG_EQUAL      reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    OR              reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    AND             reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    DOT             reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    IF              reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    EQUAL           reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    FN              reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    $end            reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    COMMA           reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    LEFT_BRACE      reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    ELSE            reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 59 (expr -> expr DOT IDENTIFIER .)
    LEFT_PAREN      shift and go to state 141

  ! LEFT_PAREN      [ reduce using rule 59 (expr -> expr DOT IDENTIFIER .) ]


state 122

    (66) expr -> expr LEFT_PAREN expr_list_comma . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 142


state 123

    (61) expr -> expr LEFT_BRACKET expr . RIGHT_BRACKET
    (73) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET
    (74) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET indexof_list
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 143
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 124

    (71) expr -> expr IF expr . ELSE expr
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    ELSE            shift and go to state 144
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 125

    (79) assign -> expr EQUAL expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 145
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 126

    (80) assign -> expr indexof_list EQUAL . expr SEMICOLON
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 146

state 127

    (58) expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .

    SEMICOLON       reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    PLUS            reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    MINUS           reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    STAR            reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    SLASH           reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS            reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER         reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    OR              reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    AND             reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    DOT             reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    IF              reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    EQUAL           reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    FN              reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    $end            reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    COMMA           reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    LEFT_BRACE      reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    ELSE            reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 58 (expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET .)


state 128

    (67) expr_list_comma -> expr COMMA . expr_list_comma
    (67) expr_list_comma -> . expr COMMA expr_list_comma
    (68) expr_list_comma -> . expr
    (69) expr_list_comma -> . empty
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (81) empty -> .

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    RIGHT_BRACKET   reduce using rule 81 (empty -> .)
    RIGHT_PAREN     reduce using rule 81 (empty -> .)

    expr                           shift and go to state 95
    expr_list_comma                shift and go to state 147
    empty                          shift and go to state 96

state 129

    (37) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (38) condition -> IF expr LEFT_BRACE . stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    expr                           shift and go to state 48
    stmt_list                      shift and go to state 148
    stmt                           shift and go to state 47
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 130

    (75) declaration -> LET IDENTIFIER EQUAL . expr SEMICOLON
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 149

state 131

    (77) declaration -> LET IDENTIFIER SEMICOLON .

    NOT             reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_PAREN      reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    NIL             reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    LET             reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    PRINTLN         reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    IF              reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 77 (declaration -> LET IDENTIFIER SEMICOLON .)


state 132

    (76) declaration -> LET MUT IDENTIFIER . EQUAL expr SEMICOLON
    (78) declaration -> LET MUT IDENTIFIER . SEMICOLON

    EQUAL           shift and go to state 150
    SEMICOLON       shift and go to state 151


state 133

    (39) print -> PRINT expr SEMICOLON .

    NOT             reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    NUMBER          reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    NIL             reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    STRING          reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    LET             reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    PRINT           reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    PRINTLN         reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    IF              reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    WHILE           reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    FOR             reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    RETURN          reduce using rule 39 (print -> PRINT expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 39 (print -> PRINT expr SEMICOLON .)


state 134

    (40) print -> PRINTLN expr SEMICOLON .

    NOT             reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    NUMBER          reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    NIL             reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    STRING          reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    LET             reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    PRINT           reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    PRINTLN         reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    IF              reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    WHILE           reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    FOR             reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    RETURN          reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 40 (print -> PRINTLN expr SEMICOLON .)


state 135

    (36) while -> WHILE expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    expr                           shift and go to state 48
    stmt_list                      shift and go to state 152
    stmt                           shift and go to state 47
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 136

    (34) for -> FOR IDENTIFIER IN . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 153

state 137

    (35) for -> FOR IDENTIFIER COMMA . IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 154


state 138

    (33) return -> RETURN expr SEMICOLON .

    NOT             reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    NUMBER          reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    NIL             reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    STRING          reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    LET             reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    PRINT           reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    PRINTLN         reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    IF              reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    WHILE           reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    FOR             reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    RETURN          reduce using rule 33 (return -> RETURN expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 33 (return -> RETURN expr SEMICOLON .)


state 139

    (61) expr -> expr LEFT_BRACKET expr . RIGHT_BRACKET
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 155
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 140

    (62) expr -> IDENTIFIER COLON COLON LEFT_BRACE . prop_assignment_list RIGHT_BRACE
    (63) prop_assignment_list -> . IDENTIFIER EQUAL expr COMMA prop_assignment_list
    (64) prop_assignment_list -> . IDENTIFIER EQUAL expr COMMA
    (65) prop_assignment_list -> . IDENTIFIER EQUAL expr

    IDENTIFIER      shift and go to state 156

    prop_assignment_list           shift and go to state 157

state 141

    (60) expr -> expr DOT IDENTIFIER LEFT_PAREN . expr_list_comma RIGHT_PAREN
    (67) expr_list_comma -> . expr COMMA expr_list_comma
    (68) expr_list_comma -> . expr
    (69) expr_list_comma -> . empty
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (81) empty -> .

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    RIGHT_PAREN     reduce using rule 81 (empty -> .)

    expr                           shift and go to state 95
    expr_list_comma                shift and go to state 158
    empty                          shift and go to state 96

state 142

    (66) expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .

    SEMICOLON       reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PLUS            reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    MINUS           reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STAR            reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SLASH           reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS            reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER         reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    OR              reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    AND             reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    DOT             reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IF              reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL           reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FN              reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    $end            reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    COMMA           reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    ELSE            reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 66 (expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN .)


state 143

    (61) expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .
    (73) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .
    (74) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET . indexof_list
    (73) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (74) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

  ! reduce/reduce conflict for EQUAL resolved using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    PLUS            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    MINUS           reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    STAR            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SLASH           reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER         reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    OR              reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    AND             reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    DOT             reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    IF              reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL           reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 159

  ! LEFT_BRACKET    [ reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .) ]
  ! EQUAL           [ reduce using rule 73 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .) ]

    indexof_list                   shift and go to state 160

state 144

    (71) expr -> expr IF expr ELSE . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 161

state 145

    (79) assign -> expr EQUAL expr SEMICOLON .

    NOT             reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    NIL             reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    STRING          reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    LET             reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    IF              reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    FOR             reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 79 (assign -> expr EQUAL expr SEMICOLON .)


state 146

    (80) assign -> expr indexof_list EQUAL expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 162
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 147

    (67) expr_list_comma -> expr COMMA expr_list_comma .

    RIGHT_BRACKET   reduce using rule 67 (expr_list_comma -> expr COMMA expr_list_comma .)
    RIGHT_PAREN     reduce using rule 67 (expr_list_comma -> expr COMMA expr_list_comma .)


state 148

    (37) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE
    (38) condition -> IF expr LEFT_BRACE stmt_list . RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 163


state 149

    (75) declaration -> LET IDENTIFIER EQUAL expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 164
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 150

    (76) declaration -> LET MUT IDENTIFIER EQUAL . expr SEMICOLON
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 165

state 151

    (78) declaration -> LET MUT IDENTIFIER SEMICOLON .

    NOT             reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_PAREN      reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    NIL             reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    LET             reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    PRINTLN         reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    IF              reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 78 (declaration -> LET MUT IDENTIFIER SEMICOLON .)


state 152

    (36) while -> WHILE expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 166


state 153

    (34) for -> FOR IDENTIFIER IN expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 167
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 154

    (35) for -> FOR IDENTIFIER COMMA IDENTIFIER . IN expr LEFT_BRACE stmt_list RIGHT_BRACE

    IN              shift and go to state 168


state 155

    (61) expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .

    PLUS            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    MINUS           reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    STAR            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SLASH           reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LESS_EQUAL      reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER         reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    GREATER_EQUAL   reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL_EQUAL     reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    BANG_EQUAL      reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    OR              reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    AND             reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    DOT             reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_PAREN      reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    IF              reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    FN              reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    $end            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    EQUAL           reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    COMMA           reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACE      reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    ELSE            reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 61 (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET .)


state 156

    (63) prop_assignment_list -> IDENTIFIER . EQUAL expr COMMA prop_assignment_list
    (64) prop_assignment_list -> IDENTIFIER . EQUAL expr COMMA
    (65) prop_assignment_list -> IDENTIFIER . EQUAL expr

    EQUAL           shift and go to state 169


state 157

    (62) expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 170


state 158

    (60) expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 171


state 159

    (73) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET
    (74) indexof_list -> LEFT_BRACKET . expr RIGHT_BRACKET indexof_list
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 172

state 160

    (74) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list .

    EQUAL           reduce using rule 74 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list .)


state 161

    (71) expr -> expr IF expr ELSE expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for BANG_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    SEMICOLON       reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    EQUAL           reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    FN              reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    $end            reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    RIGHT_PAREN     reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    COMMA           reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    RIGHT_BRACKET   reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    LEFT_BRACE      reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    ELSE            reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    RIGHT_BRACE     reduce using rule 71 (expr -> expr IF expr ELSE expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90

  ! PLUS            [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! MINUS           [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! STAR            [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! SLASH           [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! LESS            [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER         [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! EQUAL_EQUAL     [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! BANG_EQUAL      [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! OR              [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! AND             [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! DOT             [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! LEFT_BRACKET    [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! LEFT_PAREN      [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]
  ! IF              [ reduce using rule 71 (expr -> expr IF expr ELSE expr .) ]


state 162

    (80) assign -> expr indexof_list EQUAL expr SEMICOLON .

    NOT             reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    NIL             reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    STRING          reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    LET             reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    IF              reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    FOR             reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 80 (assign -> expr indexof_list EQUAL expr SEMICOLON .)


state 163

    (37) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .
    (38) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE . ELSE LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 37 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    ELSE            shift and go to state 173


state 164

    (75) declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .

    NOT             reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    FOR             reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 75 (declaration -> LET IDENTIFIER EQUAL expr SEMICOLON .)


state 165

    (76) declaration -> LET MUT IDENTIFIER EQUAL expr . SEMICOLON
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    SEMICOLON       shift and go to state 174
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 166

    (36) while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 36 (while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE .)


state 167

    (34) for -> FOR IDENTIFIER IN expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    expr                           shift and go to state 48
    stmt_list                      shift and go to state 175
    stmt                           shift and go to state 47
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 168

    (35) for -> FOR IDENTIFIER COMMA IDENTIFIER IN . expr LEFT_BRACE stmt_list RIGHT_BRACE
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 176

state 169

    (63) prop_assignment_list -> IDENTIFIER EQUAL . expr COMMA prop_assignment_list
    (64) prop_assignment_list -> IDENTIFIER EQUAL . expr COMMA
    (65) prop_assignment_list -> IDENTIFIER EQUAL . expr
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45

    expr                           shift and go to state 177

state 170

    (62) expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .

    SEMICOLON       reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    PLUS            reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    MINUS           reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    STAR            reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    SLASH           reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    LESS            reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    LESS_EQUAL      reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    GREATER         reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    GREATER_EQUAL   reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    EQUAL_EQUAL     reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    BANG_EQUAL      reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    OR              reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    AND             reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    DOT             reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    IF              reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    EQUAL           reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    FN              reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    $end            reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    COMMA           reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    RIGHT_BRACKET   reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    ELSE            reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 62 (expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE .)


state 171

    (60) expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .

    SEMICOLON       reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    PLUS            reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    MINUS           reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    STAR            reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    SLASH           reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS            reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LESS_EQUAL      reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER         reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    GREATER_EQUAL   reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL_EQUAL     reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    BANG_EQUAL      reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    OR              reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    AND             reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    DOT             reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    IF              reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    EQUAL           reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    FN              reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    $end            reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    COMMA           reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACKET   reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    LEFT_BRACE      reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    ELSE            reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 60 (expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN .)


state 172

    (73) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET
    (74) indexof_list -> LEFT_BRACKET expr . RIGHT_BRACKET indexof_list
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    RIGHT_BRACKET   shift and go to state 178
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 173

    (38) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE . LEFT_BRACE stmt_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 179


state 174

    (76) declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .

    NOT             reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_PAREN      reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NUMBER          reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    NIL             reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    STRING          reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACKET    reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IDENTIFIER      reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LEFT_BRACE      reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    LET             reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINT           reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    PRINTLN         reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    IF              reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    WHILE           reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    FOR             reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    RETURN          reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 76 (declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON .)


state 175

    (34) for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 180


state 176

    (35) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr . LEFT_BRACE stmt_list RIGHT_BRACE
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    LEFT_BRACE      shift and go to state 181
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 177

    (63) prop_assignment_list -> IDENTIFIER EQUAL expr . COMMA prop_assignment_list
    (64) prop_assignment_list -> IDENTIFIER EQUAL expr . COMMA
    (65) prop_assignment_list -> IDENTIFIER EQUAL expr .
    (42) expr -> expr . PLUS expr
    (43) expr -> expr . MINUS expr
    (44) expr -> expr . STAR expr
    (45) expr -> expr . SLASH expr
    (46) expr -> expr . LESS expr
    (47) expr -> expr . LESS_EQUAL expr
    (48) expr -> expr . GREATER expr
    (49) expr -> expr . GREATER_EQUAL expr
    (50) expr -> expr . EQUAL_EQUAL expr
    (51) expr -> expr . BANG_EQUAL expr
    (52) expr -> expr . OR expr
    (53) expr -> expr . AND expr
    (59) expr -> expr . DOT IDENTIFIER
    (60) expr -> expr . DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> expr . LEFT_BRACKET expr RIGHT_BRACKET
    (66) expr -> expr . LEFT_PAREN expr_list_comma RIGHT_PAREN
    (71) expr -> expr . IF expr ELSE expr

    COMMA           shift and go to state 182
    RIGHT_BRACE     reduce using rule 65 (prop_assignment_list -> IDENTIFIER EQUAL expr .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    STAR            shift and go to state 77
    SLASH           shift and go to state 78
    LESS            shift and go to state 79
    LESS_EQUAL      shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    EQUAL_EQUAL     shift and go to state 83
    BANG_EQUAL      shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86
    DOT             shift and go to state 87
    LEFT_BRACKET    shift and go to state 105
    LEFT_PAREN      shift and go to state 88
    IF              shift and go to state 90


state 178

    (73) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .
    (74) indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET . indexof_list
    (73) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET
    (74) indexof_list -> . LEFT_BRACKET expr RIGHT_BRACKET indexof_list

    EQUAL           reduce using rule 73 (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 159

    indexof_list                   shift and go to state 160

state 179

    (38) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    expr                           shift and go to state 48
    stmt_list                      shift and go to state 183
    stmt                           shift and go to state 47
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 180

    (34) for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 34 (for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)


state 181

    (35) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE . stmt_list RIGHT_BRACE
    (14) stmt_list -> . stmt stmt_list
    (15) stmt_list -> . stmt
    (16) stmt -> . expr SEMICOLON
    (17) stmt -> . declaration
    (18) stmt -> . assign
    (19) stmt -> . print
    (20) stmt -> . condition
    (21) stmt -> . while
    (22) stmt -> . for
    (23) stmt -> . return
    (41) expr -> . NOT expr
    (42) expr -> . expr PLUS expr
    (43) expr -> . expr MINUS expr
    (44) expr -> . expr STAR expr
    (45) expr -> . expr SLASH expr
    (46) expr -> . expr LESS expr
    (47) expr -> . expr LESS_EQUAL expr
    (48) expr -> . expr GREATER expr
    (49) expr -> . expr GREATER_EQUAL expr
    (50) expr -> . expr EQUAL_EQUAL expr
    (51) expr -> . expr BANG_EQUAL expr
    (52) expr -> . expr OR expr
    (53) expr -> . expr AND expr
    (54) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (55) expr -> . NUMBER
    (56) expr -> . NIL
    (57) expr -> . STRING
    (58) expr -> . LEFT_BRACKET expr_list_comma RIGHT_BRACKET
    (59) expr -> . expr DOT IDENTIFIER
    (60) expr -> . expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN
    (61) expr -> . expr LEFT_BRACKET expr RIGHT_BRACKET
    (62) expr -> . IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE
    (66) expr -> . expr LEFT_PAREN expr_list_comma RIGHT_PAREN
    (70) expr -> . IDENTIFIER
    (71) expr -> . expr IF expr ELSE expr
    (72) expr -> . LEFT_BRACE stmt_list RIGHT_BRACE
    (75) declaration -> . LET IDENTIFIER EQUAL expr SEMICOLON
    (76) declaration -> . LET MUT IDENTIFIER EQUAL expr SEMICOLON
    (77) declaration -> . LET IDENTIFIER SEMICOLON
    (78) declaration -> . LET MUT IDENTIFIER SEMICOLON
    (79) assign -> . expr EQUAL expr SEMICOLON
    (80) assign -> . expr indexof_list EQUAL expr SEMICOLON
    (39) print -> . PRINT expr SEMICOLON
    (40) print -> . PRINTLN expr SEMICOLON
    (37) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE
    (38) condition -> . IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE
    (36) while -> . WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE
    (34) for -> . FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (35) for -> . FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE
    (33) return -> . RETURN expr SEMICOLON

    NOT             shift and go to state 56
    LEFT_PAREN      shift and go to state 44
    NUMBER          shift and go to state 57
    NIL             shift and go to state 58
    STRING          shift and go to state 59
    LEFT_BRACKET    shift and go to state 60
    IDENTIFIER      shift and go to state 43
    LEFT_BRACE      shift and go to state 45
    LET             shift and go to state 62
    PRINT           shift and go to state 63
    PRINTLN         shift and go to state 64
    IF              shift and go to state 61
    WHILE           shift and go to state 65
    FOR             shift and go to state 66
    RETURN          shift and go to state 67

    expr                           shift and go to state 48
    stmt_list                      shift and go to state 184
    stmt                           shift and go to state 47
    declaration                    shift and go to state 49
    assign                         shift and go to state 50
    print                          shift and go to state 51
    condition                      shift and go to state 52
    while                          shift and go to state 53
    for                            shift and go to state 54
    return                         shift and go to state 55

state 182

    (63) prop_assignment_list -> IDENTIFIER EQUAL expr COMMA . prop_assignment_list
    (64) prop_assignment_list -> IDENTIFIER EQUAL expr COMMA .
    (63) prop_assignment_list -> . IDENTIFIER EQUAL expr COMMA prop_assignment_list
    (64) prop_assignment_list -> . IDENTIFIER EQUAL expr COMMA
    (65) prop_assignment_list -> . IDENTIFIER EQUAL expr

    RIGHT_BRACE     reduce using rule 64 (prop_assignment_list -> IDENTIFIER EQUAL expr COMMA .)
    IDENTIFIER      shift and go to state 156

    prop_assignment_list           shift and go to state 185

state 183

    (38) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 186


state 184

    (35) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 187


state 185

    (63) prop_assignment_list -> IDENTIFIER EQUAL expr COMMA prop_assignment_list .

    RIGHT_BRACE     reduce using rule 63 (prop_assignment_list -> IDENTIFIER EQUAL expr COMMA prop_assignment_list .)


state 186

    (38) condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 38 (condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE .)


state 187

    (35) for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .

    NOT             reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NUMBER          reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    NIL             reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    STRING          reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    LET             reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINT           reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    PRINTLN         reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    IF              reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    WHILE           reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    FOR             reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RETURN          reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 35 (for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 143 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for STAR in state 161 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 161 resolved as shift
WARNING: shift/reduce conflict for LESS in state 161 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for BANG_EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for OR in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 161 resolved as shift
WARNING: shift/reduce conflict for DOT in state 161 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 161 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 161 resolved as shift
WARNING: shift/reduce conflict for IF in state 161 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (use_list -> use)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 7 resolved using rule (type_def_list -> type_def)
WARNING: rejected rule (empty -> <empty>) in state 7
WARNING: reduce/reduce conflict in state 143 resolved using rule (expr -> expr LEFT_BRACKET expr RIGHT_BRACKET)
WARNING: rejected rule (indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET) in state 143
