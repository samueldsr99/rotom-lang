
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BANG BANG_EQUAL CLASS COLON COMMA DOT ELSE EOF EQUAL EQUAL_EQUAL FALSE FN FOR GREATER GREATER_EQUAL IDENTIFIER IF IN LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LET MINUS MUT NIL NUMBER OR PLUS PRINT PRINTLN RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING SUPER THIS TRUE USE WHILE\n    prog : use_list fn_def_list\n    \n    use_list : use use_list\n             | use\n             | empty\n    \n    use : USE STRING ARROW IDENTIFIER SEMICOLON\n        | USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON\n    \n    fn_def_list : fn_def fn_def_list\n                | fn_def\n    \n    fn_def : FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE\n           | FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr\n    \n    param_list : IDENTIFIER COMMA param_list\n               | IDENTIFIER\n               | empty\n    \n    stmt_list : stmt stmt_list\n              | stmt\n    \n    stmt : expr SEMICOLON\n         | declaration\n         | assign\n         | print\n         | condition\n         | while\n         | for\n         | return\n    \n    return : RETURN expr SEMICOLON\n    \n    for : FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n        | FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    while : WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    condition : IF expr LEFT_BRACE stmt_list RIGHT_BRACE\n              | IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    print : PRINT expr SEMICOLON\n          | PRINTLN expr SEMICOLON\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr STAR expr\n         | expr SLASH expr\n         | expr LESS expr\n         | expr LESS_EQUAL expr\n         | expr GREATER expr\n         | expr GREATER_EQUAL expr\n         | expr EQUAL_EQUAL expr\n         | expr BANG_EQUAL expr\n    \n    expr : LEFT_PAREN expr RIGHT_PAREN\n    \n    expr : NUMBER\n         | NIL\n         | STRING\n         | LEFT_BRACKET expr_list_comma RIGHT_BRACKET\n    \n    expr : expr DOT IDENTIFIER\n         | expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr : expr LEFT_BRACKET expr RIGHT_BRACKET\n    \n    expr : IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr_list_comma : expr COMMA expr_list_comma\n                 | expr\n                 | empty\n    \n    expr : IDENTIFIER\n    \n    expr : expr IF expr ELSE expr\n    \n    expr : LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    indexof_list : LEFT_BRACKET expr RIGHT_BRACKET\n                 | LEFT_BRACKET expr RIGHT_BRACKET indexof_list\n    \n    declaration : LET IDENTIFIER EQUAL expr SEMICOLON\n                | LET MUT IDENTIFIER EQUAL expr SEMICOLON\n                | LET IDENTIFIER SEMICOLON\n                | LET MUT IDENTIFIER SEMICOLON\n    \n    assign : IDENTIFIER EQUAL expr SEMICOLON\n           | IDENTIFIER indexof_list EQUAL expr SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'USE':([0,3,20,28,],[5,5,-5,-6,]),'FN':([0,2,3,4,7,9,20,28,42,43,44,53,54,61,92,93,94,95,96,97,98,99,100,101,102,103,104,107,119,124,137,144,],[-65,8,-3,-4,8,-2,-5,-6,-43,-44,-45,-54,-10,-9,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,-50,-49,-55,-48,]),'$end':([1,6,7,11,42,43,44,53,54,61,92,93,94,95,96,97,98,99,100,101,102,103,104,107,119,124,137,144,],[0,-1,-8,-7,-43,-44,-45,-54,-10,-9,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,-50,-49,-55,-48,]),'STRING':([5,26,27,30,31,33,35,36,37,38,39,40,41,45,46,48,49,50,52,55,56,58,63,64,65,66,67,68,69,70,71,72,73,75,76,90,108,109,110,111,113,114,115,116,118,120,123,125,129,130,134,138,139,141,142,143,146,149,150,151,154,155,],[10,44,44,44,44,44,-17,-18,-19,-20,-21,-22,-23,44,44,44,44,44,44,44,44,44,-16,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-61,-30,-31,44,44,-24,-63,44,44,44,-62,-64,-28,-59,-27,44,44,-60,44,-25,44,-29,-26,]),'IDENTIFIER':([8,13,14,16,22,26,27,30,31,33,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,55,56,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,82,90,108,109,110,111,113,114,115,116,117,118,120,123,125,129,130,134,138,139,141,142,143,146,149,150,151,154,155,],[12,15,17,17,17,29,53,53,29,29,-17,-18,-19,-20,-21,-22,-23,53,53,81,53,53,53,86,53,53,53,53,-16,53,53,53,53,53,53,53,53,53,53,104,53,53,112,53,53,29,53,-61,-30,-31,29,53,133,-24,-63,53,53,53,-62,-64,-28,-59,-27,29,53,-60,29,-25,29,-29,-26,]),'ARROW':([10,23,],[13,27,]),'LEFT_PAREN':([12,13,26,27,29,30,31,33,35,36,37,38,39,40,41,45,46,48,49,50,52,53,55,56,58,63,64,65,66,67,68,69,70,71,72,73,75,76,90,104,108,109,110,111,113,114,115,116,118,120,123,125,129,130,134,138,139,141,142,143,146,149,150,151,154,155,],[14,16,30,30,55,30,30,30,-17,-18,-19,-20,-21,-22,-23,30,30,30,30,30,30,55,30,30,30,-16,30,30,30,30,30,30,30,30,30,30,30,30,30,123,30,30,30,-61,-30,-31,30,30,-24,-63,30,30,30,-62,-64,-28,-59,-27,30,30,-60,30,-25,30,-29,-26,]),'RIGHT_PAREN':([14,16,17,18,19,21,22,25,42,43,44,53,55,59,78,79,88,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,119,123,124,126,136,137,144,],[-65,-65,-12,23,-13,24,-65,-11,-43,-44,-45,-54,-65,92,-52,-53,119,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,-65,-50,-65,-49,-51,144,-55,-48,]),'SEMICOLON':([15,24,29,34,42,43,44,53,81,83,84,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,107,112,119,121,124,128,137,140,144,],[20,28,-54,63,-43,-44,-45,-54,111,113,114,118,120,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,130,-50,134,-49,139,-55,146,-48,]),'COMMA':([17,42,43,44,53,78,86,92,93,94,95,96,97,98,99,100,101,102,103,104,107,119,124,137,144,],[22,-43,-44,-45,-54,108,117,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,-50,-49,-55,-48,]),'LEFT_BRACE':([23,26,27,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,52,53,55,56,58,63,64,65,66,67,68,69,70,71,72,73,75,76,80,85,90,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,113,114,115,116,118,119,120,123,124,125,129,130,132,134,137,138,139,141,142,143,144,145,146,148,149,150,151,154,155,],[26,31,31,31,31,31,-17,-18,-19,-20,-21,-22,-23,-43,-44,-45,31,31,31,31,31,31,-54,31,31,31,-16,31,31,31,31,31,31,31,31,31,31,31,31,109,115,31,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,31,31,31,-61,-30,-31,31,31,-24,-50,-63,31,-49,31,31,-62,142,-64,-55,-28,-59,-27,31,31,-48,149,-60,151,31,-25,31,-29,-26,]),'NUMBER':([26,27,30,31,33,35,36,37,38,39,40,41,45,46,48,49,50,52,55,56,58,63,64,65,66,67,68,69,70,71,72,73,75,76,90,108,109,110,111,113,114,115,116,118,120,123,125,129,130,134,138,139,141,142,143,146,149,150,151,154,155,],[42,42,42,42,42,-17,-18,-19,-20,-21,-22,-23,42,42,42,42,42,42,42,42,42,-16,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-61,-30,-31,42,42,-24,-63,42,42,42,-62,-64,-28,-59,-27,42,42,-60,42,-25,42,-29,-26,]),'NIL':([26,27,30,31,33,35,36,37,38,39,40,41,45,46,48,49,50,52,55,56,58,63,64,65,66,67,68,69,70,71,72,73,75,76,90,108,109,110,111,113,114,115,116,118,120,123,125,129,130,134,138,139,141,142,143,146,149,150,151,154,155,],[43,43,43,43,43,-17,-18,-19,-20,-21,-22,-23,43,43,43,43,43,43,43,43,43,-16,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-61,-30,-31,43,43,-24,-63,43,43,43,-62,-64,-28,-59,-27,43,43,-60,43,-25,43,-29,-26,]),'LEFT_BRACKET':([26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,52,53,54,55,56,58,59,63,64,65,66,67,68,69,70,71,72,73,75,76,78,80,83,84,85,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,115,116,118,119,120,121,122,123,124,125,128,129,130,132,134,137,138,139,140,141,142,143,144,146,148,149,150,151,154,155,],[45,45,58,45,45,45,75,-17,-18,-19,-20,-21,-22,-23,-43,-44,-45,45,45,45,45,45,45,-54,75,45,45,45,75,-16,45,45,45,45,45,45,45,45,45,45,45,45,75,75,75,75,75,75,75,45,75,-42,-56,75,75,75,75,75,75,75,75,75,75,-47,75,75,-46,45,45,45,-61,-30,-31,45,45,-24,-50,-63,75,58,45,-49,45,75,45,-62,75,-64,75,-28,-59,75,-27,45,45,-48,-60,75,45,-25,45,-29,-26,]),'LET':([26,31,33,35,36,37,38,39,40,41,63,109,111,113,114,115,118,120,130,134,138,139,141,142,146,149,150,151,154,155,],[47,47,47,-17,-18,-19,-20,-21,-22,-23,-16,47,-61,-30,-31,47,-24,-63,-62,-64,-28,-59,-27,47,-60,47,-25,47,-29,-26,]),'PRINT':([26,31,33,35,36,37,38,39,40,41,63,109,111,113,114,115,118,120,130,134,138,139,141,142,146,149,150,151,154,155,],[48,48,48,-17,-18,-19,-20,-21,-22,-23,-16,48,-61,-30,-31,48,-24,-63,-62,-64,-28,-59,-27,48,-60,48,-25,48,-29,-26,]),'PRINTLN':([26,31,33,35,36,37,38,39,40,41,63,109,111,113,114,115,118,120,130,134,138,139,141,142,146,149,150,151,154,155,],[49,49,49,-17,-18,-19,-20,-21,-22,-23,-16,49,-61,-30,-31,49,-24,-63,-62,-64,-28,-59,-27,49,-60,49,-25,49,-29,-26,]),'IF':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,44,53,54,59,63,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,113,114,115,118,119,120,121,124,128,130,132,134,137,138,139,140,141,142,144,146,148,149,150,151,154,155,],[46,-54,46,46,76,-17,-18,-19,-20,-21,-22,-23,-43,-44,-45,-54,76,76,-16,76,76,76,76,76,76,76,76,-42,-56,76,76,76,76,76,76,76,76,76,76,-47,76,76,-46,46,-61,-30,-31,46,-24,-50,-63,76,-49,76,-62,76,-64,76,-28,-59,76,-27,46,-48,-60,76,46,-25,46,-29,-26,]),'WHILE':([26,31,33,35,36,37,38,39,40,41,63,109,111,113,114,115,118,120,130,134,138,139,141,142,146,149,150,151,154,155,],[50,50,50,-17,-18,-19,-20,-21,-22,-23,-16,50,-61,-30,-31,50,-24,-63,-62,-64,-28,-59,-27,50,-60,50,-25,50,-29,-26,]),'FOR':([26,31,33,35,36,37,38,39,40,41,63,109,111,113,114,115,118,120,130,134,138,139,141,142,146,149,150,151,154,155,],[51,51,51,-17,-18,-19,-20,-21,-22,-23,-16,51,-61,-30,-31,51,-24,-63,-62,-64,-28,-59,-27,51,-60,51,-25,51,-29,-26,]),'RETURN':([26,31,33,35,36,37,38,39,40,41,63,109,111,113,114,115,118,120,130,134,138,139,141,142,146,149,150,151,154,155,],[52,52,52,-17,-18,-19,-20,-21,-22,-23,-16,52,-61,-30,-31,52,-24,-63,-62,-64,-28,-59,-27,52,-60,52,-25,52,-29,-26,]),'PLUS':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,64,-43,-44,-45,-54,64,64,64,64,64,64,64,64,64,64,-42,-56,64,64,64,64,64,64,64,64,64,64,-47,64,64,-46,-50,64,-49,64,64,64,64,-48,64,]),'MINUS':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,65,-43,-44,-45,-54,65,65,65,65,65,65,65,65,65,65,-42,-56,65,65,65,65,65,65,65,65,65,65,-47,65,65,-46,-50,65,-49,65,65,65,65,-48,65,]),'STAR':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,66,-43,-44,-45,-54,66,66,66,66,66,66,66,66,66,66,-42,-56,66,66,66,66,66,66,66,66,66,66,-47,66,66,-46,-50,66,-49,66,66,66,66,-48,66,]),'SLASH':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,67,-43,-44,-45,-54,67,67,67,67,67,67,67,67,67,67,-42,-56,67,67,67,67,67,67,67,67,67,67,-47,67,67,-46,-50,67,-49,67,67,67,67,-48,67,]),'LESS':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,68,-43,-44,-45,-54,68,68,68,68,68,68,68,68,68,68,-42,-56,68,68,68,68,68,68,68,68,68,68,-47,68,68,-46,-50,68,-49,68,68,68,68,-48,68,]),'LESS_EQUAL':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,69,-43,-44,-45,-54,69,69,69,69,69,69,69,69,69,69,-42,-56,69,69,69,69,69,69,69,69,69,69,-47,69,69,-46,-50,69,-49,69,69,69,69,-48,69,]),'GREATER':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,70,-43,-44,-45,-54,70,70,70,70,70,70,70,70,70,70,-42,-56,70,70,70,70,70,70,70,70,70,70,-47,70,70,-46,-50,70,-49,70,70,70,70,-48,70,]),'GREATER_EQUAL':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,71,-43,-44,-45,-54,71,71,71,71,71,71,71,71,71,71,-42,-56,71,71,71,71,71,71,71,71,71,71,-47,71,71,-46,-50,71,-49,71,71,71,71,-48,71,]),'EQUAL_EQUAL':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,72,-43,-44,-45,-54,72,72,72,72,72,72,72,72,72,72,-42,-56,72,72,72,72,72,72,72,72,72,72,-47,72,72,-46,-50,72,-49,72,72,72,72,-48,72,]),'BANG_EQUAL':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,73,-43,-44,-45,-54,73,73,73,73,73,73,73,73,73,73,-42,-56,73,73,73,73,73,73,73,73,73,73,-47,73,73,-46,-50,73,-49,73,73,73,73,-48,73,]),'DOT':([29,34,42,43,44,53,54,59,78,80,83,84,85,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,119,121,124,128,132,137,140,144,148,],[-54,74,-43,-44,-45,-54,74,74,74,74,74,74,74,74,74,74,-42,-56,74,74,74,74,74,74,74,74,74,74,-47,74,74,-46,-50,74,-49,74,74,74,74,-48,74,]),'EQUAL':([29,57,81,112,122,135,],[56,90,110,129,-57,-58,]),'RIGHT_BRACE':([32,33,35,36,37,38,39,40,41,60,62,63,111,113,114,118,120,127,130,131,134,138,139,141,146,147,150,152,153,154,155,],[61,-15,-17,-18,-19,-20,-21,-22,-23,93,-14,-16,-61,-30,-31,-24,-63,138,-62,141,-64,-28,-59,-27,-60,150,-25,154,155,-29,-26,]),'RIGHT_BRACKET':([42,43,44,45,53,77,78,79,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,119,124,126,137,144,],[-43,-44,-45,-65,-54,107,-52,-53,122,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,124,-46,-65,-50,-49,-51,-55,-48,]),'ELSE':([42,43,44,53,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,119,124,137,138,144,],[-43,-44,-45,-54,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,125,-46,-50,-49,-55,145,-48,]),'MUT':([47,],[82,]),'IN':([86,133,],[116,143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'use_list':([0,3,],[2,9,]),'use':([0,3,],[3,3,]),'empty':([0,3,14,16,22,45,55,108,123,],[4,4,19,19,19,79,79,79,79,]),'fn_def_list':([2,7,],[6,11,]),'fn_def':([2,7,],[7,7,]),'param_list':([14,16,22,],[18,21,25,]),'stmt_list':([26,31,33,109,115,142,149,151,],[32,60,62,127,131,147,152,153,]),'stmt':([26,31,33,109,115,142,149,151,],[33,33,33,33,33,33,33,33,]),'expr':([26,27,30,31,33,45,46,48,49,50,52,55,56,58,64,65,66,67,68,69,70,71,72,73,75,76,90,108,109,110,115,116,123,125,129,142,143,149,151,],[34,54,59,34,34,78,80,83,84,85,87,78,89,91,94,95,96,97,98,99,100,101,102,103,105,106,121,78,34,128,34,132,78,137,140,34,148,34,34,]),'declaration':([26,31,33,109,115,142,149,151,],[35,35,35,35,35,35,35,35,]),'assign':([26,31,33,109,115,142,149,151,],[36,36,36,36,36,36,36,36,]),'print':([26,31,33,109,115,142,149,151,],[37,37,37,37,37,37,37,37,]),'condition':([26,31,33,109,115,142,149,151,],[38,38,38,38,38,38,38,38,]),'while':([26,31,33,109,115,142,149,151,],[39,39,39,39,39,39,39,39,]),'for':([26,31,33,109,115,142,149,151,],[40,40,40,40,40,40,40,40,]),'return':([26,31,33,109,115,142,149,151,],[41,41,41,41,41,41,41,41,]),'indexof_list':([29,122,],[57,135,]),'expr_list_comma':([45,55,108,123,],[77,88,126,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> use_list fn_def_list','prog',2,'p_prog','parser.py',33),
  ('use_list -> use use_list','use_list',2,'p_use_list','parser.py',40),
  ('use_list -> use','use_list',1,'p_use_list','parser.py',41),
  ('use_list -> empty','use_list',1,'p_use_list','parser.py',42),
  ('use -> USE STRING ARROW IDENTIFIER SEMICOLON','use',5,'p_use','parser.py',55),
  ('use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON','use',7,'p_use','parser.py',56),
  ('fn_def_list -> fn_def fn_def_list','fn_def_list',2,'p_fn_def_list','parser.py',66),
  ('fn_def_list -> fn_def','fn_def_list',1,'p_fn_def_list','parser.py',67),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE','fn_def',8,'p_fn_def','parser.py',77),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr','fn_def',7,'p_fn_def','parser.py',78),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','parser.py',88),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','parser.py',89),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',90),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',103),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',104),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt','parser.py',114),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',115),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',116),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',117),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',118),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',119),
  ('stmt -> for','stmt',1,'p_stmt','parser.py',120),
  ('stmt -> return','stmt',1,'p_stmt','parser.py',121),
  ('return -> RETURN expr SEMICOLON','return',3,'p_return','parser.py',128),
  ('for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',7,'p_for','parser.py',135),
  ('for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',9,'p_for','parser.py',136),
  ('while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE','while',5,'p_while','parser.py',146),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE','condition',5,'p_condition','parser.py',153),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE','condition',9,'p_condition','parser.py',154),
  ('print -> PRINT expr SEMICOLON','print',3,'p_print','parser.py',164),
  ('print -> PRINTLN expr SEMICOLON','print',3,'p_print','parser.py',165),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','parser.py',173),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','parser.py',174),
  ('expr -> expr STAR expr','expr',3,'p_expr_binary','parser.py',175),
  ('expr -> expr SLASH expr','expr',3,'p_expr_binary','parser.py',176),
  ('expr -> expr LESS expr','expr',3,'p_expr_binary','parser.py',177),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr_binary','parser.py',178),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binary','parser.py',179),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binary','parser.py',180),
  ('expr -> expr EQUAL_EQUAL expr','expr',3,'p_expr_binary','parser.py',181),
  ('expr -> expr BANG_EQUAL expr','expr',3,'p_expr_binary','parser.py',182),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_grouping','parser.py',189),
  ('expr -> NUMBER','expr',1,'p_expr_literal','parser.py',196),
  ('expr -> NIL','expr',1,'p_expr_literal','parser.py',197),
  ('expr -> STRING','expr',1,'p_expr_literal','parser.py',198),
  ('expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET','expr',3,'p_expr_literal','parser.py',199),
  ('expr -> expr DOT IDENTIFIER','expr',3,'p_expr_dispatch','parser.py',215),
  ('expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',6,'p_expr_dispatch','parser.py',216),
  ('expr -> expr LEFT_BRACKET expr RIGHT_BRACKET','expr',4,'p_expr_indexof','parser.py',226),
  ('expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',4,'p_expr_fn_call','parser.py',233),
  ('expr_list_comma -> expr COMMA expr_list_comma','expr_list_comma',3,'p_expr_list_comma','parser.py',240),
  ('expr_list_comma -> expr','expr_list_comma',1,'p_expr_list_comma','parser.py',241),
  ('expr_list_comma -> empty','expr_list_comma',1,'p_expr_list_comma','parser.py',242),
  ('expr -> IDENTIFIER','expr',1,'p_expr_variable','parser.py',255),
  ('expr -> expr IF expr ELSE expr','expr',5,'p_expr_ternary','parser.py',262),
  ('expr -> LEFT_BRACE stmt_list RIGHT_BRACE','expr',3,'p_expr_block','parser.py',269),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET','indexof_list',3,'p_indexof_list','parser.py',276),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list','indexof_list',4,'p_indexof_list','parser.py',277),
  ('declaration -> LET IDENTIFIER EQUAL expr SEMICOLON','declaration',5,'p_declaration','parser.py',287),
  ('declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON','declaration',6,'p_declaration','parser.py',288),
  ('declaration -> LET IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',289),
  ('declaration -> LET MUT IDENTIFIER SEMICOLON','declaration',4,'p_declaration','parser.py',290),
  ('assign -> IDENTIFIER EQUAL expr SEMICOLON','assign',4,'p_assign','parser.py',304),
  ('assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON','assign',5,'p_assign','parser.py',305),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',315),
]
