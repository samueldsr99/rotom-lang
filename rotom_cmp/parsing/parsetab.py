
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALrightNOTnonassocANDORnonassocLESSLESS_EQUALGREATERGREATER_EQUALEQUAL_EQUALBANG_EQUALleftPLUSMINUSSTARSLASHAND ARROW BANG BANG_EQUAL CLASS COLON COMMA DOT ELSE EOF EQUAL EQUAL_EQUAL FALSE FN FOR GREATER GREATER_EQUAL IDENTIFIER IF IN LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LET MINUS MUT NIL NOT NUMBER OR PLUS PRINT PRINTLN QUESTION RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING SUPER THIS TRUE TYPE USE WHILE\n    prog : use_list type_def_list fn_def_list\n    \n    use_list : use use_list\n             | use\n             | empty\n    \n    use : USE STRING ARROW IDENTIFIER SEMICOLON\n        | USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON\n    \n    fn_def_list : fn_def fn_def_list\n                | fn_def\n    \n    fn_def : FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE\n           | FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr\n    \n    param_list : IDENTIFIER COMMA param_list\n               | IDENTIFIER\n               | empty\n    \n    stmt_list : stmt stmt_list\n              | stmt\n    \n    stmt : expr SEMICOLON\n         | declaration\n         | assign\n         | print\n         | condition\n         | while\n         | for\n         | return\n    \n    type_def_list : type_def type_def_list\n                  | type_def\n                  | empty\n    \n    type_def : TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE\n    \n    prop_list : prop COMMA prop_list\n              | prop COMMA\n              | prop\n    \n    prop : IDENTIFIER\n         | IDENTIFIER QUESTION\n    \n    return : RETURN expr SEMICOLON\n    \n    for : FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n        | FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    while : WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    condition : IF expr LEFT_BRACE stmt_list RIGHT_BRACE\n              | IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    print : PRINT expr SEMICOLON\n          | PRINTLN expr SEMICOLON\n    \n    expr : NOT expr\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr STAR expr\n         | expr SLASH expr\n         | expr LESS expr\n         | expr LESS_EQUAL expr\n         | expr GREATER expr\n         | expr GREATER_EQUAL expr\n         | expr EQUAL_EQUAL expr\n         | expr BANG_EQUAL expr\n         | expr OR expr\n         | expr AND expr\n    \n    expr : LEFT_PAREN expr RIGHT_PAREN\n    \n    expr : NUMBER\n         | NIL\n         | STRING\n         | LEFT_BRACKET expr_list_comma RIGHT_BRACKET\n    \n    expr : expr DOT IDENTIFIER\n         | expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr : expr LEFT_BRACKET expr RIGHT_BRACKET\n    \n    expr : IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE\n    \n    prop_assignment_list : IDENTIFIER EQUAL expr COMMA prop_assignment_list\n                         | IDENTIFIER EQUAL expr COMMA\n                         | IDENTIFIER EQUAL expr\n    \n    expr : expr LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr_list_comma : expr COMMA expr_list_comma\n                 | expr\n                 | empty\n    \n    expr : IDENTIFIER\n    \n    expr : expr IF expr ELSE expr\n    \n    expr : LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    indexof_list : LEFT_BRACKET expr RIGHT_BRACKET\n                 | LEFT_BRACKET expr RIGHT_BRACKET indexof_list\n    \n    declaration : LET IDENTIFIER EQUAL expr SEMICOLON\n                | LET MUT IDENTIFIER EQUAL expr SEMICOLON\n                | LET IDENTIFIER SEMICOLON\n                | LET MUT IDENTIFIER SEMICOLON\n    \n    assign : expr EQUAL expr SEMICOLON\n           | expr indexof_list EQUAL expr SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'USE':([0,3,27,39,],[5,5,-5,-6,]),'TYPE':([0,2,3,4,7,10,27,33,39,],[-81,9,-3,-4,9,-2,-5,-27,-6,]),'FN':([0,2,3,4,6,7,8,10,13,15,27,33,39,43,57,58,59,68,72,93,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,142,155,161,170,171,],[-81,-81,-3,-4,14,-25,-26,-2,14,-24,-5,-27,-6,-70,-55,-56,-57,-10,-9,-41,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,-58,-66,-61,-71,-62,-60,]),'$end':([1,12,13,18,43,57,58,59,68,72,93,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,142,155,161,170,171,],[0,-1,-8,-7,-70,-55,-56,-57,-10,-9,-41,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,-58,-66,-61,-71,-62,-60,]),'STRING':([5,41,42,44,45,47,49,50,51,52,53,54,55,56,60,61,63,64,65,67,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,105,126,128,129,130,131,133,134,135,136,138,141,144,145,150,151,159,162,163,164,166,167,168,169,174,179,180,181,186,187,],[11,59,59,59,59,59,-17,-18,-19,-20,-21,-22,-23,59,59,59,59,59,59,59,-16,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-77,-39,-40,59,59,-33,59,59,-79,59,-78,59,-80,-37,-75,-36,59,59,59,-76,59,-34,59,-38,-35,]),'IDENTIFIER':([9,14,17,20,22,23,34,36,41,42,44,45,47,49,50,51,52,53,54,55,56,60,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,99,105,126,128,129,130,131,133,134,135,136,137,138,140,141,144,145,150,151,159,162,163,164,166,167,168,169,174,179,180,181,182,186,187,],[16,19,21,24,29,29,24,29,43,43,43,43,43,-17,-18,-19,-20,-21,-22,-23,43,43,43,98,43,43,43,103,43,-16,43,43,43,43,43,43,43,43,43,43,43,43,121,43,43,43,43,132,43,43,43,43,43,-77,-39,-40,43,43,154,-33,156,43,43,-79,43,-78,43,-80,-37,-75,-36,43,43,43,-76,43,-34,43,156,-38,-35,]),'ARROW':([11,37,],[17,42,]),'LEFT_BRACE':([16,37,41,42,43,44,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,67,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,97,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,126,127,128,129,130,131,133,134,135,136,138,141,142,144,145,150,151,153,155,159,161,162,163,164,166,167,168,169,170,171,173,174,176,179,180,181,186,187,],[20,41,45,45,-70,45,45,45,-17,-18,-19,-20,-21,-22,-23,45,-55,-56,-57,45,45,45,45,45,45,-16,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-41,129,135,45,140,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,45,-58,45,45,45,-77,-39,-40,45,45,-33,45,-66,45,-79,45,-78,167,-61,45,-71,-80,-37,-75,-36,45,45,45,-62,-60,179,-76,181,45,-34,45,-38,-35,]),'LEFT_PAREN':([17,19,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,67,68,70,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,95,97,100,101,102,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,133,134,135,136,138,139,141,142,143,144,145,146,149,150,151,153,155,159,161,162,163,164,165,166,167,168,169,170,171,172,174,176,177,179,180,181,186,187,],[22,23,44,44,-70,44,44,44,88,-17,-18,-19,-20,-21,-22,-23,44,-55,-56,-57,44,44,44,44,44,44,88,88,-16,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-41,88,88,88,88,88,88,44,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,141,88,88,88,44,-58,44,44,44,-77,-39,-40,44,44,-33,88,44,-66,-61,44,-79,88,88,44,-78,88,-61,44,88,-80,-37,-75,88,-36,44,44,44,-62,-60,88,-76,88,88,44,-34,44,-38,-35,]),'SEMICOLON':([21,35,43,48,57,58,59,93,98,100,101,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,127,132,142,143,146,149,155,161,165,170,171,],[27,39,-70,74,-55,-56,-57,-41,131,133,134,138,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,145,-58,151,-66,-61,162,164,-61,-71,174,-62,-60,]),'RIGHT_PAREN':([22,23,28,29,30,31,36,40,43,57,58,59,70,88,93,95,96,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,128,141,142,147,155,158,161,170,171,],[-81,-81,35,-12,-13,37,-81,-11,-70,-55,-56,-57,107,-81,-41,-68,-69,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,142,-58,-81,-81,-66,-67,-61,171,-71,-62,-60,]),'COMMA':([24,26,29,32,43,57,58,59,93,95,103,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,142,155,161,170,171,177,],[-31,34,36,-32,-70,-55,-56,-57,-41,128,137,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,-58,-66,-61,-71,-62,-60,182,]),'RIGHT_BRACE':([24,25,26,32,34,38,43,46,47,49,50,51,52,53,54,55,57,58,59,71,73,74,93,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,131,133,134,138,142,145,148,151,152,155,157,161,162,163,164,166,170,171,174,175,177,180,182,183,184,185,186,187,],[-31,33,-30,-32,-29,-28,-70,72,-15,-17,-18,-19,-20,-21,-22,-23,-55,-56,-57,108,-14,-16,-41,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,-58,-77,-39,-40,-33,-66,-79,163,-78,166,-61,170,-71,-80,-37,-75,-36,-62,-60,-76,180,-65,-34,-64,186,187,-63,-38,-35,]),'QUESTION':([24,],[32,]),'NOT':([41,42,44,45,47,49,50,51,52,53,54,55,56,60,61,63,64,65,67,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,105,126,128,129,130,131,133,134,135,136,138,141,144,145,150,151,159,162,163,164,166,167,168,169,174,179,180,181,186,187,],[56,56,56,56,56,-17,-18,-19,-20,-21,-22,-23,56,56,56,56,56,56,56,-16,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-77,-39,-40,56,56,-33,56,56,-79,56,-78,56,-80,-37,-75,-36,56,56,56,-76,56,-34,56,-38,-35,]),'NUMBER':([41,42,44,45,47,49,50,51,52,53,54,55,56,60,61,63,64,65,67,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,105,126,128,129,130,131,133,134,135,136,138,141,144,145,150,151,159,162,163,164,166,167,168,169,174,179,180,181,186,187,],[57,57,57,57,57,-17,-18,-19,-20,-21,-22,-23,57,57,57,57,57,57,57,-16,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-77,-39,-40,57,57,-33,57,57,-79,57,-78,57,-80,-37,-75,-36,57,57,57,-76,57,-34,57,-38,-35,]),'NIL':([41,42,44,45,47,49,50,51,52,53,54,55,56,60,61,63,64,65,67,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,105,126,128,129,130,131,133,134,135,136,138,141,144,145,150,151,159,162,163,164,166,167,168,169,174,179,180,181,186,187,],[58,58,58,58,58,-17,-18,-19,-20,-21,-22,-23,58,58,58,58,58,58,58,-16,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-77,-39,-40,58,58,-33,58,58,-79,58,-78,58,-80,-37,-75,-36,58,58,58,-76,58,-34,58,-38,-35,]),'LEFT_BRACKET':([41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,67,68,70,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,95,97,100,101,102,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,133,134,135,136,138,139,141,142,143,144,145,146,149,150,151,153,155,159,161,162,163,164,165,166,167,168,169,170,171,172,174,176,177,178,179,180,181,186,187,],[60,60,-70,60,60,60,89,-17,-18,-19,-20,-21,-22,-23,60,-55,-56,-57,60,60,60,60,60,60,105,105,-16,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-41,105,105,105,105,105,105,60,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,105,105,105,60,-58,60,60,60,-77,-39,-40,60,60,-33,105,60,-66,159,60,-79,105,105,60,-78,105,-61,60,105,-80,-37,-75,105,-36,60,60,60,-62,-60,105,-76,105,105,159,60,-34,60,-38,-35,]),'LET':([41,45,47,49,50,51,52,53,54,55,74,129,131,133,134,135,138,145,151,162,163,164,166,167,174,179,180,181,186,187,],[62,62,62,-17,-18,-19,-20,-21,-22,-23,-16,62,-77,-39,-40,62,-33,-79,-78,-80,-37,-75,-36,62,-76,62,-34,62,-38,-35,]),'PRINT':([41,45,47,49,50,51,52,53,54,55,74,129,131,133,134,135,138,145,151,162,163,164,166,167,174,179,180,181,186,187,],[63,63,63,-17,-18,-19,-20,-21,-22,-23,-16,63,-77,-39,-40,63,-33,-79,-78,-80,-37,-75,-36,63,-76,63,-34,63,-38,-35,]),'PRINTLN':([41,45,47,49,50,51,52,53,54,55,74,129,131,133,134,135,138,145,151,162,163,164,166,167,174,179,180,181,186,187,],[64,64,64,-17,-18,-19,-20,-21,-22,-23,-16,64,-77,-39,-40,64,-33,-79,-78,-80,-37,-75,-36,64,-76,64,-34,64,-38,-35,]),'IF':([41,43,45,47,48,49,50,51,52,53,54,55,57,58,59,68,70,74,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,129,131,133,134,135,138,139,142,143,145,146,149,151,153,155,161,162,163,164,165,166,167,170,171,172,174,176,177,179,180,181,186,187,],[61,-70,61,61,90,-17,-18,-19,-20,-21,-22,-23,-55,-56,-57,90,90,-16,-41,90,90,90,90,90,90,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,90,90,90,-58,61,-77,-39,-40,61,-33,90,-66,-61,-79,90,90,-78,90,-61,90,-80,-37,-75,90,-36,61,-62,-60,90,-76,90,90,61,-34,61,-38,-35,]),'WHILE':([41,45,47,49,50,51,52,53,54,55,74,129,131,133,134,135,138,145,151,162,163,164,166,167,174,179,180,181,186,187,],[65,65,65,-17,-18,-19,-20,-21,-22,-23,-16,65,-77,-39,-40,65,-33,-79,-78,-80,-37,-75,-36,65,-76,65,-34,65,-38,-35,]),'FOR':([41,45,47,49,50,51,52,53,54,55,74,129,131,133,134,135,138,145,151,162,163,164,166,167,174,179,180,181,186,187,],[66,66,66,-17,-18,-19,-20,-21,-22,-23,-16,66,-77,-39,-40,66,-33,-79,-78,-80,-37,-75,-36,66,-76,66,-34,66,-38,-35,]),'RETURN':([41,45,47,49,50,51,52,53,54,55,74,129,131,133,134,135,138,145,151,162,163,164,166,167,174,179,180,181,186,187,],[67,67,67,-17,-18,-19,-20,-21,-22,-23,-16,67,-77,-39,-40,67,-33,-79,-78,-80,-37,-75,-36,67,-76,67,-34,67,-38,-35,]),'COLON':([43,69,],[69,106,]),'PLUS':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,75,-55,-56,-57,75,75,75,75,75,75,75,75,75,-54,-72,-42,-43,-44,-45,75,75,75,75,75,75,75,75,-59,75,75,75,-58,75,-66,-61,75,75,75,-61,75,75,-62,-60,75,75,75,]),'MINUS':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,76,-55,-56,-57,76,76,76,76,76,76,76,76,76,-54,-72,-42,-43,-44,-45,76,76,76,76,76,76,76,76,-59,76,76,76,-58,76,-66,-61,76,76,76,-61,76,76,-62,-60,76,76,76,]),'STAR':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,77,-55,-56,-57,77,77,77,77,77,77,77,77,77,-54,-72,-42,-43,-44,-45,77,77,77,77,77,77,77,77,-59,77,77,77,-58,77,-66,-61,77,77,77,-61,77,77,-62,-60,77,77,77,]),'SLASH':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,78,-55,-56,-57,78,78,78,78,78,78,78,78,78,-54,-72,-42,-43,-44,-45,78,78,78,78,78,78,78,78,-59,78,78,78,-58,78,-66,-61,78,78,78,-61,78,78,-62,-60,78,78,78,]),'LESS':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,79,-55,-56,-57,79,79,79,79,79,79,79,79,79,-54,-72,-42,-43,-44,-45,None,None,None,None,None,None,79,79,-59,79,79,79,-58,79,-66,-61,79,79,79,-61,79,79,-62,-60,79,79,79,]),'LESS_EQUAL':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,80,-55,-56,-57,80,80,80,80,80,80,80,80,80,-54,-72,-42,-43,-44,-45,None,None,None,None,None,None,80,80,-59,80,80,80,-58,80,-66,-61,80,80,80,-61,80,80,-62,-60,80,80,80,]),'GREATER':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,81,-55,-56,-57,81,81,81,81,81,81,81,81,81,-54,-72,-42,-43,-44,-45,None,None,None,None,None,None,81,81,-59,81,81,81,-58,81,-66,-61,81,81,81,-61,81,81,-62,-60,81,81,81,]),'GREATER_EQUAL':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,82,-55,-56,-57,82,82,82,82,82,82,82,82,82,-54,-72,-42,-43,-44,-45,None,None,None,None,None,None,82,82,-59,82,82,82,-58,82,-66,-61,82,82,82,-61,82,82,-62,-60,82,82,82,]),'EQUAL_EQUAL':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,83,-55,-56,-57,83,83,83,83,83,83,83,83,83,-54,-72,-42,-43,-44,-45,None,None,None,None,None,None,83,83,-59,83,83,83,-58,83,-66,-61,83,83,83,-61,83,83,-62,-60,83,83,83,]),'BANG_EQUAL':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,84,-55,-56,-57,84,84,84,84,84,84,84,84,84,-54,-72,-42,-43,-44,-45,None,None,None,None,None,None,84,84,-59,84,84,84,-58,84,-66,-61,84,84,84,-61,84,84,-62,-60,84,84,84,]),'OR':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,85,-55,-56,-57,85,85,85,85,85,85,85,85,85,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,None,None,-59,85,85,85,-58,85,-66,-61,85,85,85,-61,85,85,-62,-60,85,85,85,]),'AND':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,86,-55,-56,-57,86,86,86,86,86,86,86,86,86,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,None,None,-59,86,86,86,-58,86,-66,-61,86,86,86,-61,86,86,-62,-60,86,86,86,]),'DOT':([43,48,57,58,59,68,70,93,95,97,100,101,102,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,139,142,143,146,149,153,155,161,165,170,171,172,176,177,],[-70,87,-55,-56,-57,87,87,-41,87,87,87,87,87,87,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,87,87,87,-58,87,-66,-61,87,87,87,-61,87,87,-62,-60,87,87,87,]),'EQUAL':([43,48,57,58,59,92,93,98,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,127,132,142,143,155,156,160,161,170,171,178,],[-70,91,-55,-56,-57,126,-41,130,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,-58,150,-66,-61,-61,169,-74,-71,-62,-60,-73,]),'RIGHT_BRACKET':([43,57,58,59,60,93,94,95,96,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,127,128,139,142,147,155,161,170,171,172,],[-70,-55,-56,-57,-81,-41,127,-68,-69,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,143,-58,-81,155,-66,-67,-61,-71,-62,-60,178,]),'ELSE':([43,57,58,59,93,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,127,142,155,161,163,170,171,],[-70,-55,-56,-57,-41,-54,-72,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-59,144,-58,-66,-61,-71,173,-62,-60,]),'MUT':([62,],[99,]),'IN':([103,154,],[136,168,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'use_list':([0,3,],[2,10,]),'use':([0,3,],[3,3,]),'empty':([0,2,3,7,22,23,36,60,88,128,141,],[4,8,4,8,30,30,30,96,96,96,96,]),'type_def_list':([2,7,],[6,15,]),'type_def':([2,7,],[7,7,]),'fn_def_list':([6,13,],[12,18,]),'fn_def':([6,13,],[13,13,]),'prop_list':([20,34,],[25,38,]),'prop':([20,34,],[26,26,]),'param_list':([22,23,36,],[28,31,40,]),'stmt_list':([41,45,47,129,135,167,179,181,],[46,71,73,148,152,175,183,184,]),'stmt':([41,45,47,129,135,167,179,181,],[47,47,47,47,47,47,47,47,]),'expr':([41,42,44,45,47,56,60,61,63,64,65,67,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,105,126,128,129,130,135,136,141,144,150,159,167,168,169,179,181,],[48,68,70,48,48,93,95,97,100,101,102,104,109,110,111,112,113,114,115,116,117,118,119,120,95,123,124,125,139,146,95,48,149,48,153,95,161,165,172,48,176,177,48,48,]),'declaration':([41,45,47,129,135,167,179,181,],[49,49,49,49,49,49,49,49,]),'assign':([41,45,47,129,135,167,179,181,],[50,50,50,50,50,50,50,50,]),'print':([41,45,47,129,135,167,179,181,],[51,51,51,51,51,51,51,51,]),'condition':([41,45,47,129,135,167,179,181,],[52,52,52,52,52,52,52,52,]),'while':([41,45,47,129,135,167,179,181,],[53,53,53,53,53,53,53,53,]),'for':([41,45,47,129,135,167,179,181,],[54,54,54,54,54,54,54,54,]),'return':([41,45,47,129,135,167,179,181,],[55,55,55,55,55,55,55,55,]),'indexof_list':([48,143,178,],[92,160,160,]),'expr_list_comma':([60,88,128,141,],[94,122,147,158,]),'prop_assignment_list':([140,182,],[157,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> use_list type_def_list fn_def_list','prog',3,'p_prog','parser.py',56),
  ('use_list -> use use_list','use_list',2,'p_use_list','parser.py',63),
  ('use_list -> use','use_list',1,'p_use_list','parser.py',64),
  ('use_list -> empty','use_list',1,'p_use_list','parser.py',65),
  ('use -> USE STRING ARROW IDENTIFIER SEMICOLON','use',5,'p_use','parser.py',78),
  ('use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON','use',7,'p_use','parser.py',79),
  ('fn_def_list -> fn_def fn_def_list','fn_def_list',2,'p_fn_def_list','parser.py',89),
  ('fn_def_list -> fn_def','fn_def_list',1,'p_fn_def_list','parser.py',90),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE','fn_def',8,'p_fn_def','parser.py',100),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr','fn_def',7,'p_fn_def','parser.py',101),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','parser.py',111),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','parser.py',112),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',113),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',126),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',127),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt','parser.py',137),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',138),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',139),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',140),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',141),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',142),
  ('stmt -> for','stmt',1,'p_stmt','parser.py',143),
  ('stmt -> return','stmt',1,'p_stmt','parser.py',144),
  ('type_def_list -> type_def type_def_list','type_def_list',2,'p_type_def_list','parser.py',154),
  ('type_def_list -> type_def','type_def_list',1,'p_type_def_list','parser.py',155),
  ('type_def_list -> empty','type_def_list',1,'p_type_def_list','parser.py',156),
  ('type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE','type_def',5,'p_type_def','parser.py',169),
  ('prop_list -> prop COMMA prop_list','prop_list',3,'p_property_list','parser.py',176),
  ('prop_list -> prop COMMA','prop_list',2,'p_property_list','parser.py',177),
  ('prop_list -> prop','prop_list',1,'p_property_list','parser.py',178),
  ('prop -> IDENTIFIER','prop',1,'p_property','parser.py',188),
  ('prop -> IDENTIFIER QUESTION','prop',2,'p_property','parser.py',189),
  ('return -> RETURN expr SEMICOLON','return',3,'p_return','parser.py',201),
  ('for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',7,'p_for','parser.py',208),
  ('for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',9,'p_for','parser.py',209),
  ('while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE','while',5,'p_while','parser.py',219),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE','condition',5,'p_condition','parser.py',226),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE','condition',9,'p_condition','parser.py',227),
  ('print -> PRINT expr SEMICOLON','print',3,'p_print','parser.py',237),
  ('print -> PRINTLN expr SEMICOLON','print',3,'p_print','parser.py',238),
  ('expr -> NOT expr','expr',2,'p_expr_unary','parser.py',246),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','parser.py',253),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','parser.py',254),
  ('expr -> expr STAR expr','expr',3,'p_expr_binary','parser.py',255),
  ('expr -> expr SLASH expr','expr',3,'p_expr_binary','parser.py',256),
  ('expr -> expr LESS expr','expr',3,'p_expr_binary','parser.py',257),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr_binary','parser.py',258),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binary','parser.py',259),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binary','parser.py',260),
  ('expr -> expr EQUAL_EQUAL expr','expr',3,'p_expr_binary','parser.py',261),
  ('expr -> expr BANG_EQUAL expr','expr',3,'p_expr_binary','parser.py',262),
  ('expr -> expr OR expr','expr',3,'p_expr_binary','parser.py',263),
  ('expr -> expr AND expr','expr',3,'p_expr_binary','parser.py',264),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_grouping','parser.py',271),
  ('expr -> NUMBER','expr',1,'p_expr_literal','parser.py',278),
  ('expr -> NIL','expr',1,'p_expr_literal','parser.py',279),
  ('expr -> STRING','expr',1,'p_expr_literal','parser.py',280),
  ('expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET','expr',3,'p_expr_literal','parser.py',281),
  ('expr -> expr DOT IDENTIFIER','expr',3,'p_expr_dispatch','parser.py',297),
  ('expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',6,'p_expr_dispatch','parser.py',298),
  ('expr -> expr LEFT_BRACKET expr RIGHT_BRACKET','expr',4,'p_expr_indexof','parser.py',308),
  ('expr -> IDENTIFIER COLON COLON LEFT_BRACE prop_assignment_list RIGHT_BRACE','expr',6,'p_expr_type','parser.py',315),
  ('prop_assignment_list -> IDENTIFIER EQUAL expr COMMA prop_assignment_list','prop_assignment_list',5,'p_property_assignment_list','parser.py',322),
  ('prop_assignment_list -> IDENTIFIER EQUAL expr COMMA','prop_assignment_list',4,'p_property_assignment_list','parser.py',323),
  ('prop_assignment_list -> IDENTIFIER EQUAL expr','prop_assignment_list',3,'p_property_assignment_list','parser.py',324),
  ('expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',4,'p_expr_fn_call','parser.py',334),
  ('expr_list_comma -> expr COMMA expr_list_comma','expr_list_comma',3,'p_expr_list_comma','parser.py',341),
  ('expr_list_comma -> expr','expr_list_comma',1,'p_expr_list_comma','parser.py',342),
  ('expr_list_comma -> empty','expr_list_comma',1,'p_expr_list_comma','parser.py',343),
  ('expr -> IDENTIFIER','expr',1,'p_expr_variable','parser.py',356),
  ('expr -> expr IF expr ELSE expr','expr',5,'p_expr_ternary','parser.py',363),
  ('expr -> LEFT_BRACE stmt_list RIGHT_BRACE','expr',3,'p_expr_block','parser.py',370),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET','indexof_list',3,'p_indexof_list','parser.py',377),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list','indexof_list',4,'p_indexof_list','parser.py',378),
  ('declaration -> LET IDENTIFIER EQUAL expr SEMICOLON','declaration',5,'p_declaration','parser.py',388),
  ('declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON','declaration',6,'p_declaration','parser.py',389),
  ('declaration -> LET IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',390),
  ('declaration -> LET MUT IDENTIFIER SEMICOLON','declaration',4,'p_declaration','parser.py',391),
  ('assign -> expr EQUAL expr SEMICOLON','assign',4,'p_assign','parser.py',405),
  ('assign -> expr indexof_list EQUAL expr SEMICOLON','assign',5,'p_assign','parser.py',406),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',416),
]
