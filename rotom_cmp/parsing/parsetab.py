
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALrightNOTnonassocLESSLESS_EQUALGREATERGREATER_EQUALEQUAL_EQUALBANG_EQUALANDORleftPLUSMINUSSTARSLASHAND ARROW BANG BANG_EQUAL CLASS COLON COMMA DOT ELSE EOF EQUAL EQUAL_EQUAL FALSE FN FOR GREATER GREATER_EQUAL IDENTIFIER IF IN LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LET MINUS MUT NIL NOT NUMBER OR PLUS PRINT PRINTLN RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING SUPER THIS TRUE USE WHILE\n    prog : use_list fn_def_list\n    \n    use_list : use use_list\n             | use\n             | empty\n    \n    use : USE STRING ARROW IDENTIFIER SEMICOLON\n        | USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON\n    \n    fn_def_list : fn_def fn_def_list\n                | fn_def\n    \n    fn_def : FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE\n           | FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr\n    \n    param_list : IDENTIFIER COMMA param_list\n               | IDENTIFIER\n               | empty\n    \n    stmt_list : stmt stmt_list\n              | stmt\n    \n    stmt : expr SEMICOLON\n         | declaration\n         | assign\n         | print\n         | condition\n         | while\n         | for\n         | return\n    \n    return : RETURN expr SEMICOLON\n    \n    for : FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n        | FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    while : WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    condition : IF expr LEFT_BRACE stmt_list RIGHT_BRACE\n              | IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    print : PRINT expr SEMICOLON\n          | PRINTLN expr SEMICOLON\n    \n    expr : NOT expr\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr STAR expr\n         | expr SLASH expr\n         | expr LESS expr\n         | expr LESS_EQUAL expr\n         | expr GREATER expr\n         | expr GREATER_EQUAL expr\n         | expr EQUAL_EQUAL expr\n         | expr BANG_EQUAL expr\n         | expr OR expr\n         | expr AND expr\n    \n    expr : LEFT_PAREN expr RIGHT_PAREN\n    \n    expr : NUMBER\n         | NIL\n         | STRING\n         | LEFT_BRACKET expr_list_comma RIGHT_BRACKET\n    \n    expr : expr DOT IDENTIFIER\n         | expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr : expr LEFT_BRACKET expr RIGHT_BRACKET\n    \n    expr : expr LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr_list_comma : expr COMMA expr_list_comma\n                 | expr\n                 | empty\n    \n    expr : IDENTIFIER\n    \n    expr : expr IF expr ELSE expr\n    \n    expr : LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    indexof_list : LEFT_BRACKET expr RIGHT_BRACKET\n                 | LEFT_BRACKET expr RIGHT_BRACKET indexof_list\n    \n    declaration : LET IDENTIFIER EQUAL expr SEMICOLON\n                | LET MUT IDENTIFIER EQUAL expr SEMICOLON\n                | LET IDENTIFIER SEMICOLON\n                | LET MUT IDENTIFIER SEMICOLON\n    \n    assign : expr EQUAL expr SEMICOLON\n           | expr indexof_list EQUAL expr SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'USE':([0,3,20,28,],[5,5,-5,-6,]),'FN':([0,2,3,4,7,9,20,28,29,43,44,45,54,57,78,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,125,138,142,150,],[-68,8,-3,-4,8,-2,-5,-6,-57,-46,-47,-48,-10,-9,-32,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,-49,-53,-52,-58,-51,]),'$end':([1,6,7,11,29,43,44,45,54,57,78,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,125,138,142,150,],[0,-1,-8,-7,-57,-46,-47,-48,-10,-9,-32,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,-49,-53,-52,-58,-51,]),'STRING':([5,26,27,30,31,33,35,36,37,38,39,40,41,42,46,47,49,50,51,53,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,90,110,112,113,114,115,117,118,119,120,122,124,127,128,133,134,140,143,144,145,147,148,149,153,157,158,159,162,163,],[10,45,45,45,45,45,-17,-18,-19,-20,-21,-22,-23,45,45,45,45,45,45,45,-16,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-64,-30,-31,45,45,-24,45,45,-66,45,-65,45,-67,-28,-62,-27,45,45,-63,45,-25,45,-29,-26,]),'IDENTIFIER':([8,13,14,16,22,26,27,30,31,33,35,36,37,38,39,40,41,42,46,47,48,49,50,51,52,53,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,84,90,110,112,113,114,115,117,118,119,120,121,122,124,127,128,133,134,140,143,144,145,147,148,149,153,157,158,159,162,163,],[12,15,17,17,17,29,29,29,29,29,-17,-18,-19,-20,-21,-22,-23,29,29,29,83,29,29,29,88,29,-16,29,29,29,29,29,29,29,29,29,29,29,29,105,29,29,29,29,116,29,29,29,29,29,-64,-30,-31,29,29,137,-24,29,29,-66,29,-65,29,-67,-28,-62,-27,29,29,-63,29,-25,29,-29,-26,]),'ARROW':([10,23,],[13,27,]),'LEFT_PAREN':([12,13,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,53,54,55,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,78,80,82,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,132,133,134,136,138,140,142,143,144,145,146,147,148,149,150,151,153,155,157,158,159,162,163,],[14,16,30,30,-57,30,30,30,73,-17,-18,-19,-20,-21,-22,-23,30,-46,-47,-48,30,30,30,30,30,30,73,73,-16,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-32,73,73,73,73,73,73,30,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,124,73,73,73,30,-49,30,30,30,-64,-30,-31,30,30,-24,73,30,-53,-52,30,-66,73,73,30,-65,73,-52,30,73,-67,-28,-62,73,-27,30,30,-51,73,-63,73,30,-25,30,-29,-26,]),'RIGHT_PAREN':([14,16,17,18,19,21,22,25,29,43,44,45,55,73,78,80,81,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,124,125,130,138,139,142,150,],[-68,-68,-12,23,-13,24,-68,-11,-57,-46,-47,-48,91,-68,-32,-55,-56,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,125,-49,-68,-68,-53,-54,-52,150,-58,-51,]),'SEMICOLON':([15,24,29,34,43,44,45,78,83,85,86,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,116,125,126,129,132,138,142,146,150,],[20,28,-57,59,-46,-47,-48,-32,115,117,118,122,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,128,-49,134,-53,-52,143,145,-52,-58,153,-51,]),'COMMA':([17,29,43,44,45,78,80,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,125,138,142,150,],[22,-57,-46,-47,-48,-32,112,121,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,-49,-53,-52,-58,-51,]),'LEFT_BRACE':([23,26,27,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,53,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,78,82,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,111,112,113,114,115,117,118,119,120,122,124,125,127,128,133,134,136,138,140,142,143,144,145,147,148,149,150,152,153,155,157,158,159,162,163,],[26,31,31,-57,31,31,31,-17,-18,-19,-20,-21,-22,-23,31,-46,-47,-48,31,31,31,31,31,31,-16,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-32,113,119,31,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,31,-49,31,31,31,-64,-30,-31,31,31,-24,31,-53,31,-66,31,-65,148,-52,31,-58,-67,-28,-62,-27,31,31,-51,157,-63,159,31,-25,31,-29,-26,]),'NOT':([26,27,30,31,33,35,36,37,38,39,40,41,42,46,47,49,50,51,53,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,90,110,112,113,114,115,117,118,119,120,122,124,127,128,133,134,140,143,144,145,147,148,149,153,157,158,159,162,163,],[42,42,42,42,42,-17,-18,-19,-20,-21,-22,-23,42,42,42,42,42,42,42,-16,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-64,-30,-31,42,42,-24,42,42,-66,42,-65,42,-67,-28,-62,-27,42,42,-63,42,-25,42,-29,-26,]),'NUMBER':([26,27,30,31,33,35,36,37,38,39,40,41,42,46,47,49,50,51,53,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,90,110,112,113,114,115,117,118,119,120,122,124,127,128,133,134,140,143,144,145,147,148,149,153,157,158,159,162,163,],[43,43,43,43,43,-17,-18,-19,-20,-21,-22,-23,43,43,43,43,43,43,43,-16,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-64,-30,-31,43,43,-24,43,43,-66,43,-65,43,-67,-28,-62,-27,43,43,-63,43,-25,43,-29,-26,]),'NIL':([26,27,30,31,33,35,36,37,38,39,40,41,42,46,47,49,50,51,53,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,90,110,112,113,114,115,117,118,119,120,122,124,127,128,133,134,140,143,144,145,147,148,149,153,157,158,159,162,163,],[44,44,44,44,44,-17,-18,-19,-20,-21,-22,-23,44,44,44,44,44,44,44,-16,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-64,-30,-31,44,44,-24,44,44,-66,44,-65,44,-67,-28,-62,-27,44,44,-63,44,-25,44,-29,-26,]),'LEFT_BRACKET':([26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,53,54,55,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,78,80,82,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,132,133,134,136,138,140,142,143,144,145,146,147,148,149,150,151,153,155,156,157,158,159,162,163,],[46,46,-57,46,46,46,74,-17,-18,-19,-20,-21,-22,-23,46,-46,-47,-48,46,46,46,46,46,46,90,90,-16,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-32,90,90,90,90,90,90,46,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,90,90,90,46,-49,46,46,46,-64,-30,-31,46,46,-24,90,46,-53,140,46,-66,90,90,46,-65,90,-52,46,90,-67,-28,-62,90,-27,46,46,-51,90,-63,90,140,46,-25,46,-29,-26,]),'LET':([26,31,33,35,36,37,38,39,40,41,59,113,115,117,118,119,122,128,134,143,144,145,147,148,153,157,158,159,162,163,],[48,48,48,-17,-18,-19,-20,-21,-22,-23,-16,48,-64,-30,-31,48,-24,-66,-65,-67,-28,-62,-27,48,-63,48,-25,48,-29,-26,]),'PRINT':([26,31,33,35,36,37,38,39,40,41,59,113,115,117,118,119,122,128,134,143,144,145,147,148,153,157,158,159,162,163,],[49,49,49,-17,-18,-19,-20,-21,-22,-23,-16,49,-64,-30,-31,49,-24,-66,-65,-67,-28,-62,-27,49,-63,49,-25,49,-29,-26,]),'PRINTLN':([26,31,33,35,36,37,38,39,40,41,59,113,115,117,118,119,122,128,134,143,144,145,147,148,153,157,158,159,162,163,],[50,50,50,-17,-18,-19,-20,-21,-22,-23,-16,50,-64,-30,-31,50,-24,-66,-65,-67,-28,-62,-27,50,-63,50,-25,50,-29,-26,]),'IF':([26,29,31,33,34,35,36,37,38,39,40,41,43,44,45,54,55,59,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,113,115,117,118,119,122,123,125,126,128,129,132,134,136,138,142,143,144,145,146,147,148,150,151,153,155,157,158,159,162,163,],[47,-57,47,47,75,-17,-18,-19,-20,-21,-22,-23,-46,-47,-48,75,75,-16,-32,75,75,75,75,75,75,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,75,75,75,-49,47,-64,-30,-31,47,-24,75,-53,-52,-66,75,75,-65,75,-52,75,-67,-28,-62,75,-27,47,-51,75,-63,75,47,-25,47,-29,-26,]),'WHILE':([26,31,33,35,36,37,38,39,40,41,59,113,115,117,118,119,122,128,134,143,144,145,147,148,153,157,158,159,162,163,],[51,51,51,-17,-18,-19,-20,-21,-22,-23,-16,51,-64,-30,-31,51,-24,-66,-65,-67,-28,-62,-27,51,-63,51,-25,51,-29,-26,]),'FOR':([26,31,33,35,36,37,38,39,40,41,59,113,115,117,118,119,122,128,134,143,144,145,147,148,153,157,158,159,162,163,],[52,52,52,-17,-18,-19,-20,-21,-22,-23,-16,52,-64,-30,-31,52,-24,-66,-65,-67,-28,-62,-27,52,-63,52,-25,52,-29,-26,]),'RETURN':([26,31,33,35,36,37,38,39,40,41,59,113,115,117,118,119,122,128,134,143,144,145,147,148,153,157,158,159,162,163,],[53,53,53,-17,-18,-19,-20,-21,-22,-23,-16,53,-64,-30,-31,53,-24,-66,-65,-67,-28,-62,-27,53,-63,53,-25,53,-29,-26,]),'PLUS':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,60,-46,-47,-48,60,60,60,60,60,60,60,60,60,-45,-59,-33,-34,-35,-36,60,60,60,60,60,60,60,60,-50,60,60,60,-49,60,-53,-52,60,60,60,-52,60,60,-51,60,60,]),'MINUS':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,61,-46,-47,-48,61,61,61,61,61,61,61,61,61,-45,-59,-33,-34,-35,-36,61,61,61,61,61,61,61,61,-50,61,61,61,-49,61,-53,-52,61,61,61,-52,61,61,-51,61,61,]),'STAR':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,62,-46,-47,-48,62,62,62,62,62,62,62,62,62,-45,-59,-33,-34,-35,-36,62,62,62,62,62,62,62,62,-50,62,62,62,-49,62,-53,-52,62,62,62,-52,62,62,-51,62,62,]),'SLASH':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,63,-46,-47,-48,63,63,63,63,63,63,63,63,63,-45,-59,-33,-34,-35,-36,63,63,63,63,63,63,63,63,-50,63,63,63,-49,63,-53,-52,63,63,63,-52,63,63,-51,63,63,]),'LESS':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,64,-46,-47,-48,64,64,64,64,64,64,64,64,64,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,64,64,64,-49,64,-53,-52,64,64,64,-52,64,64,-51,64,64,]),'LESS_EQUAL':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,65,-46,-47,-48,65,65,65,65,65,65,65,65,65,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,65,65,65,-49,65,-53,-52,65,65,65,-52,65,65,-51,65,65,]),'GREATER':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,66,-46,-47,-48,66,66,66,66,66,66,66,66,66,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,66,66,66,-49,66,-53,-52,66,66,66,-52,66,66,-51,66,66,]),'GREATER_EQUAL':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,67,-46,-47,-48,67,67,67,67,67,67,67,67,67,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,67,67,67,-49,67,-53,-52,67,67,67,-52,67,67,-51,67,67,]),'EQUAL_EQUAL':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,68,-46,-47,-48,68,68,68,68,68,68,68,68,68,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,68,68,68,-49,68,-53,-52,68,68,68,-52,68,68,-51,68,68,]),'BANG_EQUAL':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,69,-46,-47,-48,69,69,69,69,69,69,69,69,69,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,69,69,69,-49,69,-53,-52,69,69,69,-52,69,69,-51,69,69,]),'OR':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,70,-46,-47,-48,70,70,70,70,70,70,70,70,70,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,70,70,70,-49,70,-53,-52,70,70,70,-52,70,70,-51,70,70,]),'AND':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,71,-46,-47,-48,71,71,71,71,71,71,71,71,71,-45,-59,-33,-34,-35,-36,None,None,None,None,None,None,None,None,-50,71,71,71,-49,71,-53,-52,71,71,71,-52,71,71,-51,71,71,]),'DOT':([29,34,43,44,45,54,55,78,80,82,85,86,87,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,123,125,126,129,132,136,138,142,146,150,151,155,],[-57,72,-46,-47,-48,72,72,-32,72,72,72,72,72,72,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,72,72,72,-49,72,-53,-52,72,72,72,-52,72,72,-51,72,72,]),'EQUAL':([29,34,43,44,45,77,78,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,116,125,126,138,141,142,150,156,],[-57,76,-46,-47,-48,110,-32,114,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,-49,133,-53,-52,-52,-61,-58,-51,-60,]),'RIGHT_BRACKET':([29,43,44,45,46,78,79,80,81,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,111,112,123,125,130,138,142,150,151,],[-57,-46,-47,-48,-68,-32,111,-55,-56,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,126,-49,-68,138,-53,-54,-52,-58,-51,156,]),'ELSE':([29,43,44,45,78,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,108,111,125,138,142,144,150,],[-57,-46,-47,-48,-32,-45,-59,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-50,127,-49,-53,-52,-58,152,-51,]),'RIGHT_BRACE':([32,33,35,36,37,38,39,40,41,56,58,59,115,117,118,122,128,131,134,135,143,144,145,147,153,154,158,160,161,162,163,],[57,-15,-17,-18,-19,-20,-21,-22,-23,92,-14,-16,-64,-30,-31,-24,-66,144,-65,147,-67,-28,-62,-27,-63,158,-25,162,163,-29,-26,]),'MUT':([48,],[84,]),'IN':([88,137,],[120,149,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'use_list':([0,3,],[2,9,]),'use':([0,3,],[3,3,]),'empty':([0,3,14,16,22,46,73,112,124,],[4,4,19,19,19,81,81,81,81,]),'fn_def_list':([2,7,],[6,11,]),'fn_def':([2,7,],[7,7,]),'param_list':([14,16,22,],[18,21,25,]),'stmt_list':([26,31,33,113,119,148,157,159,],[32,56,58,131,135,154,160,161,]),'stmt':([26,31,33,113,119,148,157,159,],[33,33,33,33,33,33,33,33,]),'expr':([26,27,30,31,33,42,46,47,49,50,51,53,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,90,110,112,113,114,119,120,124,127,133,140,148,149,157,159,],[34,54,55,34,34,78,80,82,85,86,87,89,93,94,95,96,97,98,99,100,101,102,103,104,80,107,108,109,123,129,80,34,132,34,136,80,142,146,151,34,155,34,34,]),'declaration':([26,31,33,113,119,148,157,159,],[35,35,35,35,35,35,35,35,]),'assign':([26,31,33,113,119,148,157,159,],[36,36,36,36,36,36,36,36,]),'print':([26,31,33,113,119,148,157,159,],[37,37,37,37,37,37,37,37,]),'condition':([26,31,33,113,119,148,157,159,],[38,38,38,38,38,38,38,38,]),'while':([26,31,33,113,119,148,157,159,],[39,39,39,39,39,39,39,39,]),'for':([26,31,33,113,119,148,157,159,],[40,40,40,40,40,40,40,40,]),'return':([26,31,33,113,119,148,157,159,],[41,41,41,41,41,41,41,41,]),'indexof_list':([34,126,156,],[77,141,141,]),'expr_list_comma':([46,73,112,124,],[79,106,130,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> use_list fn_def_list','prog',2,'p_prog','parser.py',55),
  ('use_list -> use use_list','use_list',2,'p_use_list','parser.py',62),
  ('use_list -> use','use_list',1,'p_use_list','parser.py',63),
  ('use_list -> empty','use_list',1,'p_use_list','parser.py',64),
  ('use -> USE STRING ARROW IDENTIFIER SEMICOLON','use',5,'p_use','parser.py',77),
  ('use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON','use',7,'p_use','parser.py',78),
  ('fn_def_list -> fn_def fn_def_list','fn_def_list',2,'p_fn_def_list','parser.py',88),
  ('fn_def_list -> fn_def','fn_def_list',1,'p_fn_def_list','parser.py',89),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE','fn_def',8,'p_fn_def','parser.py',99),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr','fn_def',7,'p_fn_def','parser.py',100),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','parser.py',110),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','parser.py',111),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',112),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',125),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',126),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt','parser.py',136),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',137),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',138),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',139),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',140),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',141),
  ('stmt -> for','stmt',1,'p_stmt','parser.py',142),
  ('stmt -> return','stmt',1,'p_stmt','parser.py',143),
  ('return -> RETURN expr SEMICOLON','return',3,'p_return','parser.py',153),
  ('for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',7,'p_for','parser.py',160),
  ('for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',9,'p_for','parser.py',161),
  ('while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE','while',5,'p_while','parser.py',171),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE','condition',5,'p_condition','parser.py',178),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE','condition',9,'p_condition','parser.py',179),
  ('print -> PRINT expr SEMICOLON','print',3,'p_print','parser.py',189),
  ('print -> PRINTLN expr SEMICOLON','print',3,'p_print','parser.py',190),
  ('expr -> NOT expr','expr',2,'p_expr_unary','parser.py',198),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','parser.py',205),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','parser.py',206),
  ('expr -> expr STAR expr','expr',3,'p_expr_binary','parser.py',207),
  ('expr -> expr SLASH expr','expr',3,'p_expr_binary','parser.py',208),
  ('expr -> expr LESS expr','expr',3,'p_expr_binary','parser.py',209),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr_binary','parser.py',210),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binary','parser.py',211),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binary','parser.py',212),
  ('expr -> expr EQUAL_EQUAL expr','expr',3,'p_expr_binary','parser.py',213),
  ('expr -> expr BANG_EQUAL expr','expr',3,'p_expr_binary','parser.py',214),
  ('expr -> expr OR expr','expr',3,'p_expr_binary','parser.py',215),
  ('expr -> expr AND expr','expr',3,'p_expr_binary','parser.py',216),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_grouping','parser.py',223),
  ('expr -> NUMBER','expr',1,'p_expr_literal','parser.py',230),
  ('expr -> NIL','expr',1,'p_expr_literal','parser.py',231),
  ('expr -> STRING','expr',1,'p_expr_literal','parser.py',232),
  ('expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET','expr',3,'p_expr_literal','parser.py',233),
  ('expr -> expr DOT IDENTIFIER','expr',3,'p_expr_dispatch','parser.py',249),
  ('expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',6,'p_expr_dispatch','parser.py',250),
  ('expr -> expr LEFT_BRACKET expr RIGHT_BRACKET','expr',4,'p_expr_indexof','parser.py',260),
  ('expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',4,'p_expr_fn_call','parser.py',267),
  ('expr_list_comma -> expr COMMA expr_list_comma','expr_list_comma',3,'p_expr_list_comma','parser.py',274),
  ('expr_list_comma -> expr','expr_list_comma',1,'p_expr_list_comma','parser.py',275),
  ('expr_list_comma -> empty','expr_list_comma',1,'p_expr_list_comma','parser.py',276),
  ('expr -> IDENTIFIER','expr',1,'p_expr_variable','parser.py',289),
  ('expr -> expr IF expr ELSE expr','expr',5,'p_expr_ternary','parser.py',296),
  ('expr -> LEFT_BRACE stmt_list RIGHT_BRACE','expr',3,'p_expr_block','parser.py',303),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET','indexof_list',3,'p_indexof_list','parser.py',310),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list','indexof_list',4,'p_indexof_list','parser.py',311),
  ('declaration -> LET IDENTIFIER EQUAL expr SEMICOLON','declaration',5,'p_declaration','parser.py',321),
  ('declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON','declaration',6,'p_declaration','parser.py',322),
  ('declaration -> LET IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',323),
  ('declaration -> LET MUT IDENTIFIER SEMICOLON','declaration',4,'p_declaration','parser.py',324),
  ('assign -> expr EQUAL expr SEMICOLON','assign',4,'p_assign','parser.py',338),
  ('assign -> expr indexof_list EQUAL expr SEMICOLON','assign',5,'p_assign','parser.py',339),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',349),
]
