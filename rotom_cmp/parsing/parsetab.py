
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BANG BANG_EQUAL CLASS COLON COMMA DOT ELSE EOF EQUAL EQUAL_EQUAL FALSE FN FOR GREATER GREATER_EQUAL IDENTIFIER IF IN LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LET MINUS MUT NIL NUMBER OR PLUS PRINT PRINTLN RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING SUPER THIS TRUE USE WHILE\n    prog : use_list fn_def_list\n    \n    use_list : use use_list\n             | use\n             | empty\n    \n    use : USE STRING ARROW IDENTIFIER SEMICOLON\n        | USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON\n    \n    fn_def_list : fn_def fn_def_list\n                | fn_def\n    \n    fn_def : FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE\n           | FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr\n    \n    param_list : IDENTIFIER COMMA param_list\n               | IDENTIFIER\n               | empty\n    \n    stmt_list : stmt stmt_list\n              | stmt\n    \n    stmt : expr\n         | declaration\n         | assign\n         | print\n         | condition\n         | while\n         | for\n    \n    for : FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n        | FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    while : WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    condition : IF expr LEFT_BRACE stmt_list RIGHT_BRACE\n              | IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    print : PRINT expr SEMICOLON\n          | PRINTLN expr SEMICOLON\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr STAR expr\n         | expr SLASH expr\n         | expr LESS expr\n         | expr LESS_EQUAL expr\n         | expr GREATER expr\n         | expr GREATER_EQUAL expr\n         | expr EQUAL_EQUAL expr\n         | expr BANG_EQUAL expr\n    \n    expr : LEFT_PAREN expr RIGHT_PAREN\n    \n    expr : NUMBER\n         | NIL\n         | STRING\n         | LEFT_BRACKET expr_list_comma RIGHT_BRACKET\n    \n    expr : expr DOT IDENTIFIER\n         | expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr : expr LEFT_BRACKET expr RIGHT_BRACKET\n    \n    expr : IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr_list_comma : expr COMMA expr_list_comma\n                 | expr\n                 | empty\n    \n    expr : IDENTIFIER\n    \n    expr : expr IF expr ELSE expr\n    \n    expr : LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    indexof_list : LEFT_BRACKET expr RIGHT_BRACKET\n                 | LEFT_BRACKET expr RIGHT_BRACKET indexof_list\n    \n    declaration : LET IDENTIFIER EQUAL expr SEMICOLON\n                | LET MUT IDENTIFIER EQUAL expr SEMICOLON\n                | LET IDENTIFIER SEMICOLON\n                | LET MUT IDENTIFIER SEMICOLON\n    \n    assign : IDENTIFIER EQUAL expr SEMICOLON\n           | IDENTIFIER indexof_list EQUAL expr SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'USE':([0,3,20,28,],[5,5,-5,-6,]),'FN':([0,2,3,4,7,9,20,28,41,42,43,51,52,59,88,89,90,91,92,93,94,95,96,97,98,99,100,103,114,119,132,139,],[-63,8,-3,-4,8,-2,-5,-6,-41,-42,-43,-52,-10,-9,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,-48,-47,-53,-46,]),'$end':([1,6,7,11,41,42,43,51,52,59,88,89,90,91,92,93,94,95,96,97,98,99,100,103,114,119,132,139,],[0,-1,-8,-7,-41,-42,-43,-52,-10,-9,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,-48,-47,-53,-46,]),'STRING':([5,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,51,53,54,56,61,62,63,64,65,66,67,68,69,70,72,73,86,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,107,109,110,111,112,114,115,118,119,120,124,125,129,132,133,134,136,137,138,139,141,144,145,146,149,150,],[10,43,43,-52,43,43,43,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,43,43,43,43,43,-52,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,43,43,43,-59,-28,-29,43,43,-48,-61,43,-47,43,43,-60,-62,-53,-26,-57,-25,43,43,-46,-58,43,-23,43,-27,-24,]),'IDENTIFIER':([8,13,14,16,22,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,56,61,62,63,64,65,66,67,68,69,70,71,72,73,79,86,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,107,109,110,111,112,113,114,115,118,119,120,124,125,129,132,133,134,136,137,138,139,141,144,145,146,149,150,],[12,15,17,17,17,29,51,-52,51,29,29,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,51,51,78,51,51,51,83,-52,51,51,51,51,51,51,51,51,51,51,51,51,51,100,51,51,108,51,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,51,29,51,-59,-28,-29,29,51,128,-48,-61,51,-47,51,51,-60,-62,-53,-26,-57,-25,29,51,-46,-58,29,-23,29,-27,-24,]),'ARROW':([10,23,],[13,27,]),'LEFT_PAREN':([12,13,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,51,53,54,56,61,62,63,64,65,66,67,68,69,70,72,73,86,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,107,109,110,111,112,114,115,118,119,120,124,125,129,132,133,134,136,137,138,139,141,144,145,146,149,150,],[14,16,30,30,53,30,30,30,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,30,30,30,30,30,53,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,118,-44,30,30,30,-59,-28,-29,30,30,-48,-61,30,-47,30,30,-60,-62,-53,-26,-57,-25,30,30,-46,-58,30,-23,30,-27,-24,]),'RIGHT_PAREN':([14,16,17,18,19,21,22,25,41,42,43,51,53,57,75,76,84,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,114,118,119,121,131,132,139,],[-63,-63,-12,23,-13,24,-63,-11,-41,-42,-43,-52,-63,88,-50,-51,114,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,-63,-48,-63,-47,-49,139,-53,-46,]),'SEMICOLON':([15,24,41,42,43,51,78,80,81,85,88,89,90,91,92,93,94,95,96,97,98,99,100,103,108,114,116,119,123,132,135,139,],[20,28,-41,-42,-43,-52,107,109,110,115,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,125,-48,129,-47,134,-53,141,-46,]),'COMMA':([17,41,42,43,51,75,83,88,89,90,91,92,93,94,95,96,97,98,99,100,103,114,119,132,139,],[22,-41,-42,-43,-52,104,113,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,-48,-47,-53,-46,]),'LEFT_BRACE':([23,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,51,53,54,56,61,62,63,64,65,66,67,68,69,70,72,73,77,82,86,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,107,109,110,111,112,114,115,118,119,120,124,125,127,129,132,133,134,136,137,138,139,140,141,143,144,145,146,149,150,],[26,31,31,-52,31,31,31,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,31,31,31,31,31,-52,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,105,111,31,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,31,31,31,-59,-28,-29,31,31,-48,-61,31,-47,31,31,-60,137,-62,-53,-26,-57,-25,31,31,-46,144,-58,146,31,-23,31,-27,-24,]),'NUMBER':([26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,51,53,54,56,61,62,63,64,65,66,67,68,69,70,72,73,86,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,107,109,110,111,112,114,115,118,119,120,124,125,129,132,133,134,136,137,138,139,141,144,145,146,149,150,],[41,41,-52,41,41,41,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,41,41,41,41,41,-52,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,41,41,41,-59,-28,-29,41,41,-48,-61,41,-47,41,41,-60,-62,-53,-26,-57,-25,41,41,-46,-58,41,-23,41,-27,-24,]),'NIL':([26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,51,53,54,56,61,62,63,64,65,66,67,68,69,70,72,73,86,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,107,109,110,111,112,114,115,118,119,120,124,125,129,132,133,134,136,137,138,139,141,144,145,146,149,150,],[42,42,-52,42,42,42,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,42,42,42,42,42,-52,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,42,42,42,-59,-28,-29,42,42,-48,-61,42,-47,42,42,-60,-62,-53,-26,-57,-25,42,42,-46,-58,42,-23,42,-27,-24,]),'LEFT_BRACKET':([26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,51,52,53,54,56,57,61,62,63,64,65,66,67,68,69,70,72,73,75,77,80,81,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,112,114,115,116,117,118,119,120,123,124,125,127,129,132,133,134,135,136,137,138,139,141,143,144,145,146,149,150,],[44,44,56,44,44,44,72,-17,-18,-19,-20,-21,-22,-41,-42,-43,44,44,44,44,44,-52,72,44,44,44,72,44,44,44,44,44,44,44,44,44,44,44,44,72,72,72,72,72,72,44,72,-40,-54,72,72,72,72,72,72,72,72,72,72,-45,72,72,-44,44,44,44,-59,-28,-29,44,44,-48,-61,72,56,44,-47,44,72,44,-60,72,-62,72,-26,-57,72,-25,44,44,-46,-58,72,44,-23,44,-27,-24,]),'LET':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,51,88,89,90,91,92,93,94,95,96,97,98,99,100,103,105,107,109,110,111,114,115,119,125,129,132,133,134,136,137,139,141,144,145,146,149,150,],[46,-52,46,46,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,-52,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,46,-59,-28,-29,46,-48,-61,-47,-60,-62,-53,-26,-57,-25,46,-46,-58,46,-23,46,-27,-24,]),'PRINT':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,51,88,89,90,91,92,93,94,95,96,97,98,99,100,103,105,107,109,110,111,114,115,119,125,129,132,133,134,136,137,139,141,144,145,146,149,150,],[47,-52,47,47,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,-52,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,47,-59,-28,-29,47,-48,-61,-47,-60,-62,-53,-26,-57,-25,47,-46,-58,47,-23,47,-27,-24,]),'PRINTLN':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,51,88,89,90,91,92,93,94,95,96,97,98,99,100,103,105,107,109,110,111,114,115,119,125,129,132,133,134,136,137,139,141,144,145,146,149,150,],[48,-52,48,48,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,-52,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,48,-59,-28,-29,48,-48,-61,-47,-60,-62,-53,-26,-57,-25,48,-46,-58,48,-23,48,-27,-24,]),'IF':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,107,109,110,111,114,115,116,119,123,125,127,129,132,133,134,135,136,137,139,141,143,144,145,146,149,150,],[45,-52,45,45,73,-17,-18,-19,-20,-21,-22,-41,-42,-43,-52,73,73,73,73,73,73,73,73,73,-40,-54,73,73,73,73,73,73,73,73,73,73,-45,73,73,-44,45,-59,-28,-29,45,-48,-61,73,-47,73,-60,73,-62,73,-26,-57,73,-25,45,-46,-58,73,45,-23,45,-27,-24,]),'WHILE':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,51,88,89,90,91,92,93,94,95,96,97,98,99,100,103,105,107,109,110,111,114,115,119,125,129,132,133,134,136,137,139,141,144,145,146,149,150,],[49,-52,49,49,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,-52,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,49,-59,-28,-29,49,-48,-61,-47,-60,-62,-53,-26,-57,-25,49,-46,-58,49,-23,49,-27,-24,]),'FOR':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,51,88,89,90,91,92,93,94,95,96,97,98,99,100,103,105,107,109,110,111,114,115,119,125,129,132,133,134,136,137,139,141,144,145,146,149,150,],[50,-52,50,50,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,-52,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,50,-59,-28,-29,50,-48,-61,-47,-60,-62,-53,-26,-57,-25,50,-46,-58,50,-23,50,-27,-24,]),'PLUS':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,61,-41,-42,-43,-52,61,61,61,61,61,61,61,61,61,-40,-54,61,61,61,61,61,61,61,61,61,61,-45,61,61,-44,-48,61,-47,61,61,61,61,-46,61,]),'MINUS':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,62,-41,-42,-43,-52,62,62,62,62,62,62,62,62,62,-40,-54,62,62,62,62,62,62,62,62,62,62,-45,62,62,-44,-48,62,-47,62,62,62,62,-46,62,]),'STAR':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,63,-41,-42,-43,-52,63,63,63,63,63,63,63,63,63,-40,-54,63,63,63,63,63,63,63,63,63,63,-45,63,63,-44,-48,63,-47,63,63,63,63,-46,63,]),'SLASH':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,64,-41,-42,-43,-52,64,64,64,64,64,64,64,64,64,-40,-54,64,64,64,64,64,64,64,64,64,64,-45,64,64,-44,-48,64,-47,64,64,64,64,-46,64,]),'LESS':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,65,-41,-42,-43,-52,65,65,65,65,65,65,65,65,65,-40,-54,65,65,65,65,65,65,65,65,65,65,-45,65,65,-44,-48,65,-47,65,65,65,65,-46,65,]),'LESS_EQUAL':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,66,-41,-42,-43,-52,66,66,66,66,66,66,66,66,66,-40,-54,66,66,66,66,66,66,66,66,66,66,-45,66,66,-44,-48,66,-47,66,66,66,66,-46,66,]),'GREATER':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,67,-41,-42,-43,-52,67,67,67,67,67,67,67,67,67,-40,-54,67,67,67,67,67,67,67,67,67,67,-45,67,67,-44,-48,67,-47,67,67,67,67,-46,67,]),'GREATER_EQUAL':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,68,-41,-42,-43,-52,68,68,68,68,68,68,68,68,68,-40,-54,68,68,68,68,68,68,68,68,68,68,-45,68,68,-44,-48,68,-47,68,68,68,68,-46,68,]),'EQUAL_EQUAL':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,69,-41,-42,-43,-52,69,69,69,69,69,69,69,69,69,-40,-54,69,69,69,69,69,69,69,69,69,69,-45,69,69,-44,-48,69,-47,69,69,69,69,-46,69,]),'BANG_EQUAL':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,70,-41,-42,-43,-52,70,70,70,70,70,70,70,70,70,-40,-54,70,70,70,70,70,70,70,70,70,70,-45,70,70,-44,-48,70,-47,70,70,70,70,-46,70,]),'DOT':([29,34,41,42,43,51,52,57,75,77,80,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,119,123,127,132,135,139,143,],[-52,71,-41,-42,-43,-52,71,71,71,71,71,71,71,71,71,-40,-54,71,71,71,71,71,71,71,71,71,71,-45,71,71,-44,-48,71,-47,71,71,71,71,-46,71,]),'RIGHT_BRACE':([29,32,33,34,35,36,37,38,39,40,41,42,43,51,58,60,88,89,90,91,92,93,94,95,96,97,98,99,100,103,107,109,110,114,115,119,122,125,126,129,132,133,134,136,139,141,142,145,147,148,149,150,],[-52,59,-15,-16,-17,-18,-19,-20,-21,-22,-41,-42,-43,-52,89,-14,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-44,-59,-28,-29,-48,-61,-47,133,-60,136,-62,-53,-26,-57,-25,-46,-58,145,-23,149,150,-27,-24,]),'EQUAL':([29,55,78,108,117,130,],[54,86,106,124,-55,-56,]),'RIGHT_BRACKET':([41,42,43,44,51,74,75,76,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,114,119,121,132,139,],[-41,-42,-43,-63,-52,103,-50,-51,117,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,119,-44,-63,-48,-47,-49,-53,-46,]),'ELSE':([41,42,43,51,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,114,119,132,133,139,],[-41,-42,-43,-52,-40,-54,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,120,-44,-48,-47,-53,140,-46,]),'MUT':([46,],[79,]),'IN':([83,128,],[112,138,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'use_list':([0,3,],[2,9,]),'use':([0,3,],[3,3,]),'empty':([0,3,14,16,22,44,53,104,118,],[4,4,19,19,19,76,76,76,76,]),'fn_def_list':([2,7,],[6,11,]),'fn_def':([2,7,],[7,7,]),'param_list':([14,16,22,],[18,21,25,]),'stmt_list':([26,31,33,105,111,137,144,146,],[32,58,60,122,126,142,147,148,]),'stmt':([26,31,33,105,111,137,144,146,],[33,33,33,33,33,33,33,33,]),'expr':([26,27,30,31,33,44,45,47,48,49,53,54,56,61,62,63,64,65,66,67,68,69,70,72,73,86,104,105,106,111,112,118,120,124,137,138,144,146,],[34,52,57,34,34,75,77,80,81,82,75,85,87,90,91,92,93,94,95,96,97,98,99,101,102,116,75,34,123,34,127,75,132,135,34,143,34,34,]),'declaration':([26,31,33,105,111,137,144,146,],[35,35,35,35,35,35,35,35,]),'assign':([26,31,33,105,111,137,144,146,],[36,36,36,36,36,36,36,36,]),'print':([26,31,33,105,111,137,144,146,],[37,37,37,37,37,37,37,37,]),'condition':([26,31,33,105,111,137,144,146,],[38,38,38,38,38,38,38,38,]),'while':([26,31,33,105,111,137,144,146,],[39,39,39,39,39,39,39,39,]),'for':([26,31,33,105,111,137,144,146,],[40,40,40,40,40,40,40,40,]),'indexof_list':([29,117,],[55,130,]),'expr_list_comma':([44,53,104,118,],[74,84,121,131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> use_list fn_def_list','prog',2,'p_prog','parser.py',32),
  ('use_list -> use use_list','use_list',2,'p_use_list','parser.py',39),
  ('use_list -> use','use_list',1,'p_use_list','parser.py',40),
  ('use_list -> empty','use_list',1,'p_use_list','parser.py',41),
  ('use -> USE STRING ARROW IDENTIFIER SEMICOLON','use',5,'p_use','parser.py',54),
  ('use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON','use',7,'p_use','parser.py',55),
  ('fn_def_list -> fn_def fn_def_list','fn_def_list',2,'p_fn_def_list','parser.py',65),
  ('fn_def_list -> fn_def','fn_def_list',1,'p_fn_def_list','parser.py',66),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE','fn_def',8,'p_fn_def','parser.py',76),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr','fn_def',7,'p_fn_def','parser.py',77),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','parser.py',87),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','parser.py',88),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',89),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',102),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',103),
  ('stmt -> expr','stmt',1,'p_stmt','parser.py',113),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',114),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',115),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',116),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',117),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',118),
  ('stmt -> for','stmt',1,'p_stmt','parser.py',119),
  ('for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',7,'p_for','parser.py',126),
  ('for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',9,'p_for','parser.py',127),
  ('while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE','while',5,'p_while','parser.py',137),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE','condition',5,'p_condition','parser.py',144),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE','condition',9,'p_condition','parser.py',145),
  ('print -> PRINT expr SEMICOLON','print',3,'p_print','parser.py',155),
  ('print -> PRINTLN expr SEMICOLON','print',3,'p_print','parser.py',156),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','parser.py',164),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','parser.py',165),
  ('expr -> expr STAR expr','expr',3,'p_expr_binary','parser.py',166),
  ('expr -> expr SLASH expr','expr',3,'p_expr_binary','parser.py',167),
  ('expr -> expr LESS expr','expr',3,'p_expr_binary','parser.py',168),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr_binary','parser.py',169),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binary','parser.py',170),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binary','parser.py',171),
  ('expr -> expr EQUAL_EQUAL expr','expr',3,'p_expr_binary','parser.py',172),
  ('expr -> expr BANG_EQUAL expr','expr',3,'p_expr_binary','parser.py',173),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_grouping','parser.py',180),
  ('expr -> NUMBER','expr',1,'p_expr_literal','parser.py',187),
  ('expr -> NIL','expr',1,'p_expr_literal','parser.py',188),
  ('expr -> STRING','expr',1,'p_expr_literal','parser.py',189),
  ('expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET','expr',3,'p_expr_literal','parser.py',190),
  ('expr -> expr DOT IDENTIFIER','expr',3,'p_expr_dispatch','parser.py',206),
  ('expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',6,'p_expr_dispatch','parser.py',207),
  ('expr -> expr LEFT_BRACKET expr RIGHT_BRACKET','expr',4,'p_expr_indexof','parser.py',217),
  ('expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',4,'p_expr_fn_call','parser.py',224),
  ('expr_list_comma -> expr COMMA expr_list_comma','expr_list_comma',3,'p_expr_list_comma','parser.py',231),
  ('expr_list_comma -> expr','expr_list_comma',1,'p_expr_list_comma','parser.py',232),
  ('expr_list_comma -> empty','expr_list_comma',1,'p_expr_list_comma','parser.py',233),
  ('expr -> IDENTIFIER','expr',1,'p_expr_variable','parser.py',246),
  ('expr -> expr IF expr ELSE expr','expr',5,'p_expr_ternary','parser.py',253),
  ('expr -> LEFT_BRACE stmt_list RIGHT_BRACE','expr',3,'p_expr_block','parser.py',260),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET','indexof_list',3,'p_indexof_list','parser.py',267),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list','indexof_list',4,'p_indexof_list','parser.py',268),
  ('declaration -> LET IDENTIFIER EQUAL expr SEMICOLON','declaration',5,'p_declaration','parser.py',278),
  ('declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON','declaration',6,'p_declaration','parser.py',279),
  ('declaration -> LET IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',280),
  ('declaration -> LET MUT IDENTIFIER SEMICOLON','declaration',4,'p_declaration','parser.py',281),
  ('assign -> IDENTIFIER EQUAL expr SEMICOLON','assign',4,'p_assign','parser.py',295),
  ('assign -> IDENTIFIER indexof_list EQUAL expr SEMICOLON','assign',5,'p_assign','parser.py',296),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',306),
]
