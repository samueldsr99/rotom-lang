
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BANG BANG_EQUAL CLASS COMMA DOT ELSE EOF EQUAL EQUAL_EQUAL FALSE FN FOR GREATER GREATER_EQUAL IDENTIFIER IF LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LET MINUS MUT NIL NUMBER OR PLUS PRINT PRINTLN RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING SUPER THIS TRUE WHILE\n    prog : fn_def_list\n    \n    fn_def_list : fn_def fn_def_list\n                | fn_def\n    \n    fn_def : FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE\n           | FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr\n    \n    param_list : IDENTIFIER COMMA param_list\n               | IDENTIFIER\n               | empty\n    \n    stmt_list : stmt stmt_list\n              | stmt\n    \n    stmt : expr\n         | declaration\n         | assign\n         | print\n         | condition\n         | while\n    \n    while : WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    condition : IF expr LEFT_BRACE stmt_list RIGHT_BRACE\n              | IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    print : PRINT expr SEMICOLON\n          | PRINTLN expr SEMICOLON\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr STAR expr\n         | expr SLASH expr\n         | expr LESS expr\n         | expr LESS_EQUAL expr\n         | expr GREATER expr\n         | expr GREATER_EQUAL expr\n         | expr EQUAL_EQUAL expr\n         | expr BANG_EQUAL expr\n    \n    expr : LEFT_PAREN expr RIGHT_PAREN\n    \n    expr : NUMBER\n         | NIL\n         | STRING\n         | LEFT_BRACKET expr_list_comma RIGHT_BRACKET\n    \n    expr : IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr_list_comma : expr COMMA expr_list_comma\n                 | expr\n                 | empty\n    \n    expr : IDENTIFIER\n    \n    expr : expr IF expr ELSE expr\n    \n    expr : LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    declaration : LET IDENTIFIER EQUAL expr SEMICOLON\n                | LET MUT IDENTIFIER EQUAL expr SEMICOLON\n    \n    assign : IDENTIFIER EQUAL expr SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'FN':([0,3,27,28,29,36,37,42,66,67,68,69,70,71,72,73,74,75,76,77,79,87,95,],[4,4,-33,-34,-35,-41,-5,-4,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-37,-42,]),'$end':([1,2,3,5,27,28,29,36,37,42,66,67,68,69,70,71,72,73,74,75,76,77,79,87,95,],[0,-1,-3,-2,-33,-34,-35,-41,-5,-4,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-37,-42,]),'IDENTIFIER':([4,7,11,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,44,45,46,47,48,49,50,51,52,53,54,60,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,93,95,96,97,99,101,102,104,],[6,8,8,16,36,-41,36,16,16,-11,-12,-13,-14,-15,-16,-33,-34,-35,36,36,59,36,36,36,-41,36,36,36,36,36,36,36,36,36,36,36,36,36,83,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,36,16,36,-20,-21,16,-37,-46,36,36,-42,-18,-44,-17,-45,16,-19,]),'LEFT_PAREN':([6,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,44,45,46,47,48,49,50,51,52,53,54,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,93,95,96,97,99,101,102,104,],[7,17,17,38,17,17,17,-11,-12,-13,-14,-15,-16,-33,-34,-35,17,17,17,17,17,38,17,17,17,17,17,17,17,17,17,17,17,17,17,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,17,17,17,-20,-21,17,-37,-46,17,17,-42,-18,-44,-17,-45,17,-19,]),'RIGHT_PAREN':([7,8,9,10,11,13,27,28,29,36,38,40,56,57,64,66,67,68,69,70,71,72,73,74,75,76,77,79,80,87,90,95,],[-47,-7,12,-8,-47,-6,-33,-34,-35,-41,-47,66,-39,-40,87,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-47,-37,-38,-42,]),'COMMA':([8,27,28,29,36,56,66,67,68,69,70,71,72,73,74,75,76,77,79,87,95,],[11,-33,-34,-35,-41,80,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-37,-42,]),'LEFT_BRACE':([12,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,44,45,46,47,48,49,50,51,52,53,54,58,63,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,93,95,96,97,99,100,101,102,104,],[14,18,18,-41,18,18,18,-11,-12,-13,-14,-15,-16,-33,-34,-35,18,18,18,18,18,-41,18,18,18,18,18,18,18,18,18,18,18,18,18,81,86,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,18,18,18,-20,-21,18,-37,-46,18,18,-42,-18,-44,-17,102,-45,18,-19,]),'ARROW':([12,],[15,]),'NUMBER':([14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,44,45,46,47,48,49,50,51,52,53,54,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,93,95,96,97,99,101,102,104,],[27,27,-41,27,27,27,-11,-12,-13,-14,-15,-16,-33,-34,-35,27,27,27,27,27,-41,27,27,27,27,27,27,27,27,27,27,27,27,27,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,27,27,27,-20,-21,27,-37,-46,27,27,-42,-18,-44,-17,-45,27,-19,]),'NIL':([14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,44,45,46,47,48,49,50,51,52,53,54,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,93,95,96,97,99,101,102,104,],[28,28,-41,28,28,28,-11,-12,-13,-14,-15,-16,-33,-34,-35,28,28,28,28,28,-41,28,28,28,28,28,28,28,28,28,28,28,28,28,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,28,28,28,-20,-21,28,-37,-46,28,28,-42,-18,-44,-17,-45,28,-19,]),'STRING':([14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,44,45,46,47,48,49,50,51,52,53,54,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,93,95,96,97,99,101,102,104,],[29,29,-41,29,29,29,-11,-12,-13,-14,-15,-16,-33,-34,-35,29,29,29,29,29,-41,29,29,29,29,29,29,29,29,29,29,29,29,29,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,29,29,29,-20,-21,29,-37,-46,29,29,-42,-18,-44,-17,-45,29,-19,]),'LEFT_BRACKET':([14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,38,39,44,45,46,47,48,49,50,51,52,53,54,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,84,85,86,87,88,89,93,95,96,97,99,101,102,104,],[30,30,-41,30,30,30,-11,-12,-13,-14,-15,-16,-33,-34,-35,30,30,30,30,30,-41,30,30,30,30,30,30,30,30,30,30,30,30,30,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,30,30,30,-20,-21,30,-37,-46,30,30,-42,-18,-44,-17,-45,30,-19,]),'LET':([14,16,18,20,21,22,23,24,25,26,27,28,29,36,66,67,68,69,70,71,72,73,74,75,76,77,79,81,84,85,86,87,88,95,96,97,99,101,102,104,],[32,-41,32,32,-11,-12,-13,-14,-15,-16,-33,-34,-35,-41,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,32,-20,-21,32,-37,-46,-42,-18,-44,-17,-45,32,-19,]),'PRINT':([14,16,18,20,21,22,23,24,25,26,27,28,29,36,66,67,68,69,70,71,72,73,74,75,76,77,79,81,84,85,86,87,88,95,96,97,99,101,102,104,],[33,-41,33,33,-11,-12,-13,-14,-15,-16,-33,-34,-35,-41,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,33,-20,-21,33,-37,-46,-42,-18,-44,-17,-45,33,-19,]),'PRINTLN':([14,16,18,20,21,22,23,24,25,26,27,28,29,36,66,67,68,69,70,71,72,73,74,75,76,77,79,81,84,85,86,87,88,95,96,97,99,101,102,104,],[34,-41,34,34,-11,-12,-13,-14,-15,-16,-33,-34,-35,-41,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,34,-20,-21,34,-37,-46,-42,-18,-44,-17,-45,34,-19,]),'IF':([14,16,18,20,21,22,23,24,25,26,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,84,85,86,87,88,92,95,96,97,98,99,101,102,104,],[31,-41,31,31,54,-12,-13,-14,-15,-16,-33,-34,-35,-41,54,54,54,54,54,54,54,54,-32,-43,54,54,54,54,54,54,54,54,54,54,54,-36,31,-20,-21,31,-37,-46,54,54,-18,-44,54,-17,-45,31,-19,]),'WHILE':([14,16,18,20,21,22,23,24,25,26,27,28,29,36,66,67,68,69,70,71,72,73,74,75,76,77,79,81,84,85,86,87,88,95,96,97,99,101,102,104,],[35,-41,35,35,-11,-12,-13,-14,-15,-16,-33,-34,-35,-41,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,35,-20,-21,35,-37,-46,-42,-18,-44,-17,-45,35,-19,]),'PLUS':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,44,-33,-34,-35,-41,44,44,44,44,44,44,44,44,-32,-43,44,44,44,44,44,44,44,44,44,44,44,-36,-37,44,44,44,]),'MINUS':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,45,-33,-34,-35,-41,45,45,45,45,45,45,45,45,-32,-43,45,45,45,45,45,45,45,45,45,45,45,-36,-37,45,45,45,]),'STAR':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,46,-33,-34,-35,-41,46,46,46,46,46,46,46,46,-32,-43,46,46,46,46,46,46,46,46,46,46,46,-36,-37,46,46,46,]),'SLASH':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,47,-33,-34,-35,-41,47,47,47,47,47,47,47,47,-32,-43,47,47,47,47,47,47,47,47,47,47,47,-36,-37,47,47,47,]),'LESS':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,48,-33,-34,-35,-41,48,48,48,48,48,48,48,48,-32,-43,48,48,48,48,48,48,48,48,48,48,48,-36,-37,48,48,48,]),'LESS_EQUAL':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,49,-33,-34,-35,-41,49,49,49,49,49,49,49,49,-32,-43,49,49,49,49,49,49,49,49,49,49,49,-36,-37,49,49,49,]),'GREATER':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,50,-33,-34,-35,-41,50,50,50,50,50,50,50,50,-32,-43,50,50,50,50,50,50,50,50,50,50,50,-36,-37,50,50,50,]),'GREATER_EQUAL':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,51,-33,-34,-35,-41,51,51,51,51,51,51,51,51,-32,-43,51,51,51,51,51,51,51,51,51,51,51,-36,-37,51,51,51,]),'EQUAL_EQUAL':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,52,-33,-34,-35,-41,52,52,52,52,52,52,52,52,-32,-43,52,52,52,52,52,52,52,52,52,52,52,-36,-37,52,52,52,]),'BANG_EQUAL':([16,21,27,28,29,36,37,40,56,58,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,92,95,98,],[-41,53,-33,-34,-35,-41,53,53,53,53,53,53,53,53,-32,-43,53,53,53,53,53,53,53,53,53,53,53,-36,-37,53,53,53,]),'RIGHT_BRACE':([16,19,20,21,22,23,24,25,26,27,28,29,36,41,43,66,67,68,69,70,71,72,73,74,75,76,77,79,84,85,87,88,91,94,95,96,97,99,101,103,104,],[-41,42,-10,-11,-12,-13,-14,-15,-16,-33,-34,-35,-41,67,-9,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-20,-21,-37,-46,96,99,-42,-18,-44,-17,-45,104,-19,]),'EQUAL':([16,59,83,],[39,82,93,]),'RIGHT_BRACKET':([27,28,29,30,36,55,56,57,66,67,68,69,70,71,72,73,74,75,76,77,79,80,87,90,95,],[-33,-34,-35,-47,-41,79,-39,-40,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-47,-37,-38,-42,]),'SEMICOLON':([27,28,29,36,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,79,87,92,95,98,],[-33,-34,-35,-41,84,85,88,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-36,-37,97,-42,101,]),'ELSE':([27,28,29,36,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,95,96,],[-33,-34,-35,-41,-32,-43,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,89,-36,-37,-42,100,]),'MUT':([32,],[60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'fn_def_list':([0,3,],[2,5,]),'fn_def':([0,3,],[3,3,]),'param_list':([7,11,],[9,13,]),'empty':([7,11,30,38,80,],[10,10,57,57,57,]),'stmt_list':([14,18,20,81,86,102,],[19,41,43,91,94,103,]),'stmt':([14,18,20,81,86,102,],[20,20,20,20,20,20,]),'expr':([14,15,17,18,20,30,31,33,34,35,38,39,44,45,46,47,48,49,50,51,52,53,54,80,81,82,86,89,93,102,],[21,37,40,21,21,56,58,61,62,63,56,65,68,69,70,71,72,73,74,75,76,77,78,56,21,92,21,95,98,21,]),'declaration':([14,18,20,81,86,102,],[22,22,22,22,22,22,]),'assign':([14,18,20,81,86,102,],[23,23,23,23,23,23,]),'print':([14,18,20,81,86,102,],[24,24,24,24,24,24,]),'condition':([14,18,20,81,86,102,],[25,25,25,25,25,25,]),'while':([14,18,20,81,86,102,],[26,26,26,26,26,26,]),'expr_list_comma':([30,38,80,],[55,64,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> fn_def_list','prog',1,'p_prog','parser.py',27),
  ('fn_def_list -> fn_def fn_def_list','fn_def_list',2,'p_fn_def_list','parser.py',34),
  ('fn_def_list -> fn_def','fn_def_list',1,'p_fn_def_list','parser.py',35),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE','fn_def',8,'p_fn_def','parser.py',45),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr','fn_def',7,'p_fn_def','parser.py',46),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','parser.py',56),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','parser.py',57),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',58),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',71),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',72),
  ('stmt -> expr','stmt',1,'p_stmt','parser.py',82),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',83),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',84),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',85),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',86),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',87),
  ('while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE','while',5,'p_while','parser.py',94),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE','condition',5,'p_condition','parser.py',101),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE','condition',9,'p_condition','parser.py',102),
  ('print -> PRINT expr SEMICOLON','print',3,'p_print','parser.py',112),
  ('print -> PRINTLN expr SEMICOLON','print',3,'p_print','parser.py',113),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','parser.py',121),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','parser.py',122),
  ('expr -> expr STAR expr','expr',3,'p_expr_binary','parser.py',123),
  ('expr -> expr SLASH expr','expr',3,'p_expr_binary','parser.py',124),
  ('expr -> expr LESS expr','expr',3,'p_expr_binary','parser.py',125),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr_binary','parser.py',126),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binary','parser.py',127),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binary','parser.py',128),
  ('expr -> expr EQUAL_EQUAL expr','expr',3,'p_expr_binary','parser.py',129),
  ('expr -> expr BANG_EQUAL expr','expr',3,'p_expr_binary','parser.py',130),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_grouping','parser.py',137),
  ('expr -> NUMBER','expr',1,'p_expr_literal','parser.py',144),
  ('expr -> NIL','expr',1,'p_expr_literal','parser.py',145),
  ('expr -> STRING','expr',1,'p_expr_literal','parser.py',146),
  ('expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET','expr',3,'p_expr_literal','parser.py',147),
  ('expr -> IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',4,'p_expr_fn_call','parser.py',163),
  ('expr_list_comma -> expr COMMA expr_list_comma','expr_list_comma',3,'p_expr_list_comma','parser.py',170),
  ('expr_list_comma -> expr','expr_list_comma',1,'p_expr_list_comma','parser.py',171),
  ('expr_list_comma -> empty','expr_list_comma',1,'p_expr_list_comma','parser.py',172),
  ('expr -> IDENTIFIER','expr',1,'p_expr_variable','parser.py',185),
  ('expr -> expr IF expr ELSE expr','expr',5,'p_expr_ternary','parser.py',192),
  ('expr -> LEFT_BRACE stmt_list RIGHT_BRACE','expr',3,'p_expr_block','parser.py',199),
  ('declaration -> LET IDENTIFIER EQUAL expr SEMICOLON','declaration',5,'p_declaration','parser.py',206),
  ('declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON','declaration',6,'p_declaration','parser.py',207),
  ('assign -> IDENTIFIER EQUAL expr SEMICOLON','assign',4,'p_assign','parser.py',217),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',224),
]
