
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALrightBANGnonassocLESSLESS_EQUALGREATERGREATER_EQUALEQUAL_EQUALBANG_EQUALleftPLUSMINUSSTARSLASHAND ARROW BANG BANG_EQUAL CLASS COLON COMMA DOT ELSE EOF EQUAL EQUAL_EQUAL FALSE FN FOR GREATER GREATER_EQUAL IDENTIFIER IF IN LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LET MINUS MUT NIL NUMBER OR PLUS PRINT PRINTLN RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING SUPER THIS TRUE USE WHILE\n    prog : use_list fn_def_list\n    \n    use_list : use use_list\n             | use\n             | empty\n    \n    use : USE STRING ARROW IDENTIFIER SEMICOLON\n        | USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON\n    \n    fn_def_list : fn_def fn_def_list\n                | fn_def\n    \n    fn_def : FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE\n           | FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr\n    \n    param_list : IDENTIFIER COMMA param_list\n               | IDENTIFIER\n               | empty\n    \n    stmt_list : stmt stmt_list\n              | stmt\n    \n    stmt : expr SEMICOLON\n         | declaration\n         | assign\n         | print\n         | condition\n         | while\n         | for\n         | return\n    \n    return : RETURN expr SEMICOLON\n    \n    for : FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n        | FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    while : WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    condition : IF expr LEFT_BRACE stmt_list RIGHT_BRACE\n              | IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    print : PRINT expr SEMICOLON\n          | PRINTLN expr SEMICOLON\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr STAR expr\n         | expr SLASH expr\n         | expr LESS expr\n         | expr LESS_EQUAL expr\n         | expr GREATER expr\n         | expr GREATER_EQUAL expr\n         | expr EQUAL_EQUAL expr\n         | expr BANG_EQUAL expr\n    \n    expr : LEFT_PAREN expr RIGHT_PAREN\n    \n    expr : NUMBER\n         | NIL\n         | STRING\n         | LEFT_BRACKET expr_list_comma RIGHT_BRACKET\n    \n    expr : expr DOT IDENTIFIER\n         | expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr : expr LEFT_BRACKET expr RIGHT_BRACKET\n    \n    expr : expr LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr_list_comma : expr COMMA expr_list_comma\n                 | expr\n                 | empty\n    \n    expr : IDENTIFIER\n    \n    expr : expr IF expr ELSE expr\n    \n    expr : LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    indexof_list : LEFT_BRACKET expr RIGHT_BRACKET\n                 | LEFT_BRACKET expr RIGHT_BRACKET indexof_list\n    \n    declaration : LET IDENTIFIER EQUAL expr SEMICOLON\n                | LET MUT IDENTIFIER EQUAL expr SEMICOLON\n                | LET IDENTIFIER SEMICOLON\n                | LET MUT IDENTIFIER SEMICOLON\n    \n    assign : expr EQUAL expr SEMICOLON\n           | expr indexof_list EQUAL expr SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'USE':([0,3,20,28,],[5,5,-5,-6,]),'FN':([0,2,3,4,7,9,20,28,29,42,43,44,53,56,87,88,89,90,91,92,93,94,95,96,97,98,99,105,119,132,136,144,],[-65,8,-3,-4,8,-2,-5,-6,-54,-43,-44,-45,-10,-9,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,-50,-49,-55,-48,]),'$end':([1,6,7,11,29,42,43,44,53,56,87,88,89,90,91,92,93,94,95,96,97,98,99,105,119,132,136,144,],[0,-1,-8,-7,-54,-43,-44,-45,-10,-9,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,-50,-49,-55,-48,]),'STRING':([5,26,27,30,31,33,35,36,37,38,39,40,41,45,46,48,49,50,52,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,86,104,106,107,108,109,111,112,113,114,116,118,121,122,127,128,134,137,138,139,141,142,143,147,151,152,153,156,157,],[10,44,44,44,44,44,-17,-18,-19,-20,-21,-22,-23,44,44,44,44,44,44,-16,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-61,-30,-31,44,44,-24,44,44,-63,44,-62,44,-64,-28,-59,-27,44,44,-60,44,-25,44,-29,-26,]),'IDENTIFIER':([8,13,14,16,22,26,27,30,31,33,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,86,104,106,107,108,109,111,112,113,114,115,116,118,121,122,127,128,134,137,138,139,141,142,143,147,151,152,153,156,157,],[12,15,17,17,17,29,29,29,29,29,-17,-18,-19,-20,-21,-22,-23,29,29,79,29,29,29,84,29,-16,29,29,29,29,29,29,29,29,29,29,99,29,29,29,29,110,29,29,29,29,29,-61,-30,-31,29,29,131,-24,29,29,-63,29,-62,29,-64,-28,-59,-27,29,29,-60,29,-25,29,-29,-26,]),'ARROW':([10,23,],[13,27,]),'LEFT_PAREN':([12,13,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,52,53,54,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,76,78,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,111,112,113,114,116,117,118,119,120,121,122,123,126,127,128,130,132,134,136,137,138,139,140,141,142,143,144,145,147,149,151,152,153,156,157,],[14,16,30,30,-54,30,30,30,70,-17,-18,-19,-20,-21,-22,-23,-43,-44,-45,30,30,30,30,30,30,70,70,-16,30,30,30,30,30,30,30,30,30,30,30,30,30,30,70,70,70,70,70,70,30,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,118,70,70,70,30,-46,30,30,30,-61,-30,-31,30,30,-24,70,30,-50,-49,30,-63,70,70,30,-62,70,-49,30,70,-64,-28,-59,70,-27,30,30,-48,70,-60,70,30,-25,30,-29,-26,]),'RIGHT_PAREN':([14,16,17,18,19,21,22,25,29,42,43,44,54,70,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,100,105,106,118,119,124,132,133,136,144,],[-65,-65,-12,23,-13,24,-65,-11,-54,-43,-44,-45,87,-65,-52,-53,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,119,-46,-65,-65,-50,-51,-49,144,-55,-48,]),'SEMICOLON':([15,24,29,34,42,43,44,79,81,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,103,105,110,119,120,123,126,132,136,140,144,],[20,28,-54,58,-43,-44,-45,109,111,112,116,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,122,-46,128,-50,-49,137,139,-49,-55,147,-48,]),'COMMA':([17,29,42,43,44,76,84,87,88,89,90,91,92,93,94,95,96,97,98,99,105,119,132,136,144,],[22,-54,-43,-44,-45,106,115,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,-50,-49,-55,-48,]),'LEFT_BRACE':([23,26,27,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,52,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,78,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,104,105,106,107,108,109,111,112,113,114,116,118,119,121,122,127,128,130,132,134,136,137,138,139,141,142,143,144,146,147,149,151,152,153,156,157,],[26,31,31,-54,31,31,31,-17,-18,-19,-20,-21,-22,-23,-43,-44,-45,31,31,31,31,31,31,-16,31,31,31,31,31,31,31,31,31,31,31,31,31,31,107,113,31,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,31,-46,31,31,31,-61,-30,-31,31,31,-24,31,-50,31,-63,31,-62,142,-49,31,-55,-64,-28,-59,-27,31,31,-48,151,-60,153,31,-25,31,-29,-26,]),'NUMBER':([26,27,30,31,33,35,36,37,38,39,40,41,45,46,48,49,50,52,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,86,104,106,107,108,109,111,112,113,114,116,118,121,122,127,128,134,137,138,139,141,142,143,147,151,152,153,156,157,],[42,42,42,42,42,-17,-18,-19,-20,-21,-22,-23,42,42,42,42,42,42,-16,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-61,-30,-31,42,42,-24,42,42,-63,42,-62,42,-64,-28,-59,-27,42,42,-60,42,-25,42,-29,-26,]),'NIL':([26,27,30,31,33,35,36,37,38,39,40,41,45,46,48,49,50,52,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,86,104,106,107,108,109,111,112,113,114,116,118,121,122,127,128,134,137,138,139,141,142,143,147,151,152,153,156,157,],[43,43,43,43,43,-17,-18,-19,-20,-21,-22,-23,43,43,43,43,43,43,-16,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-61,-30,-31,43,43,-24,43,43,-63,43,-62,43,-64,-28,-59,-27,43,43,-60,43,-25,43,-29,-26,]),'LEFT_BRACKET':([26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,52,53,54,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,76,78,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,111,112,113,114,116,117,118,119,120,121,122,123,126,127,128,130,132,134,136,137,138,139,140,141,142,143,144,145,147,149,150,151,152,153,156,157,],[45,45,-54,45,45,45,71,-17,-18,-19,-20,-21,-22,-23,-43,-44,-45,45,45,45,45,45,45,86,86,-16,45,45,45,45,45,45,45,45,45,45,45,45,45,45,86,86,86,86,86,86,45,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,86,86,86,45,-46,45,45,45,-61,-30,-31,45,45,-24,86,45,-50,134,45,-63,86,86,45,-62,86,-49,45,86,-64,-28,-59,86,-27,45,45,-48,86,-60,86,134,45,-25,45,-29,-26,]),'LET':([26,31,33,35,36,37,38,39,40,41,58,107,109,111,112,113,116,122,128,137,138,139,141,142,147,151,152,153,156,157,],[47,47,47,-17,-18,-19,-20,-21,-22,-23,-16,47,-61,-30,-31,47,-24,-63,-62,-64,-28,-59,-27,47,-60,47,-25,47,-29,-26,]),'PRINT':([26,31,33,35,36,37,38,39,40,41,58,107,109,111,112,113,116,122,128,137,138,139,141,142,147,151,152,153,156,157,],[48,48,48,-17,-18,-19,-20,-21,-22,-23,-16,48,-61,-30,-31,48,-24,-63,-62,-64,-28,-59,-27,48,-60,48,-25,48,-29,-26,]),'PRINTLN':([26,31,33,35,36,37,38,39,40,41,58,107,109,111,112,113,116,122,128,137,138,139,141,142,147,151,152,153,156,157,],[49,49,49,-17,-18,-19,-20,-21,-22,-23,-16,49,-61,-30,-31,49,-24,-63,-62,-64,-28,-59,-27,49,-60,49,-25,49,-29,-26,]),'IF':([26,29,31,33,34,35,36,37,38,39,40,41,42,43,44,53,54,58,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,107,109,111,112,113,116,117,119,120,122,123,126,128,130,132,136,137,138,139,140,141,142,144,145,147,149,151,152,153,156,157,],[46,-54,46,46,72,-17,-18,-19,-20,-21,-22,-23,-43,-44,-45,72,72,-16,72,72,72,72,72,72,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,72,72,72,-46,46,-61,-30,-31,46,-24,72,-50,-49,-63,72,72,-62,72,-49,72,-64,-28,-59,72,-27,46,-48,72,-60,72,46,-25,46,-29,-26,]),'WHILE':([26,31,33,35,36,37,38,39,40,41,58,107,109,111,112,113,116,122,128,137,138,139,141,142,147,151,152,153,156,157,],[50,50,50,-17,-18,-19,-20,-21,-22,-23,-16,50,-61,-30,-31,50,-24,-63,-62,-64,-28,-59,-27,50,-60,50,-25,50,-29,-26,]),'FOR':([26,31,33,35,36,37,38,39,40,41,58,107,109,111,112,113,116,122,128,137,138,139,141,142,147,151,152,153,156,157,],[51,51,51,-17,-18,-19,-20,-21,-22,-23,-16,51,-61,-30,-31,51,-24,-63,-62,-64,-28,-59,-27,51,-60,51,-25,51,-29,-26,]),'RETURN':([26,31,33,35,36,37,38,39,40,41,58,107,109,111,112,113,116,122,128,137,138,139,141,142,147,151,152,153,156,157,],[52,52,52,-17,-18,-19,-20,-21,-22,-23,-16,52,-61,-30,-31,52,-24,-63,-62,-64,-28,-59,-27,52,-60,52,-25,52,-29,-26,]),'PLUS':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,59,-43,-44,-45,59,59,59,59,59,59,59,59,-42,-56,-32,-33,-34,-35,59,59,59,59,59,59,-47,59,59,59,-46,59,-50,-49,59,59,59,-49,59,59,-48,59,59,]),'MINUS':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,60,-43,-44,-45,60,60,60,60,60,60,60,60,-42,-56,-32,-33,-34,-35,60,60,60,60,60,60,-47,60,60,60,-46,60,-50,-49,60,60,60,-49,60,60,-48,60,60,]),'STAR':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,61,-43,-44,-45,61,61,61,61,61,61,61,61,-42,-56,-32,-33,-34,-35,61,61,61,61,61,61,-47,61,61,61,-46,61,-50,-49,61,61,61,-49,61,61,-48,61,61,]),'SLASH':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,62,-43,-44,-45,62,62,62,62,62,62,62,62,-42,-56,-32,-33,-34,-35,62,62,62,62,62,62,-47,62,62,62,-46,62,-50,-49,62,62,62,-49,62,62,-48,62,62,]),'LESS':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,63,-43,-44,-45,63,63,63,63,63,63,63,63,-42,-56,-32,-33,-34,-35,None,None,None,None,None,None,-47,63,63,63,-46,63,-50,-49,63,63,63,-49,63,63,-48,63,63,]),'LESS_EQUAL':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,64,-43,-44,-45,64,64,64,64,64,64,64,64,-42,-56,-32,-33,-34,-35,None,None,None,None,None,None,-47,64,64,64,-46,64,-50,-49,64,64,64,-49,64,64,-48,64,64,]),'GREATER':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,65,-43,-44,-45,65,65,65,65,65,65,65,65,-42,-56,-32,-33,-34,-35,None,None,None,None,None,None,-47,65,65,65,-46,65,-50,-49,65,65,65,-49,65,65,-48,65,65,]),'GREATER_EQUAL':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,66,-43,-44,-45,66,66,66,66,66,66,66,66,-42,-56,-32,-33,-34,-35,None,None,None,None,None,None,-47,66,66,66,-46,66,-50,-49,66,66,66,-49,66,66,-48,66,66,]),'EQUAL_EQUAL':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,67,-43,-44,-45,67,67,67,67,67,67,67,67,-42,-56,-32,-33,-34,-35,None,None,None,None,None,None,-47,67,67,67,-46,67,-50,-49,67,67,67,-49,67,67,-48,67,67,]),'BANG_EQUAL':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,68,-43,-44,-45,68,68,68,68,68,68,68,68,-42,-56,-32,-33,-34,-35,None,None,None,None,None,None,-47,68,68,68,-46,68,-50,-49,68,68,68,-49,68,68,-48,68,68,]),'DOT':([29,34,42,43,44,53,54,76,78,81,82,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,105,117,119,120,123,126,130,132,136,140,144,145,149,],[-54,69,-43,-44,-45,69,69,69,69,69,69,69,69,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,69,69,69,-46,69,-50,-49,69,69,69,-49,69,69,-48,69,69,]),'EQUAL':([29,34,42,43,44,74,79,87,88,89,90,91,92,93,94,95,96,97,98,99,105,110,119,120,132,135,136,144,150,],[-54,73,-43,-44,-45,104,108,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,-46,127,-50,-49,-49,-58,-55,-48,-57,]),'RIGHT_BRACKET':([29,42,43,44,45,75,76,77,87,88,89,90,91,92,93,94,95,96,97,98,99,101,105,106,117,119,124,132,136,144,145,],[-54,-43,-44,-45,-65,105,-52,-53,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,120,-46,-65,132,-50,-51,-49,-55,-48,150,]),'ELSE':([29,42,43,44,87,88,89,90,91,92,93,94,95,96,97,98,99,102,105,119,132,136,138,144,],[-54,-43,-44,-45,-42,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-47,121,-46,-50,-49,-55,146,-48,]),'RIGHT_BRACE':([32,33,35,36,37,38,39,40,41,55,57,58,109,111,112,116,122,125,128,129,137,138,139,141,147,148,152,154,155,156,157,],[56,-15,-17,-18,-19,-20,-21,-22,-23,88,-14,-16,-61,-30,-31,-24,-63,138,-62,141,-64,-28,-59,-27,-60,152,-25,156,157,-29,-26,]),'MUT':([47,],[80,]),'IN':([84,131,],[114,143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'use_list':([0,3,],[2,9,]),'use':([0,3,],[3,3,]),'empty':([0,3,14,16,22,45,70,106,118,],[4,4,19,19,19,77,77,77,77,]),'fn_def_list':([2,7,],[6,11,]),'fn_def':([2,7,],[7,7,]),'param_list':([14,16,22,],[18,21,25,]),'stmt_list':([26,31,33,107,113,142,151,153,],[32,55,57,125,129,148,154,155,]),'stmt':([26,31,33,107,113,142,151,153,],[33,33,33,33,33,33,33,33,]),'expr':([26,27,30,31,33,45,46,48,49,50,52,59,60,61,62,63,64,65,66,67,68,70,71,72,73,86,104,106,107,108,113,114,118,121,127,134,142,143,151,153,],[34,53,54,34,34,76,78,81,82,83,85,89,90,91,92,93,94,95,96,97,98,76,101,102,103,117,123,76,34,126,34,130,76,136,140,145,34,149,34,34,]),'declaration':([26,31,33,107,113,142,151,153,],[35,35,35,35,35,35,35,35,]),'assign':([26,31,33,107,113,142,151,153,],[36,36,36,36,36,36,36,36,]),'print':([26,31,33,107,113,142,151,153,],[37,37,37,37,37,37,37,37,]),'condition':([26,31,33,107,113,142,151,153,],[38,38,38,38,38,38,38,38,]),'while':([26,31,33,107,113,142,151,153,],[39,39,39,39,39,39,39,39,]),'for':([26,31,33,107,113,142,151,153,],[40,40,40,40,40,40,40,40,]),'return':([26,31,33,107,113,142,151,153,],[41,41,41,41,41,41,41,41,]),'indexof_list':([34,120,150,],[74,135,135,]),'expr_list_comma':([45,70,106,118,],[75,100,124,133,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> use_list fn_def_list','prog',2,'p_prog','parser.py',50),
  ('use_list -> use use_list','use_list',2,'p_use_list','parser.py',57),
  ('use_list -> use','use_list',1,'p_use_list','parser.py',58),
  ('use_list -> empty','use_list',1,'p_use_list','parser.py',59),
  ('use -> USE STRING ARROW IDENTIFIER SEMICOLON','use',5,'p_use','parser.py',72),
  ('use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON','use',7,'p_use','parser.py',73),
  ('fn_def_list -> fn_def fn_def_list','fn_def_list',2,'p_fn_def_list','parser.py',83),
  ('fn_def_list -> fn_def','fn_def_list',1,'p_fn_def_list','parser.py',84),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE','fn_def',8,'p_fn_def','parser.py',94),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr','fn_def',7,'p_fn_def','parser.py',95),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','parser.py',105),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','parser.py',106),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',107),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',120),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',121),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt','parser.py',131),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',132),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',133),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',134),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',135),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',136),
  ('stmt -> for','stmt',1,'p_stmt','parser.py',137),
  ('stmt -> return','stmt',1,'p_stmt','parser.py',138),
  ('return -> RETURN expr SEMICOLON','return',3,'p_return','parser.py',148),
  ('for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',7,'p_for','parser.py',155),
  ('for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',9,'p_for','parser.py',156),
  ('while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE','while',5,'p_while','parser.py',166),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE','condition',5,'p_condition','parser.py',173),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE','condition',9,'p_condition','parser.py',174),
  ('print -> PRINT expr SEMICOLON','print',3,'p_print','parser.py',184),
  ('print -> PRINTLN expr SEMICOLON','print',3,'p_print','parser.py',185),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','parser.py',193),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','parser.py',194),
  ('expr -> expr STAR expr','expr',3,'p_expr_binary','parser.py',195),
  ('expr -> expr SLASH expr','expr',3,'p_expr_binary','parser.py',196),
  ('expr -> expr LESS expr','expr',3,'p_expr_binary','parser.py',197),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr_binary','parser.py',198),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binary','parser.py',199),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binary','parser.py',200),
  ('expr -> expr EQUAL_EQUAL expr','expr',3,'p_expr_binary','parser.py',201),
  ('expr -> expr BANG_EQUAL expr','expr',3,'p_expr_binary','parser.py',202),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_grouping','parser.py',209),
  ('expr -> NUMBER','expr',1,'p_expr_literal','parser.py',216),
  ('expr -> NIL','expr',1,'p_expr_literal','parser.py',217),
  ('expr -> STRING','expr',1,'p_expr_literal','parser.py',218),
  ('expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET','expr',3,'p_expr_literal','parser.py',219),
  ('expr -> expr DOT IDENTIFIER','expr',3,'p_expr_dispatch','parser.py',235),
  ('expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',6,'p_expr_dispatch','parser.py',236),
  ('expr -> expr LEFT_BRACKET expr RIGHT_BRACKET','expr',4,'p_expr_indexof','parser.py',246),
  ('expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',4,'p_expr_fn_call','parser.py',253),
  ('expr_list_comma -> expr COMMA expr_list_comma','expr_list_comma',3,'p_expr_list_comma','parser.py',260),
  ('expr_list_comma -> expr','expr_list_comma',1,'p_expr_list_comma','parser.py',261),
  ('expr_list_comma -> empty','expr_list_comma',1,'p_expr_list_comma','parser.py',262),
  ('expr -> IDENTIFIER','expr',1,'p_expr_variable','parser.py',275),
  ('expr -> expr IF expr ELSE expr','expr',5,'p_expr_ternary','parser.py',282),
  ('expr -> LEFT_BRACE stmt_list RIGHT_BRACE','expr',3,'p_expr_block','parser.py',289),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET','indexof_list',3,'p_indexof_list','parser.py',296),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list','indexof_list',4,'p_indexof_list','parser.py',297),
  ('declaration -> LET IDENTIFIER EQUAL expr SEMICOLON','declaration',5,'p_declaration','parser.py',307),
  ('declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON','declaration',6,'p_declaration','parser.py',308),
  ('declaration -> LET IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',309),
  ('declaration -> LET MUT IDENTIFIER SEMICOLON','declaration',4,'p_declaration','parser.py',310),
  ('assign -> expr EQUAL expr SEMICOLON','assign',4,'p_assign','parser.py',324),
  ('assign -> expr indexof_list EQUAL expr SEMICOLON','assign',5,'p_assign','parser.py',325),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',335),
]
