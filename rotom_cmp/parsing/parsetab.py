
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALrightNOTnonassocLESSLESS_EQUALGREATERGREATER_EQUALEQUAL_EQUALBANG_EQUALANDORleftPLUSMINUSSTARSLASHAND ARROW BANG BANG_EQUAL CLASS COLON COMMA DOT ELSE EOF EQUAL EQUAL_EQUAL FALSE FN FOR GREATER GREATER_EQUAL IDENTIFIER IF IN LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LET MINUS MUT NIL NOT NUMBER OR PLUS PRINT PRINTLN RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SLASH STAR STRING SUPER THIS TRUE TYPE USE WHILE\n    prog : use_list type_def fn_def_list\n    \n    use_list : use use_list\n             | use\n             | empty\n    \n    use : USE STRING ARROW IDENTIFIER SEMICOLON\n        | USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON\n    \n    fn_def_list : fn_def fn_def_list\n                | fn_def\n    \n    fn_def : FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE\n           | FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr\n    \n    param_list : IDENTIFIER COMMA param_list\n               | IDENTIFIER\n               | empty\n    \n    stmt_list : stmt stmt_list\n              | stmt\n    \n    stmt : expr SEMICOLON\n         | declaration\n         | assign\n         | print\n         | condition\n         | while\n         | for\n         | return\n    \n    type_def : TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE\n    \n    prop_list : IDENTIFIER COMMA prop_list\n              | IDENTIFIER COMMA\n              | IDENTIFIER\n    \n    return : RETURN expr SEMICOLON\n    \n    for : FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n        | FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    while : WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    condition : IF expr LEFT_BRACE stmt_list RIGHT_BRACE\n              | IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    print : PRINT expr SEMICOLON\n          | PRINTLN expr SEMICOLON\n    \n    expr : NOT expr\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr STAR expr\n         | expr SLASH expr\n         | expr LESS expr\n         | expr LESS_EQUAL expr\n         | expr GREATER expr\n         | expr GREATER_EQUAL expr\n         | expr EQUAL_EQUAL expr\n         | expr BANG_EQUAL expr\n         | expr OR expr\n         | expr AND expr\n    \n    expr : LEFT_PAREN expr RIGHT_PAREN\n    \n    expr : NUMBER\n         | NIL\n         | STRING\n         | LEFT_BRACKET expr_list_comma RIGHT_BRACKET\n    \n    expr : expr DOT IDENTIFIER\n         | expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr : expr LEFT_BRACKET expr RIGHT_BRACKET\n    \n    expr : expr LEFT_PAREN expr_list_comma RIGHT_PAREN\n    \n    expr_list_comma : expr COMMA expr_list_comma\n                 | expr\n                 | empty\n    \n    expr : IDENTIFIER\n    \n    expr : expr IF expr ELSE expr\n    \n    expr : LEFT_BRACE stmt_list RIGHT_BRACE\n    \n    indexof_list : LEFT_BRACKET expr RIGHT_BRACKET\n                 | LEFT_BRACKET expr RIGHT_BRACKET indexof_list\n    \n    declaration : LET IDENTIFIER EQUAL expr SEMICOLON\n                | LET MUT IDENTIFIER EQUAL expr SEMICOLON\n                | LET IDENTIFIER SEMICOLON\n                | LET MUT IDENTIFIER SEMICOLON\n    \n    assign : expr EQUAL expr SEMICOLON\n           | expr indexof_list EQUAL expr SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'USE':([0,3,23,34,],[5,5,-5,-6,]),'TYPE':([0,2,3,4,8,23,34,],[-72,7,-3,-4,-2,-5,-6,]),'$end':([1,10,11,15,38,52,53,54,63,66,87,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,134,147,151,159,],[0,-1,-8,-7,-61,-50,-51,-52,-10,-9,-36,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,-53,-57,-56,-62,-55,]),'STRING':([5,36,37,39,40,42,44,45,46,47,48,49,50,51,55,56,58,59,60,62,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,99,119,121,122,123,124,126,127,128,129,131,133,136,137,142,143,149,152,153,154,156,157,158,162,166,167,168,171,172,],[9,54,54,54,54,54,-17,-18,-19,-20,-21,-22,-23,54,54,54,54,54,54,54,-16,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-68,-34,-35,54,54,-28,54,54,-70,54,-69,54,-71,-32,-66,-31,54,54,-67,54,-29,54,-33,-30,]),'FN':([6,11,29,38,52,53,54,63,66,87,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,134,147,151,159,],[12,12,-24,-61,-50,-51,-52,-10,-9,-36,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,-53,-57,-56,-62,-55,]),'IDENTIFIER':([7,12,14,17,19,20,28,31,36,37,39,40,42,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,93,99,119,121,122,123,124,126,127,128,129,130,131,133,136,137,142,143,149,152,153,154,156,157,158,162,166,167,168,171,172,],[13,16,18,21,25,25,21,25,38,38,38,38,38,-17,-18,-19,-20,-21,-22,-23,38,38,38,92,38,38,38,97,38,-16,38,38,38,38,38,38,38,38,38,38,38,38,114,38,38,38,38,125,38,38,38,38,38,-68,-34,-35,38,38,146,-28,38,38,-70,38,-69,38,-71,-32,-66,-31,38,38,-67,38,-29,38,-33,-30,]),'ARROW':([9,32,],[14,37,]),'LEFT_BRACE':([13,32,36,37,38,39,40,42,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,87,91,96,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,120,121,122,123,124,126,127,128,129,131,133,134,136,137,142,143,145,147,149,151,152,153,154,156,157,158,159,161,162,164,166,167,168,171,172,],[17,36,40,40,-61,40,40,40,-17,-18,-19,-20,-21,-22,-23,40,-50,-51,-52,40,40,40,40,40,40,-16,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-36,122,128,40,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,40,-53,40,40,40,-68,-34,-35,40,40,-28,40,-57,40,-70,40,-69,157,-56,40,-62,-71,-32,-66,-31,40,40,-55,166,-67,168,40,-29,40,-33,-30,]),'LEFT_PAREN':([14,16,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,87,89,91,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,126,127,128,129,131,132,133,134,135,136,137,138,141,142,143,145,147,149,151,152,153,154,155,156,157,158,159,160,162,164,166,167,168,171,172,],[19,20,39,39,-61,39,39,39,82,-17,-18,-19,-20,-21,-22,-23,39,-50,-51,-52,39,39,39,39,39,39,82,82,-16,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-36,82,82,82,82,82,82,39,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,133,82,82,82,39,-53,39,39,39,-68,-34,-35,39,39,-28,82,39,-57,-56,39,-70,82,82,39,-69,82,-56,39,82,-71,-32,-66,82,-31,39,39,-55,82,-67,82,39,-29,39,-33,-30,]),'SEMICOLON':([18,30,38,43,52,53,54,87,92,94,95,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,120,125,134,135,138,141,147,151,155,159,],[23,34,-61,68,-50,-51,-52,-36,124,126,127,131,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,137,-53,143,-57,-56,152,154,-56,-62,162,-55,]),'RIGHT_PAREN':([19,20,24,25,26,27,31,35,38,52,53,54,64,82,87,89,90,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,120,121,133,134,139,147,148,151,159,],[-72,-72,30,-12,-13,32,-72,-11,-61,-50,-51,-52,100,-72,-36,-59,-60,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,134,-53,-72,-72,-57,-58,-56,159,-62,-55,]),'COMMA':([21,25,38,52,53,54,87,89,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,134,147,151,159,],[28,31,-61,-50,-51,-52,-36,121,130,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,-53,-57,-56,-62,-55,]),'RIGHT_BRACE':([21,22,28,33,41,42,44,45,46,47,48,49,50,65,67,68,124,126,127,131,137,140,143,144,152,153,154,156,162,163,167,169,170,171,172,],[-27,29,-26,-25,66,-15,-17,-18,-19,-20,-21,-22,-23,101,-14,-16,-68,-34,-35,-28,-70,153,-69,156,-71,-32,-66,-31,-67,167,-29,171,172,-33,-30,]),'NOT':([36,37,39,40,42,44,45,46,47,48,49,50,51,55,56,58,59,60,62,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,99,119,121,122,123,124,126,127,128,129,131,133,136,137,142,143,149,152,153,154,156,157,158,162,166,167,168,171,172,],[51,51,51,51,51,-17,-18,-19,-20,-21,-22,-23,51,51,51,51,51,51,51,-16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-68,-34,-35,51,51,-28,51,51,-70,51,-69,51,-71,-32,-66,-31,51,51,-67,51,-29,51,-33,-30,]),'NUMBER':([36,37,39,40,42,44,45,46,47,48,49,50,51,55,56,58,59,60,62,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,99,119,121,122,123,124,126,127,128,129,131,133,136,137,142,143,149,152,153,154,156,157,158,162,166,167,168,171,172,],[52,52,52,52,52,-17,-18,-19,-20,-21,-22,-23,52,52,52,52,52,52,52,-16,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-68,-34,-35,52,52,-28,52,52,-70,52,-69,52,-71,-32,-66,-31,52,52,-67,52,-29,52,-33,-30,]),'NIL':([36,37,39,40,42,44,45,46,47,48,49,50,51,55,56,58,59,60,62,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,99,119,121,122,123,124,126,127,128,129,131,133,136,137,142,143,149,152,153,154,156,157,158,162,166,167,168,171,172,],[53,53,53,53,53,-17,-18,-19,-20,-21,-22,-23,53,53,53,53,53,53,53,-16,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-68,-34,-35,53,53,-28,53,53,-70,53,-69,53,-71,-32,-66,-31,53,53,-67,53,-29,53,-33,-30,]),'LEFT_BRACKET':([36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,87,89,91,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,126,127,128,129,131,132,133,134,135,136,137,138,141,142,143,145,147,149,151,152,153,154,155,156,157,158,159,160,162,164,165,166,167,168,171,172,],[55,55,-61,55,55,55,83,-17,-18,-19,-20,-21,-22,-23,55,-50,-51,-52,55,55,55,55,55,55,99,99,-16,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-36,99,99,99,99,99,99,55,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,99,99,99,55,-53,55,55,55,-68,-34,-35,55,55,-28,99,55,-57,149,55,-70,99,99,55,-69,99,-56,55,99,-71,-32,-66,99,-31,55,55,-55,99,-67,99,149,55,-29,55,-33,-30,]),'LET':([36,40,42,44,45,46,47,48,49,50,68,122,124,126,127,128,131,137,143,152,153,154,156,157,162,166,167,168,171,172,],[57,57,57,-17,-18,-19,-20,-21,-22,-23,-16,57,-68,-34,-35,57,-28,-70,-69,-71,-32,-66,-31,57,-67,57,-29,57,-33,-30,]),'PRINT':([36,40,42,44,45,46,47,48,49,50,68,122,124,126,127,128,131,137,143,152,153,154,156,157,162,166,167,168,171,172,],[58,58,58,-17,-18,-19,-20,-21,-22,-23,-16,58,-68,-34,-35,58,-28,-70,-69,-71,-32,-66,-31,58,-67,58,-29,58,-33,-30,]),'PRINTLN':([36,40,42,44,45,46,47,48,49,50,68,122,124,126,127,128,131,137,143,152,153,154,156,157,162,166,167,168,171,172,],[59,59,59,-17,-18,-19,-20,-21,-22,-23,-16,59,-68,-34,-35,59,-28,-70,-69,-71,-32,-66,-31,59,-67,59,-29,59,-33,-30,]),'IF':([36,38,40,42,43,44,45,46,47,48,49,50,52,53,54,63,64,68,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,122,124,126,127,128,131,132,134,135,137,138,141,143,145,147,151,152,153,154,155,156,157,159,160,162,164,166,167,168,171,172,],[56,-61,56,56,84,-17,-18,-19,-20,-21,-22,-23,-50,-51,-52,84,84,-16,-36,84,84,84,84,84,84,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,84,84,84,-53,56,-68,-34,-35,56,-28,84,-57,-56,-70,84,84,-69,84,-56,84,-71,-32,-66,84,-31,56,-55,84,-67,84,56,-29,56,-33,-30,]),'WHILE':([36,40,42,44,45,46,47,48,49,50,68,122,124,126,127,128,131,137,143,152,153,154,156,157,162,166,167,168,171,172,],[60,60,60,-17,-18,-19,-20,-21,-22,-23,-16,60,-68,-34,-35,60,-28,-70,-69,-71,-32,-66,-31,60,-67,60,-29,60,-33,-30,]),'FOR':([36,40,42,44,45,46,47,48,49,50,68,122,124,126,127,128,131,137,143,152,153,154,156,157,162,166,167,168,171,172,],[61,61,61,-17,-18,-19,-20,-21,-22,-23,-16,61,-68,-34,-35,61,-28,-70,-69,-71,-32,-66,-31,61,-67,61,-29,61,-33,-30,]),'RETURN':([36,40,42,44,45,46,47,48,49,50,68,122,124,126,127,128,131,137,143,152,153,154,156,157,162,166,167,168,171,172,],[62,62,62,-17,-18,-19,-20,-21,-22,-23,-16,62,-68,-34,-35,62,-28,-70,-69,-71,-32,-66,-31,62,-67,62,-29,62,-33,-30,]),'PLUS':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,69,-50,-51,-52,69,69,69,69,69,69,69,69,69,-49,-63,-37,-38,-39,-40,69,69,69,69,69,69,69,69,-54,69,69,69,-53,69,-57,-56,69,69,69,-56,69,69,-55,69,69,]),'MINUS':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,70,-50,-51,-52,70,70,70,70,70,70,70,70,70,-49,-63,-37,-38,-39,-40,70,70,70,70,70,70,70,70,-54,70,70,70,-53,70,-57,-56,70,70,70,-56,70,70,-55,70,70,]),'STAR':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,71,-50,-51,-52,71,71,71,71,71,71,71,71,71,-49,-63,-37,-38,-39,-40,71,71,71,71,71,71,71,71,-54,71,71,71,-53,71,-57,-56,71,71,71,-56,71,71,-55,71,71,]),'SLASH':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,72,-50,-51,-52,72,72,72,72,72,72,72,72,72,-49,-63,-37,-38,-39,-40,72,72,72,72,72,72,72,72,-54,72,72,72,-53,72,-57,-56,72,72,72,-56,72,72,-55,72,72,]),'LESS':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,73,-50,-51,-52,73,73,73,73,73,73,73,73,73,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,73,73,73,-53,73,-57,-56,73,73,73,-56,73,73,-55,73,73,]),'LESS_EQUAL':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,74,-50,-51,-52,74,74,74,74,74,74,74,74,74,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,74,74,74,-53,74,-57,-56,74,74,74,-56,74,74,-55,74,74,]),'GREATER':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,75,-50,-51,-52,75,75,75,75,75,75,75,75,75,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,75,75,75,-53,75,-57,-56,75,75,75,-56,75,75,-55,75,75,]),'GREATER_EQUAL':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,76,-50,-51,-52,76,76,76,76,76,76,76,76,76,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,76,76,76,-53,76,-57,-56,76,76,76,-56,76,76,-55,76,76,]),'EQUAL_EQUAL':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,77,-50,-51,-52,77,77,77,77,77,77,77,77,77,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,77,77,77,-53,77,-57,-56,77,77,77,-56,77,77,-55,77,77,]),'BANG_EQUAL':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,78,-50,-51,-52,78,78,78,78,78,78,78,78,78,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,78,78,78,-53,78,-57,-56,78,78,78,-56,78,78,-55,78,78,]),'OR':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,79,-50,-51,-52,79,79,79,79,79,79,79,79,79,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,79,79,79,-53,79,-57,-56,79,79,79,-56,79,79,-55,79,79,]),'AND':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,80,-50,-51,-52,80,80,80,80,80,80,80,80,80,-49,-63,-37,-38,-39,-40,None,None,None,None,None,None,None,None,-54,80,80,80,-53,80,-57,-56,80,80,80,-56,80,80,-55,80,80,]),'DOT':([38,43,52,53,54,63,64,87,89,91,94,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,120,132,134,135,138,141,145,147,151,155,159,160,164,],[-61,81,-50,-51,-52,81,81,-36,81,81,81,81,81,81,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,81,81,81,-53,81,-57,-56,81,81,81,-56,81,81,-55,81,81,]),'EQUAL':([38,43,52,53,54,86,87,92,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,125,134,135,147,150,151,159,165,],[-61,85,-50,-51,-52,119,-36,123,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,-53,142,-57,-56,-56,-65,-62,-55,-64,]),'RIGHT_BRACKET':([38,52,53,54,55,87,88,89,90,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,120,121,132,134,139,147,151,159,160,],[-61,-50,-51,-52,-72,-36,120,-59,-60,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,135,-53,-72,147,-57,-58,-56,-62,-55,165,]),'ELSE':([38,52,53,54,87,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,120,134,147,151,153,159,],[-61,-50,-51,-52,-36,-49,-63,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-54,136,-53,-57,-56,-62,161,-55,]),'MUT':([57,],[93,]),'IN':([97,146,],[129,158,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'use_list':([0,3,],[2,8,]),'use':([0,3,],[3,3,]),'empty':([0,3,19,20,31,55,82,121,133,],[4,4,26,26,26,90,90,90,90,]),'type_def':([2,],[6,]),'fn_def_list':([6,11,],[10,15,]),'fn_def':([6,11,],[11,11,]),'prop_list':([17,28,],[22,33,]),'param_list':([19,20,31,],[24,27,35,]),'stmt_list':([36,40,42,122,128,157,166,168,],[41,65,67,140,144,163,169,170,]),'stmt':([36,40,42,122,128,157,166,168,],[42,42,42,42,42,42,42,42,]),'expr':([36,37,39,40,42,51,55,56,58,59,60,62,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,99,119,121,122,123,128,129,133,136,142,149,157,158,166,168,],[43,63,64,43,43,87,89,91,94,95,96,98,102,103,104,105,106,107,108,109,110,111,112,113,89,116,117,118,132,138,89,43,141,43,145,89,151,155,160,43,164,43,43,]),'declaration':([36,40,42,122,128,157,166,168,],[44,44,44,44,44,44,44,44,]),'assign':([36,40,42,122,128,157,166,168,],[45,45,45,45,45,45,45,45,]),'print':([36,40,42,122,128,157,166,168,],[46,46,46,46,46,46,46,46,]),'condition':([36,40,42,122,128,157,166,168,],[47,47,47,47,47,47,47,47,]),'while':([36,40,42,122,128,157,166,168,],[48,48,48,48,48,48,48,48,]),'for':([36,40,42,122,128,157,166,168,],[49,49,49,49,49,49,49,49,]),'return':([36,40,42,122,128,157,166,168,],[50,50,50,50,50,50,50,50,]),'indexof_list':([43,135,165,],[86,150,150,]),'expr_list_comma':([55,82,121,133,],[88,115,139,148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> use_list type_def fn_def_list','prog',3,'p_prog','parser.py',56),
  ('use_list -> use use_list','use_list',2,'p_use_list','parser.py',63),
  ('use_list -> use','use_list',1,'p_use_list','parser.py',64),
  ('use_list -> empty','use_list',1,'p_use_list','parser.py',65),
  ('use -> USE STRING ARROW IDENTIFIER SEMICOLON','use',5,'p_use','parser.py',78),
  ('use -> USE STRING ARROW LEFT_PAREN param_list RIGHT_PAREN SEMICOLON','use',7,'p_use','parser.py',79),
  ('fn_def_list -> fn_def fn_def_list','fn_def_list',2,'p_fn_def_list','parser.py',89),
  ('fn_def_list -> fn_def','fn_def_list',1,'p_fn_def_list','parser.py',90),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN LEFT_BRACE stmt_list RIGHT_BRACE','fn_def',8,'p_fn_def','parser.py',100),
  ('fn_def -> FN IDENTIFIER LEFT_PAREN param_list RIGHT_PAREN ARROW expr','fn_def',7,'p_fn_def','parser.py',101),
  ('param_list -> IDENTIFIER COMMA param_list','param_list',3,'p_param_list','parser.py',111),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','parser.py',112),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',113),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',126),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',127),
  ('stmt -> expr SEMICOLON','stmt',2,'p_stmt','parser.py',137),
  ('stmt -> declaration','stmt',1,'p_stmt','parser.py',138),
  ('stmt -> assign','stmt',1,'p_stmt','parser.py',139),
  ('stmt -> print','stmt',1,'p_stmt','parser.py',140),
  ('stmt -> condition','stmt',1,'p_stmt','parser.py',141),
  ('stmt -> while','stmt',1,'p_stmt','parser.py',142),
  ('stmt -> for','stmt',1,'p_stmt','parser.py',143),
  ('stmt -> return','stmt',1,'p_stmt','parser.py',144),
  ('type_def -> TYPE IDENTIFIER LEFT_BRACE prop_list RIGHT_BRACE','type_def',5,'p_type_def','parser.py',154),
  ('prop_list -> IDENTIFIER COMMA prop_list','prop_list',3,'p_property_list','parser.py',161),
  ('prop_list -> IDENTIFIER COMMA','prop_list',2,'p_property_list','parser.py',162),
  ('prop_list -> IDENTIFIER','prop_list',1,'p_property_list','parser.py',163),
  ('return -> RETURN expr SEMICOLON','return',3,'p_return','parser.py',173),
  ('for -> FOR IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',7,'p_for','parser.py',180),
  ('for -> FOR IDENTIFIER COMMA IDENTIFIER IN expr LEFT_BRACE stmt_list RIGHT_BRACE','for',9,'p_for','parser.py',181),
  ('while -> WHILE expr LEFT_BRACE stmt_list RIGHT_BRACE','while',5,'p_while','parser.py',191),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE','condition',5,'p_condition','parser.py',198),
  ('condition -> IF expr LEFT_BRACE stmt_list RIGHT_BRACE ELSE LEFT_BRACE stmt_list RIGHT_BRACE','condition',9,'p_condition','parser.py',199),
  ('print -> PRINT expr SEMICOLON','print',3,'p_print','parser.py',209),
  ('print -> PRINTLN expr SEMICOLON','print',3,'p_print','parser.py',210),
  ('expr -> NOT expr','expr',2,'p_expr_unary','parser.py',218),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','parser.py',225),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','parser.py',226),
  ('expr -> expr STAR expr','expr',3,'p_expr_binary','parser.py',227),
  ('expr -> expr SLASH expr','expr',3,'p_expr_binary','parser.py',228),
  ('expr -> expr LESS expr','expr',3,'p_expr_binary','parser.py',229),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr_binary','parser.py',230),
  ('expr -> expr GREATER expr','expr',3,'p_expr_binary','parser.py',231),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr_binary','parser.py',232),
  ('expr -> expr EQUAL_EQUAL expr','expr',3,'p_expr_binary','parser.py',233),
  ('expr -> expr BANG_EQUAL expr','expr',3,'p_expr_binary','parser.py',234),
  ('expr -> expr OR expr','expr',3,'p_expr_binary','parser.py',235),
  ('expr -> expr AND expr','expr',3,'p_expr_binary','parser.py',236),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_grouping','parser.py',243),
  ('expr -> NUMBER','expr',1,'p_expr_literal','parser.py',250),
  ('expr -> NIL','expr',1,'p_expr_literal','parser.py',251),
  ('expr -> STRING','expr',1,'p_expr_literal','parser.py',252),
  ('expr -> LEFT_BRACKET expr_list_comma RIGHT_BRACKET','expr',3,'p_expr_literal','parser.py',253),
  ('expr -> expr DOT IDENTIFIER','expr',3,'p_expr_dispatch','parser.py',269),
  ('expr -> expr DOT IDENTIFIER LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',6,'p_expr_dispatch','parser.py',270),
  ('expr -> expr LEFT_BRACKET expr RIGHT_BRACKET','expr',4,'p_expr_indexof','parser.py',280),
  ('expr -> expr LEFT_PAREN expr_list_comma RIGHT_PAREN','expr',4,'p_expr_fn_call','parser.py',287),
  ('expr_list_comma -> expr COMMA expr_list_comma','expr_list_comma',3,'p_expr_list_comma','parser.py',294),
  ('expr_list_comma -> expr','expr_list_comma',1,'p_expr_list_comma','parser.py',295),
  ('expr_list_comma -> empty','expr_list_comma',1,'p_expr_list_comma','parser.py',296),
  ('expr -> IDENTIFIER','expr',1,'p_expr_variable','parser.py',309),
  ('expr -> expr IF expr ELSE expr','expr',5,'p_expr_ternary','parser.py',316),
  ('expr -> LEFT_BRACE stmt_list RIGHT_BRACE','expr',3,'p_expr_block','parser.py',323),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET','indexof_list',3,'p_indexof_list','parser.py',330),
  ('indexof_list -> LEFT_BRACKET expr RIGHT_BRACKET indexof_list','indexof_list',4,'p_indexof_list','parser.py',331),
  ('declaration -> LET IDENTIFIER EQUAL expr SEMICOLON','declaration',5,'p_declaration','parser.py',341),
  ('declaration -> LET MUT IDENTIFIER EQUAL expr SEMICOLON','declaration',6,'p_declaration','parser.py',342),
  ('declaration -> LET IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',343),
  ('declaration -> LET MUT IDENTIFIER SEMICOLON','declaration',4,'p_declaration','parser.py',344),
  ('assign -> expr EQUAL expr SEMICOLON','assign',4,'p_assign','parser.py',358),
  ('assign -> expr indexof_list EQUAL expr SEMICOLON','assign',5,'p_assign','parser.py',359),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',369),
]
